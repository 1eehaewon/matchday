<script>
    // 초기 로드 시 총 상품 금액 계산
    document.addEventListener('DOMContentLoaded', function() {
        updateTotalPrice();
    });

    // 총 가격 업데이트 함수
    function updateTotalPrice() {
        var quantity = parseInt(document.getElementById('quantity-input').value);
        var price = ${goodsDto.price};
        var totalPrice = quantity * price;
        var deliveryfee = 3000; // 기본 배송비 3000원

        // 100,000원 이상 구매 시 무료
        if (totalPrice >= 100000) {
            deliveryfee = 0;
        }

        // 업데이트된 값들을 화면에 표시합니다
        document.getElementById('order-quantity').innerText = quantity + '개';
        document.getElementById('deliveryfee').innerText = deliveryfee.toLocaleString() + '원';
        document.getElementById('total-price').innerText = totalPrice.toLocaleString() + '원';

        // 숨겨진 입력 필드를 업데이트합니다
        document.getElementById('form-quantity').value = quantity;
        document.getElementById('form-unitprice').value = price;
        document.getElementById('form-deliveryfee').value = deliveryfee;        
        document.getElementById('form-totalprice').value = totalPrice;
    }

    function updateQuantity(change) {
        var input = document.getElementById('quantity-input');
        var currentValue = parseInt(input.value);
        var newValue = currentValue + change;

        if (newValue < 1) {
            newValue = 1; // 최소 수량은 1로 설정
        }

        input.value = newValue;
        updateTotalPrice(); // 총 가격 업데이트
    }
</script>





















package kr.co.matchday.mypage;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MypageDAO {

    @Autowired
    private SqlSession sqlSession;

    public MypageDTO getUserById(String userId) {
        return sqlSession.selectOne("kr.co.matchday.mypage.MypageDAO.getUserById", userId);
    }

    public void updateUserPoints(String userId, int points) {
        MypageDTO mypageDTO = new MypageDTO();
        mypageDTO.setUserid(userId);
        mypageDTO.setTotalpoints(points);
        sqlSession.update("kr.co.matchday.mypage.MypageDAO.updateUserPoints", mypageDTO);
    }
}




















package kr.co.matchday.order;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.tickets.TicketsDetailDTO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Repository
public class OrderDAO {

    @Autowired
    private SqlSession sqlSession;

    @Autowired
    private MypageDAO mypageDao;  // 추가된 부분

    public void insert(OrderDTO orderDto) {
        System.out.println("Preparing to insert order: " + orderDto.toString());
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insert", orderDto);
        System.out.println("Order inserted in database.");

        // 주문 상세 정보 삽입 
        for (OrderdetailDTO orderDetail : orderDto.getOrderDetails()) {
            orderDetail.setOrderid(orderDto.getOrderid());
            insertOrderDetail(orderDetail);
        }

        // 포인트 차감 로직 추가
        if (orderDto.getUsedpoints() > 0) {
            MypageDTO user = mypageDao.getUserById(orderDto.getUserid());
            int updatedPoints = user.getTotalpoints() - orderDto.getUsedpoints();
            mypageDao.updateUserPoints(orderDto.getUserid(), updatedPoints);
        }
    }

    public void insertOrderDetail(OrderdetailDTO orderDetailDto) {
        System.out.println("Preparing to insert order detail: " + orderDetailDto.toString());
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insertOrderDetail", orderDetailDto);
        System.out.println("Order detail inserted in database.");
    }

    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.listByUser", userid);
    }

    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getUserInfo", userID);
    }

    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "Goods");
        params.put("usage", "Not Used");
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getCouponsByUserId", params);
    }

    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getDiscountRateByCouponId", couponid);
    }

    public int updateCouponUsage(String couponid) {
        return sqlSession.update("kr.co.matchday.order.OrderDAO.updateCouponUsage", couponid);
    }

    public String getMaxOrderId(String date) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getMaxOrderId", date);
    }

    public List<OrderDTO> getOrderByUserId(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderByUserId", userid);
    }

    public OrderDTO getOrderById(String orderid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getOrderById", orderid);
    }

    public List<OrderdetailDTO> getOrderDetailByOrderId(String orderid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderDetailByOrderId", orderid);
    }
}




















package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;
    
    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();
        
        System.out.println("HERE !! ");
        System.out.println(requestParams);
        System.out.println(requestParams.get("goodsid"));
        
        
        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientphone = requestParams.get("recipientphone");
        String recipientpostcode = requestParams.get("recipientpostcode");
        String recipientaddress1 = requestParams.get("recipientaddress1");
        String recipientaddress2 = requestParams.get("recipientaddress2");
        String deliverymessage = requestParams.get("deliverymessage");
        String paymentmethod = requestParams.get("paymentmethod");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);
        String couponid = requestParams.get("couponid");
        String goodsid = requestParams.get("goodsid");
        int quantity = parseInteger(requestParams.get("quantity"), 0);
        String size = requestParams.get("size");
        int deliveryfee = parseInteger(requestParams.get("deliveryfee"), 0);
        
        System.out.println("usedpoints = " + usedpoints);
        
        if (imp_uid == null || merchant_uid == null || paid_amount <= 0) {
            response.put("status", "error");
            response.put("message", "잘못된 요청입니다.");
            return response;
        }

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            response.put("status", "error");
            response.put("message", "로그인이 필요합니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));

        JSONObject json = new JSONObject();
        json.put("imp_key", env.getProperty("iamport.key"));
        json.put("imp_secret", env.getProperty("iamport.secret"));

        HttpEntity<String> entity = new HttpEntity<>(json.toString(), headers);
        ResponseEntity<Map> tokenResponse = restTemplate.exchange(
            "https://api.iamport.kr/users/getToken", HttpMethod.POST, entity, Map.class);

        if (tokenResponse.getStatusCode() == HttpStatus.OK) {
            Map<String, Object> tokenResponseBody = tokenResponse.getBody();
            if (tokenResponseBody != null && (boolean) tokenResponseBody.get("response") != null) {
                Map<String, Object> tokenData = (Map<String, Object>) tokenResponseBody.get("response");
                String accessToken = (String) tokenData.get("access_token");

                headers.set("Authorization", accessToken);
                HttpEntity<String> paymentEntity = new HttpEntity<>(headers);

                ResponseEntity<Map> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, paymentEntity, Map.class);

                if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                    Map<String, Object> paymentResponseBody = paymentResponse.getBody();
                    if (paymentResponseBody != null && (boolean) paymentResponseBody.get("response") != null) {
                        Map<String, Object> paymentData = (Map<String, Object>) paymentResponseBody.get("response");
                        int amount = (int) paymentData.get("amount");

                        if (amount == paid_amount) {
                            String orderId = generateOrderId();
                            OrderDTO orderDto = new OrderDTO();
                            orderDto.setOrderid(orderId);
                            orderDto.setUserid(userid);
                            orderDto.setOrderdate(new Timestamp(System.currentTimeMillis()));
                            orderDto.setTotalprice(paid_amount);
                            orderDto.setRecipientname(recipientname);
                            orderDto.setRecipientphone(recipientphone);
                            orderDto.setRecipientpostcode(recipientpostcode);
                            orderDto.setRecipientaddress1(recipientaddress1);
                            orderDto.setRecipientaddress2(recipientaddress2);
                            orderDto.setDeliverymessage(deliverymessage);
                            orderDto.setPaymentmethod(paymentmethod);
                            orderDto.setUsedpoints(usedpoints);
                            orderDto.setDeliveryfee(deliveryfee);
                            orderDto.setFinalpaymentamount(finalpaymentamount);

                            OrderdetailDTO orderDetailDto = new OrderdetailDTO();
                            orderDetailDto.setOrderid(orderId);
                            orderDetailDto.setGoodsid(goodsid);
                            orderDetailDto.setQuantity(quantity);
                            orderDetailDto.setSize(size);

                            orderDto.setOrderDetails(Arrays.asList(orderDetailDto));
                            orderDao.insert(orderDto);

                            // 쿠폰 사용 업데이트
                            if (couponid != null && !couponid.isEmpty()) {
                                orderDao.updateCouponUsage(couponid);
                            }

                            response.put("status", "success");
                            response.put("order_id", orderId);
                            return response;
                        }
                    }
                }
            }
        }

        response.put("status", "error");
        response.put("message", "결제 검증에 실패했습니다.");
        return response;
    }

    private String generateOrderId() {
        String prefix = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(prefix);

        if (maxOrderId == null) {
            return prefix + "0001";
        } else {
            int nextOrderId = Integer.parseInt(maxOrderId.substring(8)) + 1;
            return prefix + String.format("%04d", nextOrderId);
        }
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    @GetMapping("/orderList")
    public ModelAndView orderList(HttpSession session) {
        ModelAndView mav = new ModelAndView("order/orderList");
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            mav.setViewName("redirect:/member/login");
            return mav;
        }

        List<OrderDTO> orderList = orderDao.list(userid);
        mav.addObject("orderList", orderList);
        return mav;
    }
}

