<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ include file="../header.jsp" %>

<style>
    .cart-container {
        background-color: #fff;
        padding: 50px;   
    }

    .order_wrap {
        max-width: 1500px;
        margin: 0 auto;
    }
    
    /* 장바구니 라인 */
    .order_tit {
        border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        margin-bottom: 30px;
    }

    .order_tit h2 {
        font-size: 30px;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    .order_tit ol {
        list-style: none;
        display: flex;
        justify-content: right;
    }

    .order_tit ol li {
        display: flex;
        align-items: center;
        margin-right: 30px;
        font-size: 20px;
        color: #666;
    }

    .order_tit ol li.page_on span {
        font-weight: bold;
        color: #333;
    }

    .order_tit ol li img {
        margin-left: 5px;
        vertical-align: middle;
    }
    /* 장바구니 라인 end */

    /* 장바구니 상품 공간 */
    .cart_cont {
        border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        background-color: #fff;
        padding: 20px;
        margin-bottom: 50px;
    }

    .no_data {
        text-align: center;
        font-size: 20px;
        color: #666;
        margin-top: 20px;
    }

    /* 쇼핑계속하기 */
    .btn_left_box {
        text-align: left;
        margin-top: 20px;
    }

    .shop_go_link {
        font-size: 20px;
        color: #333;
        text-decoration: none;
    }

    .shop_go_link em {
        font-style: normal;
        font-weight: bold;
    }
    /* 쇼핑계속하기 end */

    /* 총 금액 계산하는 곳 */
    .price_sum {
        background-color: #fff;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .price_sum_list {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .price_sum_list dl {
        margin-bottom: 10px;
    }

    .price_sum_list dl dt {
        font-size: 16px;
        font-weight: bold;
        color: #333;
    }

    .price_sum_list dl dd {
        font-size: 16px;
        color: #333;
    }

    .price_sum_list span img {
        margin: 0 10px;
    }

    .price_sum_list dl.price_total {
        font-size: 18px;
    }

    .price_sum_list dl.price_total dt {
        color: #333;
        font-weight: bold;
    }

    .price_sum_list dl.price_total dd {
        font-size: 18px;
        color: #333;
        font-weight: bold;
    }
    /* 총 금액 계산하는 곳 end */
</style>

<div class="cart-container">
    <div class="content_box">
        <div class="order_wrap">
            <div class="order_tit">
                <h2>장바구니</h2>
                <ol>
                    <li class="page_on"><span>01</span> 장바구니 <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="장바구니진행 중"></span></li>
                    <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="주문서작성/결제대기"></span></li>
                    <li><span>03</span> 주문완료</li>
                </ol>
            </div>

            <div class="cart_cont">
                <form id="Cartfrm" name="Cartfrm" method="post">
                    <div class="row">
                        <div class="col-sm-12">
                            <table class="table table-hover">
                                <thead class="table-active">
                                    <tr>
                                        <th><input type="checkbox" id="selectAllCheckbox" onchange="toggleCheckboxes(this.checked)"></th>
                                        <th>상품 정보</th>
                                        <th>수량</th>
                                        <th>가격</th>
                                        <th>총 가격</th>
                                        <th>삭제</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <c:forEach items="${cartList}" var="cart">
                                        <tr>
                                            <td><input type="checkbox" name="selectedItems" value="${cart.cartid}" onchange="calculateTotal()"></td>
                                            <td>
                                                <c:forEach items="${goodsList}" var="goods">
                                                    <c:if test="${cart.goodsid eq goods.goodsid}">
                                                        <div class="product-image">
                                                            <c:if test="${not empty goods.filename}">
                                                                <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                                            </c:if>
                                                        </div>
                                                        <span>${goods.productname}</span>
                                                    </c:if>
                                                </c:forEach>
                                            </td>
                                            <td>
                                                <button type="button" onclick="decrementQuantity(this)">-</button>
                                                <input type="text" class="quantity-input" value="${cart.quantity}" readonly>
                                                <button type="button" onclick="incrementQuantity(this)">+</button>
                                            </td>
                                            <td>${cart.unitprice.toLocaleString()}</td>
                                            <td>${cart.totalprice.toLocaleString()}</td>
                                            <td><button type="button" onclick="deleteItem(${cart.cartid})">삭제하기</button></td>
                                        </tr>
                                    </c:forEach>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <p class="no_data" id="noDataMessage" style="display: none;">장바구니에 담겨있는 상품이 없습니다.</p>
                </form>
            </div>

            <div class="price_sum">
                <div class="price_sum_cont">
                    <div class="price_sum_list">
                        <dl>
                            <dt>총 <strong id="totalSelectedCount">0</strong> 개의 상품금액 </dt>
                            <dd><strong id="totalSelectedPrice">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_plus.png" alt="더하기" /></span>
                        <dl>
                            <dt>배송비</dt>
                            <dd><strong id="totalDeliveryCharge">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_total.png" alt="합계" /></span>
                        <dl class="price_total">
                            <dt>합계</dt>
                            <dd><strong id="totalSettlePrice">0</strong>원</dd>
                        </dl>
                    </div>
                    <em id="deliveryChargeText" class="tobe_mileage"></em>
                </div>
            </div>
            <div class="btn_left_box">
                <a href="/goods/list" class="shop_go_link"><em>&lt; 쇼핑 계속하기</em></a>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleCheckboxes(checked) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = checked;
        }
        calculateTotal();
    }

    function incrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) + 1;
        input.value = newValue;
        updateTotalPrice();
    }

    function decrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) - 1;
        if (newValue >= 0) {
            input.value = newValue;
            updateTotalPrice();
        }
    }















function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPrice = parseInt(row.cells[3].textContent.replace(/,/g, '')); // 단가가 표시된 셀 인덱스를 가정
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.cells[4].textContent = totalPrice.toLocaleString(); // 총 가격 열 업데이트
        }
    }

    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();

    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();

    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
}

function calculateTotal() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var totalPriceCell = row.cells[4];
            totalSelectedPrice += parseInt(totalPriceCell.textContent.replace(/,/g, ''));
        }
    }

    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();

    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();

    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
}





























<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ include file="../header.jsp" %>

<style>

    .cart-container {
        background-color: #fff;
        padding: 50px;   
    }
	
    .order_wrap {
        max-width: 1500px;
        margin: 0 auto;
    }
	
	/* 장바구니 라인 */
    .order_tit {
    	border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        margin-bottom: 30px;
    }

    .order_tit h2 {
        font-size: 30px;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    .order_tit ol {
        list-style: none;
        display: flex;
        justify-content: right;
    }

    .order_tit ol li {
        display: flex;
        align-items: center;
        margin-right: 30px;
        font-size: 20px;
        color: #666;
    }

    .order_tit ol li.page_on span {
        font-weight: bold;
        color: #333;
    }

    .order_tit ol li img {
        margin-left: 5px;
        vertical-align: middle;
    }
    /* 장바구니 라인 end */

    /* 장바구니 상품 공간 */
    .cart_cont {
    	border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        background-color: #fff;
        padding: 20px;
        margin-bottom: 50px;
        
    }

    .no_data {
        text-align: center;
        font-size: 20px;
        color: #666;
        margin-top: 20px;
    }

	/* 총 금액 계산하는 곳 */
    .price_sum {
        background-color: #fff;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .price_sum_list {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .price_sum_list dl {
        margin-bottom: 10px;
    }

    .price_sum_list dl dt {
        font-size: 16px;
        font-weight: bold;
        color: #333;
    }

    .price_sum_list dl dd {
        font-size: 16px;
        color: #333;
    }

    .price_sum_list span img {
        margin: 0 10px;
    }

    .price_sum_list dl.price_total {
        font-size: 18px;
    }

    .price_sum_list dl.price_total dt {
        color: #333;
        font-weight: bold;
    }

    .price_sum_list dl.price_total dd {
        font-size: 18px;
        color: #333;
        font-weight: bold;
    }
    /* 총 금액 계산하는 곳 end */
    
    /* 쇼핑계속하기 */
    .btn_left_box {
        text-align: left;
        margin-top: 20px;
    }

    .shop_go_link {
        font-size: 20px;
        color: #333;
        text-decoration: none;
    }

    .shop_go_link em {
        font-style: normal;
        font-weight: bold;
    }
	/* 쇼핑계속하기 end */

	/* 테이블 헤더와 바디의 내용 가운데 정렬 */
    .table-active, .table-hover tbody {
        text-align: center;
        vertical-align: middle;
    }
</style>
<!-- 본문 시작 cart/list.jsp -->
<div class="cart-container">
	<div class="content_box">
	    <div class="order_wrap">
	    
	        <div class="order_tit">
	            <h2>장바구니</h2>
	            <ol>
	                <li class="page_on"><span>01</span> 장바구니 <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="장바구니진행 중"></span></li>
	                <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="주문서작성/결제대기"></span></li>
	                <li><span>03</span> 주문완료</li>
	            </ol>
	        </div>
	        <!-- //order_tit -->
	
	        <div class="cart_cont">
	            <form id="Cartfrm" name="Cartfrm" method="post">
	            <!-- 장바구니 상품리스트 시작 -->
				<div class="row">
					<div class="col-sm-12">
						<table class="table table-hover">
							<thead class="table-active">
								<tr>
									<th><input type="checkbox" id="selectAllCheckbox" onchange="toggleCheckboxes(this.checked)"></th>
									<th>상품 정보</th>	
									<th>수량</th>
									<th>가격</th>
									<th>총 가격</th>	
									<th>삭제</th>
								</tr>					
							</thead>
							<tbody>
							    <c:forEach items="${cartList}" var="cart">
							        <tr>
							            <td><input type="checkbox" name="selectedItems" value="${cart.cartid}" onchange="calculateTotal()"></td>
							            <td>
                                        <c:forEach items="${goodsList}" var="goods">
	                                        <c:if test="${cart.goodsid eq goods.goodsid}">
		                                        <div class="product-image">
			                                        <c:if test="${not empty goods.filename}">
			                                        	<a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
			                                        	<img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
			                                        </c:if>
		                                        </div>
		                                        <br>
	                                        	<span>${goods.productname}</span>
	                                        	<span>${goods.size}</span>
	                                        </c:if>
                                        </c:forEach>
                                        </td>
							            <td>
										    <button type="button" onclick="decrementQuantity(this)">-</button>
										    <input type="text" class="quantity-input" value="${cart.quantity}" readonly>
										    <button type="button" onclick="incrementQuantity(this)">+</button>
										</td>
							            <td>${cart.unitprice}</td>
							            <td>${cart.totalprice}</td>
							            <td><button type="button" onclick="deleteItem(${cart.cartid})">삭제하기</button></td>
							        </tr>
							    </c:forEach>
							</tbody>
						</table>
					</div><!-- col end -->
				</div><!-- row end -->
	                <!-- cart_cont_list -->
	                <!-- 장바구니 상품리스트 끝 -->
	
	                <p class="no_data" id="noDataMessage" style="display: none;">장바구니에 담겨있는 상품이 없습니다.</p>
	            </form>
	        </div>
	        <!-- //cart_cont -->
	        
	        <div class="price_sum">
	        	<div class="price_sum_cont">
		            <div class="price_sum_list">
		            	<dl>
                            <dt>총 <strong id="totalSelectedCount">0</strong> 개의 상품금액 </dt>
                            <dd><strong id="totalSelectedPrice">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_plus.png" alt="더하기" /></span>
                        <dl>
                            <dt>배송비</dt>
                            <dd><strong id="totalDeliveryCharge">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_total.png" alt="합계" /></span>
                        <dl class="price_total">
                            <dt>합계</dt>
                            <dd><strong id="totalSettlePrice">0</strong>원</dd>
                        </dl>
		            </div>
	            	<em id="deliveryChargeText" class="tobe_mileage"></em>
		        </div>
		        <!-- price_sum_cont end-->
	    	</div>
	        <!-- price_sum end -->
	        <div class="btn_left_box">
	        	<a href="/goods/list" class="shop_go_link"><em>&lt; 쇼핑 계속하기</em></a>
	        </div>
	    </div>
	    <!-- order_wrap end-->
	



























// 전체 선택 체크박스 클릭 시 모든 체크박스를 선택 또는 해제하는 함수
function toggleCheckboxes(checked) {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = checked;
    }
    calculateTotal();
}

// 수량 증가 함수
function incrementQuantity(button) {
    var input = button.parentNode.querySelector('.quantity-input');
    var newValue = parseInt(input.value) + 1;
    input.value = newValue;
    updateTotalPrice();
}

// 수량 감소 함수
function decrementQuantity(button) {
    var input = button.parentNode.querySelector('.quantity-input');
    var newValue = parseInt(input.value) - 1;
    if (newValue >= 0) {
        input.value = newValue;
        updateTotalPrice();
    }
}

// 수량 변경에 따른 총 가격 업데이트 함수
function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPrice = parseInt(row.cells[4].textContent.replace('원', '').replace(',', '')); // 단가가 표시된 셀 인덱스를 가정
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.cells[5].textContent = totalPrice.toLocaleString() + '원'; // 총 가격 열 업데이트
        }
    }

    // 화면에 표시되는 총합 업데이트
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString() + '원';

    // 배송비 계산 및 총 결제 가격 업데이트
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString() + '원';

    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString() + '원';
}

// 수량 입력 변경 이벤트 리스너
document.addEventListener("DOMContentLoaded", function() {
    var quantityInputs = document.querySelectorAll('.quantity-input');
    for (var input of quantityInputs) {
        input.addEventListener('change', updateTotalPrice);
    }

    var cartItems = document.getElementsByName('selectedItems');
    if (cartItems.length === 0) {
        document.getElementById('noDataMessage').style.display = 'block';
    }
});

// 선택된 상품의 개수와 총 가격을 계산하여 표시하는 함수
function calculateTotal() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var totalPriceCell = row.cells[5];
            totalSelectedPrice += parseInt(totalPriceCell.textContent.replace('원', '').replace(',', ''));
        }
    }

    // 상품금액 표시
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString() + '원'; // 콤마(,) 표시 추가

    // 배송비 계산
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString() + '원';

    // 합계 계산
    var totalSettlePrice

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // 수량 변경에 따른 총 가격 업데이트 함수
function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPrice = parseInt(row.cells[4].textContent.replace('원', '').replace(',', '')); // 단가가 표시된 셀 인덱스를 가정
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.cells[5].textContent = formatPrice(totalPrice); // 총 가격 열 업데이트
        }
    }

    // 화면에 표시되는 총합 업데이트
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = formatPrice(totalSelectedPrice);
    
    // 배송비 계산 및 총 결제 가격 업데이트
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = formatPrice(deliveryCharge);
    
    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = formatPrice(totalSettlePrice);
}

// 금액 포맷 함수
function formatPrice(price) {
    return price.toLocaleString() + '원';
}






// 선택된 상품의 개수와 총 가격을 계산하여 표시하는 함수
function calculateTotal() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var totalPriceCell = row.cells[5];
            totalSelectedPrice += parseInt(totalPriceCell.textContent.replace('원', '').replace(',', ''));
        }
    }

    // 상품금액 표시
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = formatPrice(totalSelectedPrice);

    // 배송비 계산
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = formatPrice(deliveryCharge);
    
    // 합계 계산
    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = formatPrice(totalSettlePrice);
}




























.item-card {
    position: relative;
}

.sold-out {
    opacity: 0.7; /* 품절 상품의 투명도를 줄입니다. */
    pointer-events: none; /* 클릭 이벤트 비활성화 */
    filter: grayscale(100%); /* 회색으로 만듭니다. */
    /* 추가적으로 품절 상품의 스타일을 지정할 수 있습니다. */
}

.sold-out-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.3); /* 투명 회색 배경 */
}

.sold-out-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 0, 0, 0.7); /* 반투명 빨간 배경 */
    color: white;
    font-weight: bold;
    padding: 5px 10px;
    border-radius: 4px;
}





<div class="goodsItem">
    <div class="item-card ${'Y' eq row.issoldout ? 'sold-out' : ''}" data-category="${row.category}">
        <c:choose>
            <c:when test="${not empty row.filename && row.filename != '-'}">
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/storage/goods/${row.filename}"
                         class="img-responsive margin">
                </a>
            </c:when>
            <c:otherwise>
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/images/default_product_image.jpg"
                         alt="등록된 사진 없음" class="small-image">
                </a>
            </c:otherwise>
        </c:choose>
        <p>
            <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">${row.productname}</a>
        	<p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
        </p>

        <c:choose>
            <c:when test="${'Y' eq row.issoldout}">
                <div class="sold-out-overlay"></div>
                <p class="sold-out-text">품절</p>
            </c:when>
            <c:otherwise>
                <p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
            </c:otherwise>
        </c:choose>
    </div>
</div>
















<div class="goodsItem">
    <div class="item-card ${'Y' eq row.issoldout && not 'M' eq user.membergrade ? 'sold-out' : ''}" data-category="${row.category}">
        <c:choose>
            <c:when test="${not empty row.filename && row.filename != '-'}">
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/storage/goods/${row.filename}"
                         class="img-responsive margin">
                </a>
            </c:when>
            <c:otherwise>
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/images/default_product_image.jpg"
                         alt="등록된 사진 없음" class="small-image">
                </a>
            </c:otherwise>
        </c:choose>
        <p>
            <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">${row.productname}</a>
            <p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
        </p>

        <c:choose>
            <c:when test="${'Y' eq row.issoldout && not 'M' eq user.membergrade}">
                <div class="sold-out-overlay"></div>
                <p class="sold-out-text">품절</p>
            </c:when>
            <c:otherwise>
                <p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
            </c:otherwise>
        </c:choose>
    </div>
</div>

<script>
    // JavaScript를 사용하여 특정 조건에 따라 클릭 가능 여부를 설정합니다.
    document.addEventListener("DOMContentLoaded", function() {
        var itemCards = document.querySelectorAll('.item-card');
        
        itemCards.forEach(function(card) {
            if (card.classList.contains('sold-out')) {
                // 품절 상품이면서, 회원 등급이 'M'인 사용자인 경우 클릭 가능하도록 변경합니다.
                if (user.membergrade === 'M') {
                    card.classList.remove('sold-out');
                    card.style.opacity = '1';
                    card.style.pointerEvents = 'auto';
                }
            }
        });
    });
</script>















<td>
    <c:forEach items="${goodsList}" var="goods">
        <c:if test="${cart.goodsid eq goods.goodsid}">
            <c:choose>
                <c:when test="${goods.size eq 'FREE'}">
                    FREE
                </c:when>
                <c:otherwise>
                    <select class="size-select" onchange="updateTotalPrice(this)">
                        <option value="S" <c:if test="${goods.size eq 'S'}">selected</c:if>>S</option>
                        <option value="M" <c:if test="${goods.size eq 'M'}">selected</c:if>>M</option>
                        <option value="L" <c:if test="${goods.size eq 'L'}">selected</c:if>>L</option>
                        <option value="XL" <c:if test="${goods.size eq 'XL'}">selected</c:if>>XL</option>
                    </select>
                </c:otherwise>
            </c:choose>
        </c:if>
    </c:forEach>
</td>

<td>
    <c:forEach items="${goodsList}" var="goods">
        <c:if test="${cart.goodsid eq goods.goodsid}">
            <c:choose>
                <c:when test="${goods.size eq 'FREE'}">
                    FREE
                </c:when>
                <c:otherwise>
                    <span>${goods.size}</span> <!-- 기존 사이즈 표시 -->
                </c:otherwise>
            </c:choose>
        </c:if>
    </c:forEach>
</td>


<td>
    <c:forEach items="${goodsList}" var="goods">
        <c:if test="${goodsDto.goodsid eq goodsDto.goodsid}">
            <c:choose>
                <c:when test="${goodsDto.size eq 'FREE'}">
                    FREE
                </c:when>
                <c:otherwise>
                    <select name="size">
                        <option value="S" <c:if test="${goodsDto.size eq 'S'}">selected</c:if>>S</option>
                        <option value="M" <c:if test="${goodsDto.size eq 'M'}">selected</c:if>>M</option>
                        <option value="L" <c:if test="${goodsDto.size eq 'L'}">selected</c:if>>L</option>
                        <option value="XL" <c:if test="${goodsDto.size eq 'XL'}">selected</c:if>>XL</option>
                    </select>
                </c:otherwise>
            </c:choose>
        </c:if>
    </c:forEach>
</td>













<!-- 선택한 상품만 삭제하기 버튼 -->
<button type="button" onclick="deleteSelectedItems()" class="delete-button">선택한 상품만 삭제하기</button>
<!-- 전체 삭제하기 버튼 -->
<button type="button" onclick="deleteAllItems()" class="delete-button">전체 삭제하기</button>


















// 선택한 상품만 삭제하기 함수
function deleteSelectedItems() {
    var selectedItems = document.querySelectorAll('input[name="selectedItems"]:checked');
    if (selectedItems.length > 0) {
        if (confirm("선택한 상품을 삭제하시겠습니까?")) {
            var selectedIds = [];
            selectedItems.forEach(function(item) {
                selectedIds.push(item.value);
            });
            location.href = '/cart/delete?cartid=' + selectedIds.join(',');
        }
    } else {
        alert("삭제할 상품을 선택하세요.");
    }
}

// 전체 삭제하기 함수
function deleteAllItems() {
    var allCheckboxes = document.querySelectorAll('input[name="selectedItems"]');
    if (allCheckboxes.length > 0) {
        var selectAllCheckbox = document.getElementById("selectAllCheckbox");
        selectAllCheckbox.checked = true;
        toggleCheckboxes(true); // 모든 체크박스를 선택 상태로 변경

        if (confirm("전체 상품을 삭제하시겠습니까?")) {
            var allIds = [];
            allCheckboxes.forEach(function(item) {
                allIds.push(item.value);
            });
            location.href = '/cart/delete?cartid=' + allIds.join(',');
        } else {
            // 사용자가 취소 버튼을 클릭한 경우 모든 체크박스를 해제 상태로 변경
            selectAllCheckbox.checked = false;
            toggleCheckboxes(false);
        }
    } else {
        alert("삭제할 상품이 없습니다.");
    }
}

// 기존 함수 수정
function toggleCheckboxes(checked) {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = checked;
    }
    calculateTotal();
}









// 선택된 상품 삭제 함수
function deleteSelectedItems() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("삭제할 상품을 선택해주세요.");
        return;
    }

    if (confirm("선택한 상품을 삭제하시겠습니까?")) {
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

// 전체 상품 삭제 함수
function deleteAllItems() {
    if (confirm("전체 상품을 삭제하시겠습니까?")) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = true;
        }
        var selectedItems = [];
        for (var checkbox of checkboxes) {
            selectedItems.push(checkbox.value);
        }
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

// Attach the functions to the buttons
document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
    document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
});


<!-- 선택한 상품 삭제 버튼 -->
<div class="button-container">
    <button type="button" id="deleteSelectedButton" class="delete-button">선택한 상품만 삭제하기</button>
    <!-- 전체 삭제 버튼 -->
    <button type="button" id="deleteAllButton" class="delete-button">전체 삭제하기</button>
</div>


/* 쇼핑계속하기 */
.btn_left_box {
    text-align: left;
    margin-top: 20px;
}

.button-container {
    display: flex;
    justify-content: flex-end; /* Align items to the right */
    margin-top: 20px; /* Adjust margin as needed */
}

.delete-button {
    font-size: 18px;
    padding: 10px 20px; /* padding으로 크기 조정 */
    background-color: #f1f1f1; /* 버튼 배경 색상 */
    border: 1px solid #ccc; /* 버튼 테두리 */
    border-radius: 4px; /* 모서리 둥글게 */
    cursor: pointer; /* 마우스 커서 변경 */
    margin: 0 5px; /* 버튼 좌우 여백 */
}

.delete-button:hover {
    background-color: #e1e1e1; /* 버튼 호버 시 배경 색상 */
}

.delete-button:active {
    background-color: #d1d1d1; /* 버튼 클릭 시 배경 색상 */
    border-color: #999; /* 버튼 클릭 시 테두리 색상 */
}















import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class CartController {

    @RequestMapping(value = "/cart/delete", method = RequestMethod.GET)
    public String deleteItems(@RequestParam List<Integer> cartid) {
        // Handle the deletion logic here
        for (int id : cartid) {
            // Delete the item with the given id
            // e.g., cartService.deleteItemById(id);
        }
        return "redirect:/cart/list"; // Redirect to the cart list page after deletion
    }
}





<!-- 선택한 상품 삭제 버튼 -->
<button type="button" id="deleteSelectedButton" class="delete-button">선택한 상품만 삭제하기</button>

<!-- 전체 삭제 버튼 -->
<button type="button" id="deleteAllButton" class="delete-button">전체 삭제하기</button>






function deleteSelectedItems() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("삭제할 상품을 선택해주세요.");
        return;
    }

    if (confirm("선택한 상품을 삭제하시겠습니까?")) {
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

function deleteAllItems() {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = true;
    }
    deleteSelectedItems();
}

// Attach the functions to the buttons
document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
    document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
});









function addToCart() {
    // 수량 입력 요소 확인
    var quantityInput = document.getElementById('quantity-input');
    if (!quantityInput) {
        console.error('수량 입력 요소를 찾을 수 없습니다');
        return;
    }

    var quantity = parseInt(quantityInput.value); // 수량을 정수로 변환

    // 총 가격 요소 확인
    var totalPriceElement = document.getElementById('total-price');
    if (!totalPriceElement) {
        console.error('총 가격 요소를 찾을 수 없습니다');
        return;
    }

    var totalPriceText = totalPriceElement.innerText;
    var totalPrice = parseInt(totalPriceText.replace(/,/g, '')); // 쉼표 제거 후 정수로 변환

    // formQuantity 입력 요소 확인
    var formQuantity = document.getElementById('form-quantity');
    if (!formQuantity) {
        console.error('장바구니 수량 입력 필드를 찾을 수 없습니다');
        return;
    }

    // formTotalPrice 입력 요소 확인
    var formTotalPrice = document.getElementById('form-totalprice');
    if (!formTotalPrice) {
        console.error('장바구니 총 가격 입력 필드를 찾을 수 없습니다');
        return;
    }

    // 세션 스코프에서 userid 가져오기
    var userId = '${sessionScope.userID}';
    console.log('사용자 아이디:', userId);
    
    // 폼 필드에 값 설정
    formQuantity.value = quantity;
    formTotalPrice.value = totalPrice;

    // Ajax를 사용하여 장바구니에 상품 추가하는 코드 작성 가능

    // 디버깅을 위한 콘솔 출력
    console.log('수량:', quantity);
    console.log('총 가격:', totalPrice);

    // 모달 창 띄우기
    showCartModal();
}


function goToCart() {
    document.getElementById('addToCartForm').submit(); // 폼 제출 후 장바구니 목록 페이지 URL로 이동
}


























<script>
    // 장바구니에 상품 추가 함수
    function addToCart() {
        // 수량 입력 요소 가져오기
        var quantityInput = document.getElementById('quantity-input');
        if (!quantityInput) {
            console.error('수량 입력 요소를 찾을 수 없습니다');
            return;
        }

        // 수량 값 가져오기
        var quantity = parseInt(quantityInput.value);

        // 사용자 아이디 가져오기
        var userId = '${sessionScope.userID}';

        // 상품 정보 가져오기
        var goodsId = '${goodsDto.goodsid}';
        var unitPrice = ${goodsDto.price};
        var totalPrice = quantity * unitPrice;

        // AJAX를 이용한 서버로의 요청
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '${pageContext.request.contextPath}/cart/insert', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    // 성공적으로 추가되면 모달창 띄우기
                    showCartModal();
                } else {
                    console.error('장바구니 추가에 실패했습니다.');
                }
            }
        };
        
        // 요청 본문 생성
        var params = 'userid=' + encodeURIComponent(userId) +
                     '&goodsid=' + encodeURIComponent(goodsId) +
                     '&quantity=' + encodeURIComponent(quantity) +
                     '&unitprice=' + encodeURIComponent(unitPrice) +
                     '&totalprice=' + encodeURIComponent(totalPrice);
        
        // 요청 보내기
        xhr.send(params);
    }

    // 모달창 보이기
    function showCartModal() {
        var modal = document.getElementById('cartModal');
        modal.style.display = 'block';
    }

    // 쇼핑 계속하기
    function continueShopping() {
        var modal = document.getElementById('cartModal');
        modal.style.display = 'none';
        window.location.href = '/goods/list'; // 쇼핑 계속하기 페이지로 이동
    }

    // 장바구니로 이동
    function goToCart() {
        var addToCartForm = document.getElementById('addToCartForm');
        addToCartForm.submit(); // 폼 제출하여 장바구니 페이지로 이동
    }

    // 수량 업데이트
    function updateQuantity(change) {
        var quantityInput = document.getElementById('quantity-input');
        var currentValue = parseInt(quantityInput.value) || 1; // 기본값 1 설정
        var newValue = currentValue + change;

        if (newValue < 1) {
            newValue = 1;
        }

        quantityInput.value = newValue;

        // 총 가격 업데이트
        updateTotalPrice();
    }

















// 장바구니에 상품을 추가하는 함수
function addToCart() {
    // 수량 입력 요소 확인
    var quantityInput = document.getElementById('quantity-input');
    if (!quantityInput) {
        console.error('수량 입력 요소를 찾을 수 없습니다');
        return;
    }

    var quantity = parseInt(quantityInput.value); // 수량을 정수로 변환

    // 총 가격 요소 확인
    var totalPriceElement = document.getElementById('total-price');
    if (!totalPriceElement) {
        console.error('총 가격 요소를 찾을 수 없습니다');
        return;
    }

    var totalPriceText = totalPriceElement.innerText;
    var totalPrice = parseInt(totalPriceText.replace(/[^0-9]/g, '')); // 숫자 이외의 문자 제거 후 정수로 변환

    // formQuantity 입력 요소 확인
    var formQuantity = document.getElementById('form-quantity');
    if (!formQuantity) {
        console.error('장바구니 수량 입력 필드를 찾을 수 없습니다');
        return;
    }

    // formTotalPrice 입력 요소 확인
    var formTotalPrice = document.getElementById('form-totalprice');
    if (!formTotalPrice) {
        console.error('장바구니 총 가격 입력 필드를 찾을 수 없습니다');
        return;
    }

    // 세션 스코프에서 userid 가져오기
    var userId = '${sessionScope.userID}';
    console.log('사용자 아이디:', userId);

    // 폼 필드에 값 설정
    formQuantity.value = quantity;
    formTotalPrice.value = totalPrice;

    // 디버깅을 위한 콘솔 출력
    console.log('수량:', quantity);
    console.log('총 가격:', totalPrice);

    // 장바구니에 추가된 상품을 표시하기 위한 모달 열기
    showCartModal();
}

// 쇼핑 계속하기 버튼 클릭 시 동작
function continueShopping() {
    // 장바구니 추가 함수 호출
    addToCart();

    // 쇼핑 계속하기 페이지로 이동
    window.location.href = '/goods/list'; // 쇼핑 계속하기 페이지 URL로 수정
}










function loadContent(tabId) {
    try {
        if (tabId === 'info04') {
            // 리뷰 탭이 클릭되었을 때
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    // 서버로부터 받은 리뷰 목록을 info04 탭 내용에 출력
                    document.getElementById('info04').innerHTML = this.responseText;
                }
            };
            xhttp.open("GET", "${pageContext.request.contextPath}/review/list", true);
            xhttp.send();
        } else {
            // 다른 탭을 클릭했을 때는 기존의 loadContent 로직과 동일하게 처리
            var tabContents = document.querySelectorAll('.tabcont');
            tabContents.forEach(function(content) {
                content.style.display = 'none';
            });
            var selectedTabContent = document.getElementById(tabId);
            selectedTabContent.style.display = 'block';

            var tabMenuItems = document.querySelectorAll('.info-tab li');
            tabMenuItems.forEach(function(item) {
                item.classList.remove('on');
            });
            var selectedTabMenuItem = document.querySelector('.info-tab li[data-tab="' + tabId + '"]');
            selectedTabMenuItem.classList.add('on');
        }
    } catch (error) {
        console.error('loadContent 함수에서 오류 발생:', error);
        alert('콘텐츠를 로드하는 데 실패했습니다. 나중에 다시 시도해주세요.');
    }
}













<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>상품후기</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="review-tabs">
        <button class="tab-button active" onclick="showTab('review')">상품후기</button>
        <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기</button>
        <button class="tab-button" onclick="showTab('write-review')">상품 글쓰기</button>
    </div>

    <div id="review" class="tab-content">
        <div class="review-container">
            <div class="review-header">
                <div class="review-author">
                    <img src="path_to_avatar_image.jpg" alt="Avatar" class="author-avatar">
                    <span class="author-name">사용자 이름</span>
                </div>
                <div class="review-date">2024-07-09</div>
            </div>
            <div class="review-rating">
                ★★★★☆
            </div>
            <div class="review-content">
                여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
            </div>
        </div>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        상품 전체 보기 내용
    </div>

    <div id="write-review" class="tab-content" style="display: none;">
        상품 글쓰기 내용
    </div>

    <script>
        function showTab(tabId) {
            var tabs = document.getElementsByClassName('tab-content');
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].style.display = 'none';
            }
            document.getElementB




body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    padding: 20px;
}

.review-tabs {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 20px;
}

.tab-button {
    background-color: #f1f1f1;
    border: 1px solid #ddd;
    padding: 10px 20px;
    cursor: pointer;
    margin-right: 10px;
    border-radius: 5px;
    font-size: 16px;
}

.tab-button.active {
    background-color: #fff;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.tab-content {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.review-container {
    border: 1px solid #ddd;
    padding: 20px;
    margin: 20px 0;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.review-author {
    display: flex;
    align-items: center;
}

.author-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
}

.author-name {
    font-weight: bold;
    color: #333;
}

.review-date {
    color: #999;
}

.review-rating {
    margin-bottom: 10px;
    color: #f5c518; /* 평점 색상 */
    font-size: 20px;
}

.review-content {
    font-size: 16px;
    color: #333;
}









<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>상품후기</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="review-tabs">
        <button class="tab-button active" onclick="showTab('review')">상품후기</button>
        <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기</button>
        <button class="tab-button" onclick="showTab('write-review')">상품 글쓰기</button>
    </div>

    <div id="review" class="tab-content">
        <div class="review-list">
            <div class="review-summary" onclick="toggleReviewDetails('review1')">
                <div class="review-rating">★★★★☆</div>
                <div class="review-title">좋은 상품입니다</div>
                <div class="review-author">사용자 이름</div>
                <div class="review-date">2024-07-09</div>
            </div>
            <div id="review1" class="review-details">
                <div class="review-content">
                    여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                </div>
                <img src="path_to_image.jpg" alt="Review Image" class="review-image">
                <div class="review-comments">
                    <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                    <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                </div>
            </div>

            <div class="review-summary" onclick="toggleReviewDetails('review2')">
                <div class="review-rating">★★★☆☆</div>
                <div class="review-title">보통입니다</div>
                <div class="review-author">다른 사용자</div>
                <div class="review-date">2024-07-08</div>
            </div>
            <div id="review2" class="review-details">
                <div class="review-content">
                    상품이 보통입니다.
                </div>
                <img src="path_to_image2.jpg" alt="Review Image" class="review-image">
                <div class="review-comments">
                    <div class="comment">댓글 1: 동의합니다.</div>
                </div>
            </div>
        </div>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        상품 전체 보기 내용
    </div>

    <div id="write-review" class="tab-content" style="display: none;">
        상품 글쓰기 내용
    </div>

    <script>
        function showTab(tabId) {
            var tabs = document.getElementsByClassName('tab-content');
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].style.display = 'none';
            }
            document.getElementById(tabId).style.display = 'block';

            var buttons = document.getElementsByClassName('tab-button');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            event.currentTarget.classList.add('active');
        }

        function toggleReviewDetails(reviewId) {
            var details = document.getElementById(reviewId);
            if (details.style.display === 'none' || details.style.display === '') {
                details.style.display = 'block';
            } else {
                details.style.display = 'none';
            }
        }
    </script>
</body>
</html>






body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    padding: 20px;
}

.review-tabs {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 20px;
}

.tab-button {
    background-color: #f1f1f1;
    border: 1px solid #ddd;
    padding: 10px 20px;
    cursor: pointer;
    margin-right: 10px;
    border-radius: 5px;
    font-size: 16px;
}

.tab-button.active {
    background-color: #fff;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.tab-content {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.review-list {
    margin-top: 20px;
}

.review-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #f1f1f1;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: 10px;
}

.review-summary:hover {
    background-color: #e1e1e1;
}

.review-rating, .review-title, .review-author, .review-date {
    flex: 1;
    text-align: center;
}

.review-details {
    display: none;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    margin-bottom: 10px;
}

.review-content {
    margin-bottom: 10px;
}

.review-image {
    max-width: 100%;
    height: auto;
    margin-bottom: 10px;
}

.review-comments {
    margin-top: 10px;
}

.comment {
    background-color: #f9f9f9;
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review List</title>
    <style>
        .review-summary {
            cursor: pointer;
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 5px;
        }
        .review-details {
            display: none;
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
        }
        .review-image {
            width: 100px;
            height: auto;
            display: block;
            margin-top: 10px;
        }
        .comment {
            margin-top: 5px;
        }
    </style>
</head>
<body>

<div id="review-container"></div>

<script>
    const reviews = [
        {
            rating: '★★★★☆',
            title: '좋은 상품입니다',
            author: '사용자 이름',
            date: '2024-07-09',
            content: '여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!',
            image: 'path_to_image.jpg',
            comments: [
                '댓글 1: 정말 좋은 리뷰네요!',
                '댓글 2: 저도 같은 경험을 했습니다.'
            ]
        },
        {
            rating: '★★★☆☆',
            title: '괜찮은 상품입니다',
            author: '다른 사용자',
            date: '2024-07-08',
            content: '상품이 나쁘지 않습니다. 괜찮아요.',
            image: 'path_to_another_image.jpg',
            comments: [
                '댓글 1: 저도 비슷하게 느꼈어요.',
                '댓글 2: 괜찮은 리뷰입니다.'
            ]
        }
        // 추가 리뷰 데이터를 여기에 추가
    ];

    function toggleReviewDetails(reviewId) {
        const reviewDetails = document.getElementById(reviewId);
        reviewDetails.style.display = reviewDetails.style.display === 'none' ? 'block' : 'none';
    }

    function renderReviews() {
        const reviewContainer = document.getElementById('review-container');
        reviews.forEach((review, index) => {
            const reviewId = `review${index}`;
            const reviewSummary = `
                <div class="review-summary" onclick="toggleReviewDetails('${reviewId}')">
                    <div class="review-rating">${review.rating}</div>
                    <div class="review-title">${review.title}</div>
                    <div class="review-author">${review.author}</div>
                    <div class="review-date">${review.date}</div>
                </div>
                <div id="${reviewId}" class="review-details">
                    <div class="review-content">${review.content}</div>
                    <img src="${review.image}" alt="Review Image" class="review-image">
                    <div class="review-comments">
                        ${review.comments.map(comment => `<div class="comment">${comment}</div>`).join('')}
                    </div>
                </div>
            `;
            reviewContainer.innerHTML += reviewSummary;
        });
    }

    document.addEventListener('DOMContentLoaded', renderReviews);
</script>

</body>
</html>
    
    
    function openPopup(url) { // 상품 글쓰기
        window.open(url, "popupWindow", "width=1200,height=800,scrollbars=yes");
    }
    
    function openPopup(url) {
    var width = 1200;
    var height = 800;

    // 화면의 중앙에 위치시키기 위한 좌표 계산
    var left = (screen.width - width) / 2;
    var top = (screen.height - height) / 2;

    // 창을 중앙에 띄우기
    window.open(url, "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
}
    
    
    
    
    

    

   
   
   
   
   
   
   <!-- review.xml -->

<!-- Insert a new review -->
<insert id="insertReview" parameterType="ReviewDTO">
    INSERT INTO reviews (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
    VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
</insert>

<!-- Select a review by reviewid -->
<select id="selectReviewById" parameterType="String" resultType="ReviewDTO">
    SELECT * FROM reviews WHERE reviewid = #{reviewid}
</select>

<!-- Update a review -->
<update id="updateReview" parameterType="ReviewDTO">
    UPDATE reviews
    SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, reviewdate = #{reviewdate},
        title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}
    WHERE reviewid = #{reviewid}
</update>

<!-- Delete a review -->
<delete id="deleteReview" parameterType="String">
    DELETE FROM reviews WHERE reviewid = #{reviewid}
</delete>

<!-- Select all reviews -->
<select id="selectAllReviews" resultType="ReviewDTO">
    SELECT * FROM reviews
</select>
   
   
   
   
   
   
   
   
  package kr.co.matchday.review;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private SqlSession sqlSession;

    public void insertReview(ReviewDTO review) {
        sqlSession.insert("insert", review);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("selectReviewById", reviewid);
    }

    public void updateReview(ReviewDTO review) {
        sqlSession.update("update", review);
    }

    public void deleteReview(String reviewid) {
        sqlSession.delete("delete", reviewid);
    }

    public List<ReviewDTO> selectAllReviews() {
        return sqlSession.selectList("selectAll");
    }
}
  
  
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.review;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    @GetMapping("/list")
    public String list(Model model) {
        // Fetch all reviews from DAO
        model.addAttribute("reviews", reviewDao.selectAllReviews());
        return "review/list"; // Assuming "review/list" is your view name
    }

    @GetMapping("/write")
    public String writeForm(Model model) {
        model.addAttribute("reviewDto", new ReviewDTO());
        return "review/write"; // Assuming "review/write" is your view name
    }

    // Handle form submission
    // Use POST method for submitting review data
    // Example: @PostMapping("/save")
    // @ModelAttribute binds form data to ReviewDTO object
    // Redirect to list after saving or return to form with errors
    // Adjust as per your actual form and submission needs
  
  
  
  
  
  
  <form name="frmWrite" id="frmWrite" action="${pageContext.request.contextPath}/review/save" method="post" enctype="multipart/form-data">
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.review;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    // Display form for writing a review
    @GetMapping("/write")
    public String writeForm(Model model) {
        model.addAttribute("reviewDto", new ReviewDTO());
        return "review/write"; // Assuming "review/write" is your view name
    }

    // Handle form submission to save a review
    @PostMapping("/save")
    public String saveReview(@ModelAttribute("reviewDto") ReviewDTO reviewDto) {
        // Perform validation or additional logic if needed

        // Save the review using ReviewDAO
        reviewDao.insert(reviewDto);

        // Redirect to list page or any other appropriate page
        return "redirect:/review/list";
    }

    // List reviews
    @GetMapping("/list")
    public String list(Model model) {
        // Fetch all reviews from DAO
        model.addAttribute("reviews", reviewDao.selectAllReviews());
        return "review/list"; // Assuming "review/list" is your view name
    }
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  @PostMapping("/save")
public String saveReview(@ModelAttribute("reviewDto") ReviewDTO reviewDto) {
    // Perform validation or additional logic if needed
    // For example, you can validate the rating field here

    int rating = reviewDto.getRating();
    if (rating < 1 || rating > 10) {
        // Handle validation error, e.g., return to form with error message
        return "review/write"; // Assuming "review/write" is your form view
    }

    // Save the review using ReviewDAO
    reviewDao.insert(reviewDto);

    // Redirect to list page or any other appropriate page
    return "redirect:/review/list";
}
  
  
  
  
  
  
  
  
package kr.co.matchday.review;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private SqlSession sqlSession;

    public void insert(ReviewDTO reviewDto) {
        sqlSession.insert("review.insert", reviewDto);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("review.selectReviewById", reviewid);
    }

    public void update(ReviewDTO reviewDto) {
        sqlSession.update("review.update", reviewDto);
    }

    public void delete(String reviewid) {
        sqlSession.delete("review.delete", reviewid);
    }

    public List<ReviewDTO> list() {
        return sqlSession.selectList("review.selectAll");
    }
}
  
  
  
  
  
  
  
  <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <!-- Insert a new review -->
    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <!-- Select a review by reviewid -->
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>
    
    <!-- Update a review -->
    <update id="update" parameterType="kr.co.matchday.review.ReviewDTO">
        UPDATE review
        SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, reviewdate = #{reviewdate},
            title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}
        WHERE reviewid = #{reviewid}
    </update>
    
    <!-- Delete a review -->
    <delete id="delete" parameterType="String">
        DELETE FROM review WHERE reviewid = #{reviewid}
    </delete>
    
    <!-- Select all reviews -->
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>
</mapper>
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.goods;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.review.ReviewDAO;
import kr.co.matchday.review.ReviewDTO;

@Controller
@RequestMapping("/goods")
public class GoodsCont {

    public GoodsCont() {
        System.out.println("-----GoodsCont() 객체 생성됨");
    }

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private ReviewDAO reviewDao;

    @RequestMapping("/list")
    public ModelAndView list(@RequestParam(defaultValue = "1") int page, HttpSession session) {
        int pageSize = 16;
        int offset = (page - 1) * pageSize;

        int totalRecords = goodsDao.countGoods();
        int totalPages = (int) Math.ceil((double) totalRecords / pageSize);

        Map<String, Integer> params = new HashMap<>();
        params.put("limit", pageSize);
        params.put("offset", offset);

        List<GoodsDTO> goodsList = goodsDao.listWithPaging(params);

        // Fetch reviews for each goods item
        Map<String, List<ReviewDTO>> reviewsMap = new HashMap<>();
        for (GoodsDTO goods : goodsList) {
            List<ReviewDTO> reviews = reviewDao.(goods.getGoodsid());
            reviewsMap.put(goods.getGoodsid(), reviews);
        }

        ModelAndView mav = new ModelAndView();
        mav.setViewName("goods/list");
        mav.addObject("list", goodsList);
        mav.addObject("reviewsMap", reviewsMap);
        mav.addObject("currentPage", page);
        mav.addObject("totalPages", totalPages);

        String userID = (String) session.getAttribute("userID");
        mav.addObject("userID", userID);

        return mav;
    }

    // Other methods remain unchanged

}
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.review;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    public ReviewDAO() {
        System.out.println("-----ReviewDAO() 객체 생성됨");
    }

    @Autowired
    SqlSession sqlSession;

    public void insert(ReviewDTO reviewDto) {
        sqlSession.insert("review.insert", reviewDto);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("selectReviewById", reviewid);
    }

    public void update(ReviewDTO reviewDto) {
        sqlSession.update("review.update", reviewDto);
    }

    public void delete(String reviewid) {
        sqlSession.delete("review.delete", reviewid);
    }

    public List<ReviewDTO> list() {
        return sqlSession.selectList("review.list");
    }

    public List<ReviewDTO> (String goodsid) {
        return sqlSession.selectList("review.", goodsid);
    }

}
  
  
  
  
  
  
  
  
  
  
  
  
  
  <!-- goods/list.jsp -->
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Goods List</title>
</head>
<body>
    <h1>Goods List</h1>
    <c:forEach var="goods" items="${list}">
        <div>
            <h2>${goods.productname}</h2>
            <p>${goods.description}</p>
            <p>Price: ${goods.price}</p>
            <p>Category: ${goods.category}</p>
            <c:if test="${!empty goods.filename}">
                <img src="/storage/goods/${goods.filename}" alt="${goods.productname}" width="100" height="100">
            </c:if>
            <h3>Reviews:</h3>
            <c:forEach var="review" items="${reviewsMap[goods.goodsid]}">
                <div>
                    <p>Title: ${review.title}</p>
                    <p>Content: ${review.content}</p>
                    <p>Rating: ${review.rating}</p>
                </div>
            </c:forEach>
        </div>
    </c:forEach>
    <!-- Pagination controls -->
    <c:if test="${totalPages > 1}">
        <nav>
            <ul>
                <c:forEach begin="1" end="${totalPages}" var="pageNum">
                    <li><a href="?page=${pageNum}">${pageNum}</a></li>
                </c:forEach>
            </ul>
        </nav>
    </c:if>
</body>
</html>
  
  <c:if test="${empty reviewList}">
    <p>No reviews available.</p>
</c:if>
  
  <script>
    function toggleReviewDetails(reviewId) {
        var reviewDetails = document.getElementById(reviewId);
        if (reviewDetails.style.display === "none") {
            reviewDetails.style.display = "block";
        } else {
            reviewDetails.style.display = "none";
        }
    }
</script>
  
  
  
  <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>
<head>
    <title>Review List</title>
    <style>
        .review-details {
            display: none;
        }
    </style>
    <script>
        function toggleReviewDetails(reviewId) {
            var reviewDetails = document.getElementById(reviewId);
            if (reviewDetails.style.display === "none") {
                reviewDetails.style.display = "block";
            } else {
                reviewDetails.style.display = "none";
            }
        }
    </script>
</head>
<body>
    <c:if test="${empty reviewList}">
        <p>No reviews available.</p>
    </c:if>

    <c:forEach var="review" items="${reviewList}">
        <div class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
            <div class="review-rating">${review.rating} 평점</div>
            <div class="review-title">${review.title}</div>
            <div class="review-author">${review.userid}</div>
            <div class="review-date">${review.reviewdate}</div>
        </div>
        <div id="review${review.reviewid}" class="review-details">
            <div class="review-content">${review.content}</div>
            <img src="${review.imagepath}" alt="Review Image" class="review-image">
            <div class="review-comments">
                <c:forEach var="comment" items="${review.comments}">
                    <div class="comment">${comment}</div>
                </c:forEach>
            </div>
        </div>
    </c:forEach>
</body>
</html>
  
  
  
  
  
  
  
  
  
  @RequestMapping("/list")
public ModelAndView list(@RequestParam(defaultValue = "1") int page, HttpSession session) {
    int pageSize = 16;
    int offset = (page - 1) * pageSize;

    int totalRecords = goodsDao.countGoods();
    int totalPages = (int) Math.ceil((double) totalRecords / pageSize);

    Map<String, Integer> params = new HashMap<>();
    params.put("limit", pageSize);
    params.put("offset", offset);

    List<GoodsDTO> goodsList = goodsDao.listWithPaging(params);

    // Fetch reviews for each goods item
    Map<String, List<ReviewDTO>> reviewMap = new HashMap<>();
    for (GoodsDTO goods : goodsList) {
        List<ReviewDTO> reviews = reviewDao.getReviewByGoodsId(goods.getGoodsid());
        reviewMap.put(goods.getGoodsid(), reviews);
    }
    
    ModelAndView mav = new ModelAndView();
    mav.setViewName("goods/list");
    mav.addObject("list", goodsList);
    mav.addObject("currentPage", page);
    mav.addObject("totalPages", totalPages);

    // 세션에서 userID를 가져와서 사용자가 로그인한 상태인지 확인
    String userID = (String) session.getAttribute("userID");
    mav.addObject("userID", userID);

    // reviewList 추가
    mav.addObject("reviewList", reviewMap);

    return mav;
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<c:forEach var="goods" items="${list}">
    <div class="goods-item">
        <h3>${goods.productname}</h3>
        <!-- 상품의 다른 정보 표시 -->

        <!-- 리뷰 표시 -->
        <c:set var="reviewList" value="${reviewList[goods.goodsid]}"/>
        <c:if test="${empty reviewList}">
            <p>No reviews available.</p>
        </c:if>

        <c:forEach var="review" items="${reviewList}">
            <div class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
                <div class="review-rating">${review.rating} 평점</div>
                <div class="review-title">${review.title}</div>
                <div class="review-author">${review.userid}</div>
                <div class="review-date">${review.reviewdate}</div>
            </div>
            <div id="review${review.reviewid}" class="review-details">
                <div class="review-content">${review.content}</div>
                <img src="${review.imagepath}" alt="Review Image" class="review-image">
                <div class="review-comments">
                    <c:forEach var="comment" items="${review.comments}">
                        <div class="comment">${comment}</div>
                    </c:forEach>
                </div>
            </div>
        </c:forEach>
    </div>
</c:forEach>
  
  
  
  
  
  
  
  
  
  <script>
    function toggleReviewDetails(reviewId) {
        var reviewDetails = document.getElementById(reviewId);
        if (reviewDetails.style.display === "none") {
            reviewDetails.style.display = "block";
        } else {
            reviewDetails.style.display = "none";
        }
    }
</script>

<style>
    .review-details {
        display: none;
    }
</style>

















@Controller
public class ReviewController {
    @GetMapping("/review/write")
    public String showReviewWriteForm(@RequestParam("goodsid") int goodsid, Model model) {
        // Assuming you have a service method to get the GoodsDto by its ID
        GoodsDto goodsDto = goodsService.getGoodsById(goodsid);
        model.addAttribute("GoodsDto", goodsDto);
        return "review/write"; // The name of your JSP/HTML file
    }
}




















import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ReviewController {
    private GoodsDao goodsDao;

    // GoodsDao를 생성자를 통해 주입받습니다.
    public ReviewController(GoodsDao goodsDao) {
        this.goodsDao = goodsDao;
    }

    @GetMapping("/review/write")
    public String showReviewWriteForm(Model model) {
        // 상품 목록을 데이터베이스에서 가져옵니다.
        List<GoodsDto> goodsList = goodsDao.getAllGoods();
        model.addAttribute("goodsList", goodsList);
        return "review/write"; // review/write.jsp 또는 review/write.html 파일을 가리킵니다.
    }

    @PostMapping("/review/insert")
    public String insertReview(@RequestParam("goodsid") int goodsid,
                               @RequestParam("title") String title,
                               @RequestParam("content") String content,
                               RedirectAttributes redirectAttributes) {
        // 리뷰 데이터를 처리하는 코드를 작성합니다.
        // 여기서는 데이터베이스에 삽입하는 예시를 들었습니다.
        ReviewDto reviewDto = new ReviewDto();
        reviewDto.setGoodsid(goodsid);
        reviewDto.setTitle(title);
        reviewDto.setContent(content);

        // 리뷰를 데이터베이스에 삽입하는 메서드를 호출합니다.
        insertReviewIntoDatabase(reviewDto);

        // 리다이렉트 할 경로를 지정합니다.
        return "redirect:/review/list"; // 리뷰 목록 페이지로 리다이렉트합니다.
    }

    private void insertReviewIntoDatabase(ReviewDto reviewDto) {
        try (SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession()) {
            sqlSession.insert("review.insert", reviewDto);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ReviewController {
    private GoodsDao goodsDao;

    // GoodsDao를 생성자를 통해 주입받습니다.
    public ReviewController(GoodsDao goodsDao) {
        this.goodsDao = goodsDao;
    }

    @GetMapping("/review/write")
    public String showReviewWriteForm(Model model) {
        // 상품 목록을 데이터베이스에서 가져옵니다.
        List<GoodsDto> goodsList = goodsDao.getAllGoods();
        model.addAttribute("goodsList", goodsList);
        return "review/write"; // review/write.jsp 또는 review/write.html 파일을 가리킵니다.
    }

    @PostMapping("/review/insert")
    public String insertReview(@RequestParam("goodsid") int goodsid,
                               @RequestParam("title") String title,
                               @RequestParam("content") String content,
                               RedirectAttributes redirectAttributes) {
        // 리뷰 데이터를 처리하는 코드를 작성합니다.
        // 여기서는 데이터베이스에 삽입하는 예시를 들었습니다.
        ReviewDto reviewDto = new ReviewDto();
        reviewDto.setGoodsid(goodsid);
        reviewDto.setTitle(title);
        reviewDto.setContent(content);

        // 리뷰를 데이터베이스에 삽입하는 메서드를 호출합니다.
        insertReviewIntoDatabase(reviewDto);

        // 리다이렉트 할 경로를 지정합니다.
        return "redirect:/review/list"; // 리뷰 목록 페이지로 리다이렉트합니다.
    }

    private void insertReviewIntoDatabase(ReviewDto reviewDto) {
        try (SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession()) {
            sqlSession.insert("review.insert", reviewDto);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <label for="goodsid">상품 선택:</label>
    <select name="goodsid" id="goodsid">
        <c:forEach items="${goodsList}" var="goods">
            <option value="${goods.goodsid}">${goods.productname}</option>
        </c:forEach>
    </select>
    <br/>
    <label for="title">제목:</label>
    <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
    <br/>
    <label for="content">내용:</label>
    <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
    <br/>
    <input type="submit" value="리뷰 작성"/>
</form>
  
  
  
<!-- ReviewMapper.xml -->
<mapper namespace="kr.co.matchday.review.ReviewMapper">
    <select id="getReviewByGoodsId" parameterType="java.lang.Long" resultType="kr.co.matchday.review.Review">
        SELECT * FROM review_table WHERE goods_id = #{goodsId}
    </select>
</mapper>

  
  
  
  
  
  import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class GoodsDao {
    private final SqlSession sqlSession;

    public GoodsDao(SqlSession sqlSession) {
        this.sqlSession = sqlSession;
    }

    public List<GoodsDto> getAllGoods() {
        return sqlSession.selectList("goods.getAllGoods");
    }
}

<mapper namespace="goods">
    <select id="getAllGoods" resultType="GoodsDto">
        SELECT goodsid, productname
        FROM goods
    </select>
</mapper>

  
  
  
  
  // ReviewDAO.java
package kr.co.matchday.review;

import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public class ReviewDAO {
    private final ReviewMapper reviewMapper;

    public ReviewDAO(ReviewMapper reviewMapper) {
        this.reviewMapper = reviewMapper;
    }

    public List<Review> getReviewByGoodsId(Long goodsId) {
        return reviewMapper.getReviewByGoodsId(goodsId);
    }
}
  
  
  
  
  
  
  // ReviewMapper.java
package kr.co.matchday.review;

import java.util.List;

public interface ReviewMapper {
    List<Review> getReviewByGoodsId(Long goodsId);
}
  <!-- mybatis-config.xml -->
<configuration>
    <mappers>
        <mapper resource="kr/co/matchday/review/ReviewMapper.xml"/>
        <!-- Other mappers if any -->
    </mappers>
</configuration>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  @GetMapping("/detail")
public ModelAndView detail(@RequestParam("goodsid") String goodsid) {
    ModelAndView mav = new ModelAndView();
    mav.setViewName("goods/detail");

    // Retrieve goods details
    GoodsDTO goodsDto = goodsDao.detail(goodsid);
    mav.addObject("goodsDto", goodsDto);

    // Retrieve related reviews for the goods
    List<ReviewDTO> reviews = reviewDao.getReviewsByGoodsId(goodsid);
    mav.addObject("reviews", reviews);

    return mav;
}
  
  
  
  <!-- goods/detail.jsp -->
<h2>Goods Detail</h2>
<p>Product Name: ${goodsDto.productname}</p>
<p>Description: ${goodsDto.description}</p>
<!-- Display reviews -->
<h3>Reviews</h3>
<ul>
    <c:forEach items="${reviews}" var="review">
        <li>
            <p>Title: ${review.title}</p>
            <p>Content: ${review.content}</p>
            <p>Rating: ${review.rating}</p>
            <!-- Add other review details as needed -->
        </li>
    </c:forEach>
</ul>
  
  
  
  
  
  // In ReviewDAO.java
public List<ReviewDTO> (String goodsid) {
    return sqlSession.selectList("review.", goodsid);
}
  \
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <label for="goodsid">상품 선택:</label>
<select name="goodsid" id="goodsid">
    <c:forEach items="${goodsList}" var="goods">
        <option value="${goods.goodsid}">${goods.productname}</option>
    </c:forEach>
</select>
  
  
  
  
  
  <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <!-- goodsid will be submitted here -->
    <label for="goodsid">상품 선택:</label>
    <select name="goodsid" id="goodsid">
        <c:forEach items="${goodsList}" var="goods">
            <option value="${goods.goodsid}">${goods.productname}</option>
        </c:forEach>
    </select>
    <br/>
    <label for="title">제목:</label>
    <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
    <br/>
    <label for="content">내용:</label>
    <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
    <br/>
    <input type="submit" value="리뷰 작성"/>
</form>
  
  
  
  
  
  @Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    @Autowired
    private GoodsDAO goodsDao;

    @GetMapping("/write")
    public String write(@ModelAttribute("reviewDto") ReviewDTO reviewDto, Model model) {
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        return "review/write";
    }

    @PostMapping("/insert")
    public String insert(@ModelAttribute ReviewDTO reviewDto) {
        // Handle review insertion logic
        reviewDao.insert(reviewDto);
        return "redirect:/review/list";
    }

    @GetMapping("/list")
    public String list(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // Redirect to login page if user is not logged in
        }
        
        List<ReviewDTO> reviewList = reviewDao.list();
        model.addAttribute("reviewList", reviewList);
        return "review/list";
    }
}
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.review.ReviewMapper">

    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <select id="getReviewByGoodsId" parameterType="java.lang.Long" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE goodsid = #{goodsid}
    </select>
    
    <!-- 기타 필요한 매핑들 -->
    
</mapper>
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="kr.co.matchday.goods.GoodsMapper">
 
     <insert id="insert" parameterType="kr.co.matchday.goods.GoodsDTO">
        INSERT INTO goods(goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo)
        VALUES(#{goodsid}, #{category}, #{productname}, #{description}, #{size}, #{price}, #{stockquantity}, #{issoldout}, #{filename}, #{filesize}, #{regdate}, #{caution}, #{deliveryreturnsexchangesinfo})
    </insert>
    
    <select id="list" resultType="kr.co.matchday.goods.GoodsDTO">
        SELECT goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo
        FROM goods
        ORDER BY productname
    </select>
    
    <!-- 기타 필요한 매핑들 -->
    
 </mapper>
 
 
 
 package kr.co.matchday.review;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class ReviewDAOImpl implements ReviewDAO {

    @Autowired
    private SqlSession sqlSession; // Make sure SqlSession is properly injected

    @Override
    public List<ReviewDTO> getReviewsByGoodsId(String goodsid) {
        return sqlSession.selectList("review.getReviewByGoodsId", goodsid);
    }
}
 
 
 
 
 
 
 package kr.co.matchday.review;

import java.util.List;

public interface ReviewDAO {
    List<ReviewDTO> getReviewsByGoodsId(String goodsid);
}
 
 
 
 
 
 
 
 <select id="getReviewByGoodsId" parameterType="java.lang.Long" resultType="kr.co.matchday.review.ReviewDTO">
    SELECT * FROM review WHERE goodsid = #{goodsid}
</select>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Review Page</title>
    <style>
        .review-summary {
            cursor: pointer;
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px 0;
        }
        .review-details {
            display: none;
            border-top: 1px solid #ccc;
            padding: 10px;
            margin-top: 5px;
        }
        .review-image {
            width: 100px;
            height: 100px;
        }
    </style>
    <script>
        function toggleReviewDetails(id) {
            const reviewDetails = document.getElementById(id);
            if (reviewDetails.style.display === "none") {
                reviewDetails.style.display = "block";
            } else {
                reviewDetails.style.display = "none";
            }
        }

        function loadReviews() {
            const reviews = [
                {
                    rating: 5,
                    title: "Great product",
                    author: "user1",
                    reviewdate: "2023-07-01",
                    content: "I loved this product! Highly recommend.",
                    imagePath: "path_to_image1.jpg",
                    comments: ["동의합니다."]
                },
                {
                    rating: 4,
                    title: "Very good",
                    author: "user2",
                    reviewdate: "2023-07-02",
                    content: "This product is very good, but there's room for improvement.",
                    imagePath: "path_to_image2.jpg",
                    comments: ["좋아요!"]
                }
                // 더 많은 리뷰 데이터를 여기에 추가할 수 있습니다.
            ];

            const reviewContainer = document.getElementById('reviewContainer');
            reviews.forEach((review, index) => {
                const reviewId = 'review' + index;
                const reviewSummary = `
                    <div class="review-summary" onclick="toggleReviewDetails('${reviewId}')">
                        <div class="review-rating">${review.rating} 평점</div>
                        <div class="review-title">${review.title}</div>
                        <div class="review-author">${review.author}</div>
                        <div class="review-date">${review.reviewdate}</div>
                    </div>
                    <div id="${reviewId}" class="review-details">
                        <div class="review-content">${review.content}</div>
                        <img src="${review.imagePath}" alt="Review Image" class="review-image">
                        <div class="review-comments">
                            ${review.comments.map(comment => `<div class="comment">댓글: ${comment}</div>`).join('')}
                        </div>
                    </div>
                `;
                reviewContainer.innerHTML += reviewSummary;
            });
        }

        document.addEventListener('DOMContentLoaded', loadReviews);
    </script>
</head>
<body>
    <div id="reviewContainer"></div>
</body>
</html>
 
 
 
 
 
 
 <div class="review-summary" onclick="toggleReviewDetails('review3')">
    <div class="review-rating">${review.rating}평점</div>
    <div class="review-title">${review.title}</div>
    <div class="review-author">${userid}</div>
    <div class="review-date">${review.reviewdate}</div>
</div>
<div id="review3" class="review-details">
    <div class="review-content">
        ${review.content}
    </div>
    <img src="path_to_image2.jpg" alt="Review Image" class="review-image">
    <div class="review-comments">
        <div class="comment">댓글 1: 동의합니다.</div>
    </div>
</div>
 
 <div class="review-rating">★★★★☆</div>
 
 
 
 
 
 
 
 
 
 
 
 
 
 function toggleReviewDetails(reviewId) {
    var reviewDetails = document.getElementById(reviewId);
    if (reviewDetails.style.display === 'none') {
        reviewDetails.style.display = 'block';
    } else {
        reviewDetails.style.display = 'none';
    }
}
 
 
 
 
 
 function toggleReviewDetails(reviewId) {
    var reviewDetails = document.getElementById(reviewId);
    if (reviewDetails.style.display === 'none') {
        reviewDetails.style.display = 'block';
        console.log("Rating: ★★★★☆"); // 예시로 하드코딩된 평점 출력
    } else {
        reviewDetails.style.display = 'none';
    }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <resultMap id="ReviewWithGoodsMap" type="kr.co.matchday.review.ReviewDTO">
        <id property="reviewid" column="reviewid" />
        <result property="userid" column="userid" />
        <result property="matchid" column="matchid" />
        <result property="goodsid" column="goodsid" />
        <result property="reviewdate" column="reviewdate" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="rating" column="rating" />
        <result property="grantedpoints" column="grantedpoints" />
        <!-- Add additional fields from goods table if needed -->
        <association property="goods" javaType="kr.co.matchday.goods.GoodsDTO">
            <result property="productname" column="productname" />
            <result property="price" column="price" />
            <result property="category" column="category" />
        </association>
    </resultMap>

    <select id="getReviewList" parameterType="String" resultMap="ReviewWithGoodsMap">
        SELECT r.reviewid, r.userid, r.matchid, r.goodsid, r.reviewdate, r.title, r.content, r.rating, r.grantedpoints,
               g.productname, g.price, g.category
        FROM review r
        JOIN goods g ON r.goodsid = g.goodsid
        WHERE r.goodsid = #{goodsid}
    </select>
    
    <!-- Additional SQL statements can be added as needed -->

</mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <select id="getReviewList" parameterType="kr.co.matchday.review.ReviewDTO" resultMap="reviewListResultMap">
        SELECT r.reviewid, r.userid, r.matchid, r.goodsid, r.reviewdate, r.title, r.content, r.rating, r.grantedpoints,
               g.productname, g.price, g.category
        FROM review r
        JOIN goods g ON r.goodsid = g.goodsid
        WHERE r.goodsid = #{goodsid}
    </select>
    
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>
    
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>

    <!-- resultMap 정의 -->
    <resultMap id="reviewListResultMap" type="kr.co.matchday.review.ReviewDTO">
        <id property="reviewid" column="reviewid"/>
        <result property="userid" column="userid"/>
        <result property="matchid" column="matchid"/>
        <result property="goodsid" column="goodsid"/>
        <result property="reviewdate" column="reviewdate"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="grantedpoints" column="grantedpoints"/>
        <!-- goods 객체 매핑 -->
        <association property="goods" javaType="kr.co.matchday.goods.Goods">
            <result property="productname" column="productname"/>
            <result property="price" column="price"/>
            <result property="category" column="category"/>
        </association>
    </resultMap>

</mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 부트스트랩 CSS -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons CDN 추가 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/jquery-3.7.1.min.js"></script>
    <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            padding: 20px;
        }
        .board_write_popup {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .ly_tit {
            margin-bottom: 20px;
            text-align: center;
        }
        .ly_cont {
            margin-bottom: 20px;
        }
        .board_write_box {
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .board_write_table {
            width: 100%;
            margin-bottom: 0;
        }
        .board_write_table th {
            width: 15%;
            text-align: right;
            vertical-align: top;
        }
        .board_write_table td {
            width: 85%;
            padding-left: 10px;
        }
        .write_editor textarea {
            width: 100%;
            min-width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .btn_center_box {
            text-align: center;
        }
        .btn_ly_cancel, .btn_ly_write_ok {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            background-color: #007bff;
            border: 1px solid #007bff;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn_ly_cancel:hover, .btn_ly_write_ok:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
<div class="board_write_popup">
    <div class="ly_tit">
        <h4>상품 후기 쓰기</h4>
    </div>

    <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
        <label for="goodsid">상품 선택:</label>

        <select name="goodsid" id="goodsid">
            <c:forEach items="${goodsList}" var="goods">
                <!-- 특정 goodsid에 해당하는 상품명만 출력 -->
                <c:if test="${goods.goodsid eq 'goods5'}">
                    <option value="${goods.goodsid}">${goods.productname}</option>
                </c:if>
            </c:forEach>
        </select>
        <br/>
        <label for="title">제목:</label>
        <input type="text" name="title" id="title" placeholder="제목을 입력하세요"/>
        <br/>
        <label for="content">내용:</label>
        <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
        <br/>
        <input type="submit" value="리뷰 작성"/>
    </form>

    <div class="ly_cont">
        <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
            <input name="goodsid" id="goodsid" value="${goods.goodsid}">
            <div class="scroll_box">
                <div class="top_item_photo_info">
                    <div class="item_photo_box">
                        <img src="../images/서울 홈 유니폼(앞).jpg" width="300" alt="2024 스틸러스 원정 유니폼" title="2024 스틸러스 원정 유니폼" class="middle">
                    </div>
                    <br>

                    <c:forEach items="${goodsList}" var="goods">
                        <!-- 특정 goodsid에 해당하는 상품명만 출력 -->
                        <c:if test="${goods.goodsid eq 'goods5'}">
                            <div class="item_info_box">
                                <h5>${goods.productname}</h5>
                            </div>
                        </c:if>
                    </c:forEach>

                </div>
                <!-- //top_item_photo_info -->

                <div class="board_write_box">
                    <table class="board_write_table">
                        <colgroup>
                            <col style="width:15%">
                            <col style="width:85%">
                        </colgroup>
                        <tbody>
                        <tr>
                            <th scope="row">리뷰 ID</th>
                            <td>
                                <input type="text" name="reviewid" id="reviewid" class="form-control" placeholder="${goods.productname}리뷰 아이디 입력">
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">작성자</th>
                            <td>
                                <input type="text" name="userid" id="userid" value="${userID}" class="form-control" readonly>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">비밀번호</th>
                            <td>
                                <input type="password" name="writerPw" class="form-control" placeholder="비밀번호 입력">
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">제목</th>
                            <td>
                                <input type="text" name="title" id="title" class="form-control write_title" placeholder="제목 입력">
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">내용</th>
                            <td class="write_editor">
                                <div class="form_element">
                                    <input type="checkbox" name="isSecret" value="y" id="secret">
                                    <label for="secret" class="check_s">비밀글</label>
                                </div>
                                <textarea title="내용 입력" id="editor" class="form-control" name="content" id="content" rows="5" placeholder="내용을 입력하세요"></textarea>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">파일</th>
                            <td id="uploadBox">
                                <div class="file_upload_sec">
                                    <label for="attach"><input type="text" class="file_text form-control" readonly="readonly" placeholder="파일 첨부하기"></label>
                                    <div class="btn_upload_box">
                                        <button type="button" class="btn btn-outline-secondary btn_upload" title="찾아보기"><em>찾아보기</em></button>
                                        <input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
                                        <span class="btn_gray_list">
                                                    <button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
                                                </span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">평점</th>
                            <td>
                                <input type="
 
 
 
 
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 필요한 CSS 및 JavaScript 추가 -->
</head>
<body>
    <div class="item_info_box">
        <c:forEach items="${goodsList}" var="goods">
            <c:if test="${goods.goodsid eq param.goodsid}">
                <h5>${goods.productname}</h5>
            </c:if>
        </c:forEach>
    </div>
    <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
        <label for="goodsid">상품 선택:</label>
        <select name="goodsid" id="goodsid">
            <c:forEach items="${goodsList}" var="goods">
                <option value="${goods.goodsid}" <c:if test="${goods.goodsid eq param.goodsid}">selected</c:if>>${goods.productname}</option>
            </c:forEach>
        </select>
        <br/>
        <label for="title">제목:</label>
        <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
        <br/>
        <label for="content">내용:</label>
        <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
        <br/>
        <input type="submit" value="리뷰 작성"/>
    </form>
</body>
</html>

 
 
 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 필요한 CSS 및 JavaScript 추가 -->
</head>
<body>
    <div class="item_info_box">
        <c:forEach items="${goodsList}" var="goods">
            <c:if test="${goods.goodsid eq param.goodsid}">
                <h5>${goods.productname}</h5>
            </c:if>
        </c:forEach>
    </div>
    <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
        <input type="hidden" name="goodsid" value="${param.goodsid}" />
        <label for="title">제목:</label>
        <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
        <br/>
        <label for="content">내용:</label>
        <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
        <br/>
        <input type="submit" value="리뷰 작성"/>
    </form>
</body>
</html>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 부트스트랩 CSS -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons CDN 추가 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/jquery-3.7.1.min.js"></script>
    <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        /* 스타일 생략 */
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
    <div class="board_write_popup">
        <div class="ly_tit">
            <h4>상품 후기 쓰기</h4>
        </div>
        
        <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
            <input type="hidden" name="goodsid" value="${param.goodsid}" />
            <!-- 리뷰 아이디는 JavaScript로 자동 생성 -->
            <input type="hidden" name="reviewid" id="reviewid" value="" />
            <label for="title">제목:</label>
            <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
            <br/>
            <label for="content">내용:</label>
            <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
            <br/>
            <input type="submit" value="리뷰 작성"/>
        </form>

        <div class="ly_cont">
            <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
                <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
                <!-- 리뷰 아이디는 JavaScript로 자동 생성 -->
                <input type="hidden" name="reviewid" id="reviewid" value="" />

                <div class="scroll_box">
                    <div class="top_item_photo_info">
                        <div class="item_photo_box">
                            <img src="../images/서울 홈 유니폼(앞).jpg" width="300" alt="2024 스틸러스 원정 유니폼" title="2024 스틸러스 원정 유니폼" class="middle">
                        </div>
                        <br>
                        <c:forEach items="${goodsList}" var="goods">
                            <c:if test="${goods.goodsid eq param.goodsid}">
                                <h5>${goods.productname}</h5>
                            </c:if>
                        </c:forEach>    
                    </div>
                    <!-- //top_item_photo_info -->

                    <div class="board_write_box">
                        <table class="board_write_table">
                            <colgroup>
                                <col style="width:15%">
                                <col style="width:85%">
                            </colgroup>
                            <tbody>
                                <tr>
                                    <th scope="row">리뷰 ID</th>
                                    <td>
                                        <!-- 리뷰 아이디 입력란은 사용자에게 보이지 않게 설정 -->
                                        <input type="text" name="reviewid_visible" class="form-control" readonly>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">작성자</th>
                                    <td>
                                        <input type="text" name="userid" id="userid" value="${userID}" class="form-control" readonly>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">비밀번호</th>
                                    <td>
                                        <input type="password" name="writerPw" class="form-control" placeholder="비밀번호 입력">
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">제목</th>
                                    <td>
                                        <input type="text" name="title" id="title" class="form-control write_title" placeholder="제목 입력">
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">내용</th>
                                    <td class="write_editor">
                                        <div class="form_element">
                                            <input type="checkbox" name="isSecret" value="y" id="secret">
                                            <label for="secret" class="check_s">비밀글</label>
                                        </div>
                                        <textarea title="내용 입력" id="editor" class="form-control" name="content" id="content" rows="5" placeholder="내용을 입력하세요"></textarea>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">파일</th>
                                    <td id="uploadBox">
                                        <div class="file_upload_sec">
                                            <label for="attach"><input type="text" class="file_text form-control" readonly="readonly" placeholder="파일 첨부하기"></label>
                                            <div class="btn_upload_box">
                                                <button type="button" class="btn btn-outline-secondary btn_upload" title="찾아보기"><em>찾아보기</em></button>
                                                <input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
                                                <span class="btn_gray_list">
                                                    <button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
                                                </span>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">평점</th>
                                    <td>
                                        <input type="number" name="rating" id="rating" class="form-control" min="1" max="10" required>
                                        <small class="text-muted">1부터 10까지의 숫자로 입력해주세요.</small>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- //board_write_box -->
                </div>
                <!-- //scroll_box -->
                <div class="btn_center_box">
                    <a href="javascript:window.close()" class="btn btn-secondary btn_ly_cancel"><strong>취소</strong></a>
                    <a href="" class="btn btn-primary btn_ly_write_ok"><strong>등록</strong></a>
                    <input type="submit" value="등록" class="btn btn-success">
                </div>
            </form>
        </div>
        <!-- //ly_cont -->
    </div>
    <!-- //board_write_popup -->

    <script>
    // 페이지 로드 시 리뷰 아이디 생성 및 입력란에 자동 설정
    document.addEventListener('DOMContentLoaded', function() {
        var reviewId = generateReviewId(); // 리뷰 아이디 생성 함수 호출
        document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
    });

    // 랜덤한 리뷰 아이디 생성 함수
    function generateReviewId() {
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var length = 10;
        var result = '';
        for (var i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }
</script>














<script>
    // 페이지 로드 시 리뷰 아이디 생성 및 입력란에 자동 설정
    document.addEventListener('DOMContentLoaded', function() {
        var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
        document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
    });

    // 랜덤한 리뷰 아이디 생성 함수 (review로 시작하는 숫자)
    function generateUniqueReviewId() {
        var prefix = 'review';
        var num;
        var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

        // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
        existingIds.push('review001');
        existingIds.push('review6165');
        existingIds.push('review615');

        // 중복되지 않는 아이디 생성
        do {
            num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
            var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
        } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

        return newId;
    }

    // 랜덤 숫자 생성 함수 (1 이상 999 이하)
    function generateRandomNumber() {
        return Math.floor(Math.random() * 999) + 1;
    }
</script>









import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private SqlSession sqlSession;

    public void insert(ReviewDTO reviewDto) {
        sqlSession.insert("review.insert", reviewDto);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("review.selectReviewById", reviewid);
    }

    public List<ReviewDTO> getReviewList(String goodsid) {
        return sqlSession.selectList("review.getReviewList", goodsid);
    }

    public List<ReviewDTO> list() {
        return sqlSession.selectList("review.selectAll");
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <select id="getReviewList" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE goodsid = #{goodsid}
    </select>
    
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>
    
    <!-- 
    <update id="update" parameterType="kr.co.matchday.review.ReviewDTO">
        UPDATE review
        SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, reviewdate = #{reviewdate},
            title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}
        WHERE reviewid = #{reviewid}
    </update>
    
    <delete id="delete" parameterType="String">
        DELETE FROM review WHERE reviewid = #{reviewid}
    </delete>  
    -->
    
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>
</mapper>












<form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
    <input type="hidden" name="reviewid" id="reviewid" value="">
    <!-- 기타 입력 항목들 ... -->
    <input type="submit" value="등록" class="btn btn-success">
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
    document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
});

function generateUniqueReviewId() {
    var prefix = 'review';
    var num;
    var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

    // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    <c:forEach items="${reviewList}" var="review">
        existingIds.push('${review.reviewid}');
    </c:forEach>

    // 중복되지 않는 아이디 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    return newId;
}

function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1;
}
</script>

















@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session) {
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 리뷰 아이디 생성
    String reviewId = generateUniqueReviewId();
    reviewDto.setReviewid(reviewId);
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 등록
    reviewDao.insert(reviewDto);
    
    return "redirect:/review/list";
}



@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session) {
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 리뷰 아이디 생성
    String reviewId = generateUniqueReviewId();
    reviewDto.setReviewid(reviewId);
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 등록
    reviewDao.insert(reviewDto);
    
    return "redirect:/review/list";
}


@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session) {
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 등록
    reviewDao.insert(reviewDto);
    
    return "redirect:/review/list";
}




<form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
    <input type="hidden" name="reviewid" id="reviewid" value="">
    <!-- 기타 입력 항목들 ... -->
    <input type="submit" value="등록" class="btn btn-success">
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
    document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
});

function generateUniqueReviewId() {
    var prefix = 'review';
    var num;
    var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

    // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    <c:forEach items="${reviewList}" var="review">
        existingIds.push('${review.reviewid}');
    </c:forEach>

    // 중복되지 않는 아이디 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    return newId;
}

function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1;
}
</script>






<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>상품 후기 쓰기</title>
  <!-- 부트스트랩 CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons CDN 추가 -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/jquery-3.7.1.min.js"></script>
  <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            padding: 20px;
        }
        .board_write_popup {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .ly_tit {
            margin-bottom: 20px;
            text-align: center;
        }
        .ly_cont {
            margin-bottom: 20px;
        }
        
        /* 이미지 및 상품명 센터 정렬 */
	    .top_item_photo_info {
	        text-align: center;
	        margin-bottom: 20px;
	    }
	    
	    .item_photo_box {
	        display: inline-block;
	    }
	    
	    .item_photo_box img {
	        max-width: 100%;
	        height: auto;
	    }
	    
	    /* 상품명 스타일 */
	    .productname {
	        font-size: 24px; /* 원하는 크기로 조정 */
	        font-weight: bold; /* 굵게 설정 */
	        margin-top: 10px; /* 필요에 따라 조정 */
	        margin-bottom: 10px; /* 필요에 따라 조정 */
	    } 
    
        .board_write_box {
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .board_write_table {
            width: 100%;
            margin-bottom: 0;
        }
        .board_write_table th {
            width: 15%;
            text-align: right;
            vertical-align: top;
        }
        .board_write_table td {
            width: 85%;
            padding-left: 10px;
        }
        .write_editor textarea {
            width: 100%;
            min-width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .btn_center_box {
            text-align: center;
        }
        .btn_ly_cancel, .btn_ly_write_ok {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            background-color: #007bff;
            border: 1px solid #007bff;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn_ly_cancel:hover, .btn_ly_write_ok:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
    <div class="board_write_popup">
        <div class="ly_tit">
            <h2>상품 후기 쓰기</h2>
        </div>
        
        <div class="ly_cont">
            <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
                <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
                <input type="hidden" name="reviewid" id="reviewid" value="">
                <div class="scroll_box">
                    <div class="top_item_photo_info">
                        <div class="item_photo_box">
                            <img src="<c:url value='/images/${param.goodsid}.jpg' />" width="300" alt="${param.goodsid} 상품 이미지" title="${param.goodsid} 상품 이미지" class="middle">
                        </div>
                        <br>
                        <c:forEach items="${goodsList}" var="goods">
				            <c:if test="${goods.goodsid eq param.goodsid}">
				                <h5 class="productname">${goods.productname}</h5>
				            </c:if>
				        </c:forEach>    
                    </div>
                    <!-- //top_item_photo_info -->

                    <div class="board_write_box">
                        <table class="board_write_table">
                            <colgroup>
                                <col style="width:15%">
                                <col style="width:85%">
                            </colgroup>
                            <tbody>
                                <!-- 나머지 폼 요소들은 그대로 유지 -->
                            </tbody>
                        </table>
                    </div>
                    <!-- //board_write_box -->
                </div>
                <!-- //scroll_box -->
                <div class="btn_center_box">
                    <a href="javascript:window.close()" class="btn btn-secondary btn_ly_cancel"><strong>취소</strong></a>
                    <a href="" class="btn btn-primary btn_ly_write_ok"><strong>등록</strong></a>
                    <input type="submit" value="등록" class="btn btn-success">
                </div>
            </form>  
        </div>
        <!-- //ly_cont -->
    </div>
    <!-- //board_write_popup -->
</body>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
    document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
});

function generateUniqueReviewId() {
    var prefix = 'review';
    var num;
    var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

    // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    <c:forEach items="${reviewList}" var="review">
        existingIds.push('${review.reviewid}');
    </c:forEach>

    // 중복되지 않는 아이디 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    return newId;
}

function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1;
}
</script>
</html>



<script>
function handleRatingClick(rating) {
    var radios = document.getElementsByName('rating');
    for (var i = 0; i < radios.length; i++) {
        if (radios[i].value == rating) {
            radios[i].checked = true;
        } else {
            radios[i].checked = false;
        }
    }
}
</script>












document.addEventListener('DOMContentLoaded', function() {
    // 기본 상품순 토글 버튼 클릭 이벤트 리스너 추가
    document.getElementById('defaultSort').addEventListener('click', function(e) {
        e.preventDefault(); // 기본 이벤트 동작을 막습니다.
        showAllItems(); // 모든 상품을 기본 순서대로 보여줍니다.
        dropdownButton.textContent = '기본상품순'; // 드롭다운 버튼의 텍스트를 변경합니다.
    });

    // 기타 초기화 코드 등

});



