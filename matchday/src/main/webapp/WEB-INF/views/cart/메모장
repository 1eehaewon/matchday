package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.tickets.TicketsDTO;
import kr.co.matchday.tickets.TicketsDetailDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        // 세션에서 사용자 ID 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        // 상품 정보 가져오기
        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        // 사용자 쿠폰 목록 가져오기
        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        // 할인율 계산
        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        // 사용자 포인트 정보 가져오기
        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }


    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = Integer.parseInt(requestParams.getOrDefault("paid_amount", "0"));
        int finalpaymentamount = Integer.parseInt(requestParams.getOrDefault("finalpaymentamount", "0"));
        String recipientname = requestParams.get("recipientname");
        String recipientemail = requestParams.get("recipientemail");
        String recipientphone = requestParams.get("recipientphone");
        String shippingaddress = requestParams.get("shippingaddress");
        String shippingrequest = requestParams.get("shippingrequest");
        String paymentmethodcode = requestParams.get("paymentmethodcode");
        String couponid = requestParams.get("couponid");
        String goodsid = requestParams.get("goodsid");
        String userId = (String) session.getAttribute("userID");

        if (userId == null) {
            response.put("success", false);
            response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
            return response;
        }

        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
                "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    // 주문 ID 생성
                    String orderid = generateOrderId();

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setGoodsid(goodsid);
                    orderDto.setOrderdate(orderid);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid);
                    orderDto.setUsedpoints(Integer.parseInt(requestParams.getOrDefault("usedpoints", "0")));
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstartdate(new Timestamp(System.currentTimeMillis()));
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setPrice(Integer.parseInt(requestParams.getOrDefault("price", "0")));
                    orderDto.setQuantity(Integer.parseInt(requestParams.getOrDefault("quantity", "1")));
                    orderDto.setReceiptmethodcode("receiving02");

                    orderDao.insert(orderDto);

                    if (couponid != null && !couponid.equals("0")) {
                        orderDao.updateCouponUsage(couponid);
                    }

                    MypageDTO mypageDto = mypageDao.getUserById(userId);
                    if (mypageDto != null) {
                        int totalpoints = mypageDto.getTotalpoints();
                        if (totalpoints >= orderDto.getUsedpoints()) {
                            int remainingPoints = totalpoints - orderDto.getUsedpoints();
                            // 포인트 차감 로직 추가 필요시 작성
                        } else {
                            response.put("success", false);
                            response.put("message", "사용 가능한 포인트가 부족합니다.");
                            return response;
                        }
                    } else {
                        response.put("success", false);
                        response.put("message", "사용자 포인트 정보를 찾을 수 없습니다.");
                        return response;
                    }

                    response.put("success", true);
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 검증 중 오류 발생.");
                e.printStackTrace();
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 정보를 가져오지 못했습니다.");
        }

        return response;
    }

    private String generateOrderId() {
        String prefix = "order";
        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(date);

        int nextSuffix = 1;
        if (maxOrderId != null) {
            nextSuffix = Integer.parseInt(maxOrderId.substring(maxOrderId.length() - 6)) + 1;
        }

        return String.format("%s%s%06d", prefix, date, nextSuffix);
    }

    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    //Mypage 결제 내역
    @GetMapping("/orderList")
    public ModelAndView orderList(HttpSession session,Model model) {
        String userId = (String) session.getAttribute("userID");
        if (userId == null) {
            System.out.println("User ID not found in session.");
            return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
        }

        System.out.println("Fetching orders for userId: " + userId);
        List<OrderDTO> order = orderDao.getOrderByUserId(userId);

        // 주문 날짜를 Date 객체로 변환하고 취소 마감시간을 설정하는 로직
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SimpleDateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        
        for (OrderDTO orderDto : order) {
            Date orderDate = null;
            try {
            	// 주문 날짜를 Date 객체로 변환
                orderDate = formatter.parse(orderDto.getOrderdate());
            } catch (ParseException e) {
                e.printStackTrace();
            }
            // 취소 마감시간 설정 (임의로 3일 후로 설정)
            Calendar cal = Calendar.getInstance();
            if (orderDate != null) {
                cal.setTime(orderDate);
                cal.add(Calendar.DATE, 3);
                orderDto.setCancelDeadline(cal.getTime());
            }
        }

        ModelAndView mav = new ModelAndView("order/orderList");
        mav.addObject("order", order);
        
        List<GoodsDTO> goodsList = goodsDao.list();
     
        model.addAttribute("goodsList", goodsList);

        
        return mav;
    }
    
    //결제 상세 정보
    @GetMapping("/orderDetail")
    public ModelAndView reservationDetail(@RequestParam("orderid") String orderid, HttpSession session) {
        ModelAndView mav = new ModelAndView("order/orderDetail");

        // 주문 정보 조회
        OrderDTO order = orderDao.getOrderById(orderid);
        if (order == null) {
            mav.setViewName("errorPage");
            mav.addObject("message", "주문을 찾을 수 없습니다. ID: " + orderid);
            return mav;
        }

        // 티켓 상세 정보 조회
        //List<TicketsDetailDTO> details = ticketsService.getTicketDetailsByReservationId(reservationid);
        //reservation.setDetails(details);

        // 주문 날짜를 Date 객체로 변환하고 취소 마감시간을 설정하는 로직
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date orderDate = null;
        try {
            // 주문 날짜를 Date 객체로 변환
            orderDate = formatter.parse(order.getOrderdate());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        
        // 취소 마감시간 설정 (임의로 3일 후로 설정)
        Calendar cal = Calendar.getInstance();
        if (orderDate != null) {
            cal.setTime(orderDate);
            cal.add(Calendar.DATE, 3);
            order.setCancelDeadline(cal.getTime());
        }
        
        // 결제 내역 설정
        int serviceFee = session.getAttribute("serviceFee") != null ? Integer.parseInt(session.getAttribute("serviceFee").toString()) : 0;
        int deliveryFee = session.getAttribute("deliveryFee") != null ? Integer.parseInt(session.getAttribute("deliveryFee").toString()) : 0;
        int totalDiscount = session.getAttribute("totalDiscount") != null ? Integer.parseInt(session.getAttribute("totalDiscount").toString()) : 0;
        int totalPrice = order.getPrice() * order.getQuantity();
        int finalpaymentamount = session.getAttribute("finalpaymentamount") != null ? Integer.parseInt(session.getAttribute("totalPaymentAmount").toString()) : 0;
        String couponName = session.getAttribute("couponName") != null ? session.getAttribute("couponName").toString() : "";
        //포인트
        
        mav.addObject("serviceFee", serviceFee);
        mav.addObject("deliveryFee", deliveryFee);
        mav.addObject("couponName", couponName);
        //포인트
        mav.addObject("totalDiscount", totalDiscount);
        mav.addObject("totalPrice", totalPrice);
        mav.addObject("finalpaymentamount", finalpaymentamount);
        mav.addObject("order", order);

        return mav;
    }
    
}


































package kr.co.matchday.order;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.tickets.TicketsDTO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Repository
public class OrderDAO {

    @Autowired
    private SqlSession sqlSession;

    // 주문 삽입 메소드
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insert", orderDto);
    }

    // 사용자의 주문 목록 가져오는 메소드
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.listByUser", userid);
    }

    // 사용자의 정보 가져오는 메소드
    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getUserInfo", userID);
    }

    // 사용자 ID로 쿠폰 목록 가져오는 메소드 (적용 구분이 Goods인 쿠폰만)
    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "Goods");
        params.put("usage", "Not Used"); // usage 값도 추가
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getCouponsByUserId", params);
    }

    // 쿠폰 ID로 할인율 가져오는 메소드
    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getDiscountRateByCouponId", couponid);
    }

    // 쿠폰 사용 업데이트 메소드
    public int updateCouponUsage(String couponid) {
        return sqlSession.update("kr.co.matchday.order.OrderDAO.updateCouponUsage", couponid);
    }

    // 주어진 날짜에 대한 최대 주문 ID 가져오는 메소드
    public String getMaxOrderId(String date) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getMaxOrderId", date);
    }
    /*
    //사용자 ID로 주문 정보 가져오기
    public List<Map<String, Object>> getOrderByUserId(String userid) {
        List<Map<String, Object>> order = sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderByUserId", userid);
        if (order == null || order.isEmpty()) {
            System.out.println("No order found for userId: " + userid);
        } else {
            System.out.println("order found: " + order.size());
        }
        return order;
    }
*/
 // OrderDAO.java
    public List<OrderDTO> getOrderByUserId(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderByUserId", userid);
    }

    //주문 ID로 주문 정보 가져오기
    public OrderDTO getOrderById(String orderid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getOrderById", orderid);
    }
    
    
    
    
}

































package kr.co.matchday.order;

import java.sql.Timestamp;
import java.util.Date;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@NoArgsConstructor
@Getter
@Setter
@ToString

public class OrderDTO {

	private String orderid; // 주문 ID
    private String userid; // 사용자 ID
    private String goodsid; //굿즈 ID
    private String orderdate; // 주문 날짜
    /*private Timestamp orderdate; // 주문 날짜*/
    private String orderstatus; // 주문 상태 ('Pending', 'Completed')
    private String couponid; // 쿠폰 ID
    private int usedpoints; // 사용한 포인트
    private int finalpaymentamount; // 최종 결제 금액
    private Timestamp shippingstartdate; // 배송 시작 날짜
    private Timestamp shippingenddate; // 배송 종료 날짜
    /*private Timestamp shippingstartdate; // 배송 시작 날짜
    private Timestamp shippingenddate; // 배송 종료 날짜*/
    private String shippingstatus; // 배송 상태 ('Pending', 'Completed')
    private String recipientname; // 수령인 이름
    private String recipientemail; // 수령인 이메일
    private String recipientphone; // 수령인 전화번호
    private String shippingaddress; // 배송 주소
    private String shippingrequest; // 배송 요청사항
    private String paymentmethodcode; // 결제 방법 코드
    private int price; // 가격
    private int quantity; // 수량
    private String receiptmethodcode; // 수령 방법 코드
    private Date cancelDeadline; // 취소 마감시간
    
}//class end


































<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.order.OrderDAO">

    <!-- 주어진 날짜에 대한 최대 주문 ID 가져오기 -->
    <select id="getMaxOrderId" resultType="String" parameterType="String">
        SELECT MAX(orderid)
        FROM `order`
        WHERE orderid LIKE CONCAT('order', #{date}, '%')
    </select>

    <!-- 주문 정보 삽입 -->
    <insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
        INSERT INTO `order` (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, shippingstartdate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress, shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode, cancelDeadline)
        VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, #{shippingstartdate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress}, #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode}, #{cancelDeadline})
    </insert>

    <!-- 사용자 ID로 주문 목록 가져오기 -->
    <select id="listByUser" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE userid = #{userid}
    </select>

    <!-- 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="Map">
        SELECT * FROM users WHERE userid = #{userid}
    </select>

    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, c.coupontypeid, c.userid, c.usage,
               cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userid}
          AND cm.applicableproduct = #{applicableProduct}
          AND c.usage = #{usage}
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" resultType="int" parameterType="String">
        SELECT discountrate
        FROM couponmaster
        WHERE coupontypeid = (SELECT coupontypeid FROM coupon WHERE couponid = #{couponid})
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponid}
    </update>
    
    <!-- 사용자 ID로 주문 목록 조회 (주문일 기준 내림차순 정렬) -->
    <select id="getOrderByUserId" parameterType="string" resultType="kr.co.matchday.order.OrderDTO">
	    SELECT o.*, g.*
        FROM `order` o
        JOIN goods g ON o.goodsid = g.goodsid
        WHERE o.userid = #{userid}
        ORDER BY o.orderdate DESC
	</select>
	
	<!-- 주문 ID로 주문 정보 조회 -->
    <select id="getOrderById" parameterType="string" resultType="kr.co.matchday.order.OrderDTO">
        SELECT o.*, p.paymentmethodname, u.name as userName
        FROM `order` o
        JOIN users u ON o.userid = u.userid
        JOIN paymentmethods p ON o.paymentmethodcode = p.paymentmethodcode
        WHERE o.orderid = #{orderid}
    </select>
    
    
	
</mapper>











































<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="../header.jsp" %>
<style>
    .mypage-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        padding: 30px 10px;
    }
    .mypage-sidebar {
        width: 200px; /* 사이드바 너비 */
        padding: 20px;
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 20px;
    }
    .mypage-form {
        flex: 1;
        padding: 30px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }
    .mypage-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        color: #333;
    }
    .table-container {
        margin-top: 20px;
    }
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }
    .table th, .table td {
        border: 1px solid #ccc;
        padding: 12px; /* 셀 안의 여백 */
        text-align: center;
        vertical-align: middle;
    }
    .table th {
    	font-size: 16px;
        background-color: #f0f0f0;
        font-weight: bold;
    }
    .table td {
		font-size: 19px; /* 글자 크기 증가 */
    }
    .badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .badge-success {
        background-color: #28a745;
        color: #fff;
    }
    .badge-danger {
        background-color: #dc3545;
        color: #fff;
    }
</style>
<div class="mypage-container">
    <!-- 사이드바 -->
    <div class="mypage-sidebar">
        <ul class="list-group">
            <li class="list-group-item"><a href="/member/mypage">회원 정보</a></li>
            <li class="list-group-item"><a href="/member/mypage/point">포인트 내역</a></li>
            <li class="list-group-item"><a href="/member/mypage/coupon">쿠폰함</a></li>
            <li class="list-group-item"><a href="/cart/list">장바구니</a></li>
            <li class="list-group-item"><a href="/tickets/reservationList">나의 예매내역</a></li>
            <li class="list-group-item active"><a href="/order/orderList">나의 주문내역</a></li>
            <li class="list-group-item"><a href="/membershipticket/membershippaymentlist">멤버쉽 구매내역</a></li>
        </ul>
    </div>
    <!-- 주문내역 내용 -->
    <div class="mypage-form">
        <h2 class="mypage-title">나의 주문내역</h2>
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>주문일</th>
                        <th>주문번호</th>
                        <th>굿즈ID</th>
                        <th>구매한 상품</th>
                        <th>사이즈</th>
                        <th>수량</th>
                        <th>결제 금액</th>
                        <th>취소가능일</th>
                        <th>현재상태</th>
                    </tr>
                </thead>
                <tbody>
	                <c:forEach items="${order}" var="order">
	                	<tr>
	                		<td>${order.orderdate}</td>
	                		<td><a href="/order/orderDetail?orderid=${order.orderid}" class="link-primary">${order.orderid}</a></td>
	                		<td>${order.goodsid}</td>
	                		<td>
	               			<c:forEach items="${goodsList}" var="goods">
	                            <c:if test="${order.goodsid eq goods.goodsid}">
	                              <c:if test="${not empty goods.filename}">
	                              	<a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
	                              	<img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
	                              	</a>
	                              </c:if>
	                             <br>
	                            	<span>${goods.productname}</span>
	                            </c:if>
                            </c:forEach>
	                		</td>
	                		<td></td>
	                		<td>${order.quantity}개</td>
	                		<td><fmt:formatNumber value="${order.finalpaymentamount}" pattern="#,###원"/></td>
	                		<td><fmt:formatDate value="${order.cancelDeadline}" pattern="yyyy-MM-dd HH:mm:ss"/></td>
	                		<td>
	                			<span class="badge ${order.orderstatus == 'Pending' ? 'badge-success' : 'badge-danger'}">${order.orderstatus == 'Completed' ? '결제완료' : '결제취소'}</span>
	                		</td>
	                	</tr>
	                </c:forEach>
                </tbody>
            </table>
        </div>
    </div>
</div>
<%@ include file="../footer.jsp" %>







