<script>
    // 초기 로드 시 총 상품 금액 계산
    document.addEventListener('DOMContentLoaded', function() {
        updateTotalPrice();
    });

    // 총 가격 업데이트 함수
    function updateTotalPrice() {
        var quantity = parseInt(document.getElementById('quantity-input').value);
        var price = ${goodsDto.price};
        var totalPrice = quantity * price;
        var deliveryfee = 3000; // 기본 배송비 3000원

        // 100,000원 이상 구매 시 무료
        if (totalPrice >= 100000) {
            deliveryfee = 0;
        }

        // 업데이트된 값들을 화면에 표시합니다
        document.getElementById('order-quantity').innerText = quantity + '개';
        document.getElementById('deliveryfee').innerText = deliveryfee.toLocaleString() + '원';
        document.getElementById('total-price').innerText = totalPrice.toLocaleString() + '원';

        // 숨겨진 입력 필드를 업데이트합니다
        document.getElementById('form-quantity').value = quantity;
        document.getElementById('form-unitprice').value = price;
        document.getElementById('form-deliveryfee').value = deliveryfee;        
        document.getElementById('form-totalprice').value = totalPrice;
    }

    function updateQuantity(change) {
        var input = document.getElementById('quantity-input');
        var currentValue = parseInt(input.value);
        var newValue = currentValue + change;

        if (newValue < 1) {
            newValue = 1; // 최소 수량은 1로 설정
        }

        input.value = newValue;
        updateTotalPrice(); // 총 가격 업데이트
    }
</script>





















package kr.co.matchday.mypage;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MypageDAO {

    @Autowired
    private SqlSession sqlSession;

    public MypageDTO getUserById(String userId) {
        return sqlSession.selectOne("kr.co.matchday.mypage.MypageDAO.getUserById", userId);
    }

    public void updateUserPoints(String userId, int points) {
        MypageDTO mypageDTO = new MypageDTO();
        mypageDTO.setUserid(userId);
        mypageDTO.setTotalpoints(points);
        sqlSession.update("kr.co.matchday.mypage.MypageDAO.updateUserPoints", mypageDTO);
    }
}




















package kr.co.matchday.order;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.tickets.TicketsDetailDTO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Repository
public class OrderDAO {

    @Autowired
    private SqlSession sqlSession;

    @Autowired
    private MypageDAO mypageDao;  // 추가된 부분

    public void insert(OrderDTO orderDto) {
        System.out.println("Preparing to insert order: " + orderDto.toString());
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insert", orderDto);
        System.out.println("Order inserted in database.");

        // 주문 상세 정보 삽입 
        for (OrderdetailDTO orderDetail : orderDto.getOrderDetails()) {
            orderDetail.setOrderid(orderDto.getOrderid());
            insertOrderDetail(orderDetail);
        }

        // 포인트 차감 로직 추가
        if (orderDto.getUsedpoints() > 0) {
            MypageDTO user = mypageDao.getUserById(orderDto.getUserid());
            int updatedPoints = user.getTotalpoints() - orderDto.getUsedpoints();
            mypageDao.updateUserPoints(orderDto.getUserid(), updatedPoints);
        }
    }

    public void insertOrderDetail(OrderdetailDTO orderDetailDto) {
        System.out.println("Preparing to insert order detail: " + orderDetailDto.toString());
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insertOrderDetail", orderDetailDto);
        System.out.println("Order detail inserted in database.");
    }

    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.listByUser", userid);
    }

    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getUserInfo", userID);
    }

    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "Goods");
        params.put("usage", "Not Used");
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getCouponsByUserId", params);
    }

    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getDiscountRateByCouponId", couponid);
    }

    public int updateCouponUsage(String couponid) {
        return sqlSession.update("kr.co.matchday.order.OrderDAO.updateCouponUsage", couponid);
    }

    public String getMaxOrderId(String date) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getMaxOrderId", date);
    }

    public List<OrderDTO> getOrderByUserId(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderByUserId", userid);
    }

    public OrderDTO getOrderById(String orderid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getOrderById", orderid);
    }

    public List<OrderdetailDTO> getOrderDetailByOrderId(String orderid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderDetailByOrderId", orderid);
    }
}




















package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;
    
    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();
        
        System.out.println("HERE !! ");
        System.out.println(requestParams);
        System.out.println(requestParams.get("goodsid"));
        
        
        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientphone = requestParams.get("recipientphone");
        String recipientpostcode = requestParams.get("recipientpostcode");
        String recipientaddress1 = requestParams.get("recipientaddress1");
        String recipientaddress2 = requestParams.get("recipientaddress2");
        String deliverymessage = requestParams.get("deliverymessage");
        String paymentmethod = requestParams.get("paymentmethod");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);
        String couponid = requestParams.get("couponid");
        String goodsid = requestParams.get("goodsid");
        int quantity = parseInteger(requestParams.get("quantity"), 0);
        String size = requestParams.get("size");
        int deliveryfee = parseInteger(requestParams.get("deliveryfee"), 0);
        
        System.out.println("usedpoints = " + usedpoints);
        
        if (imp_uid == null || merchant_uid == null || paid_amount <= 0) {
            response.put("status", "error");
            response.put("message", "잘못된 요청입니다.");
            return response;
        }

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            response.put("status", "error");
            response.put("message", "로그인이 필요합니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));

        JSONObject json = new JSONObject();
        json.put("imp_key", env.getProperty("iamport.key"));
        json.put("imp_secret", env.getProperty("iamport.secret"));

        HttpEntity<String> entity = new HttpEntity<>(json.toString(), headers);
        ResponseEntity<Map> tokenResponse = restTemplate.exchange(
            "https://api.iamport.kr/users/getToken", HttpMethod.POST, entity, Map.class);

        if (tokenResponse.getStatusCode() == HttpStatus.OK) {
            Map<String, Object> tokenResponseBody = tokenResponse.getBody();
            if (tokenResponseBody != null && (boolean) tokenResponseBody.get("response") != null) {
                Map<String, Object> tokenData = (Map<String, Object>) tokenResponseBody.get("response");
                String accessToken = (String) tokenData.get("access_token");

                headers.set("Authorization", accessToken);
                HttpEntity<String> paymentEntity = new HttpEntity<>(headers);

                ResponseEntity<Map> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, paymentEntity, Map.class);

                if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                    Map<String, Object> paymentResponseBody = paymentResponse.getBody();
                    if (paymentResponseBody != null && (boolean) paymentResponseBody.get("response") != null) {
                        Map<String, Object> paymentData = (Map<String, Object>) paymentResponseBody.get("response");
                        int amount = (int) paymentData.get("amount");

                        if (amount == paid_amount) {
                            String orderId = generateOrderId();
                            OrderDTO orderDto = new OrderDTO();
                            orderDto.setOrderid(orderId);
                            orderDto.setUserid(userid);
                            orderDto.setOrderdate(new Timestamp(System.currentTimeMillis()));
                            orderDto.setTotalprice(paid_amount);
                            orderDto.setRecipientname(recipientname);
                            orderDto.setRecipientphone(recipientphone);
                            orderDto.setRecipientpostcode(recipientpostcode);
                            orderDto.setRecipientaddress1(recipientaddress1);
                            orderDto.setRecipientaddress2(recipientaddress2);
                            orderDto.setDeliverymessage(deliverymessage);
                            orderDto.setPaymentmethod(paymentmethod);
                            orderDto.setUsedpoints(usedpoints);
                            orderDto.setDeliveryfee(deliveryfee);
                            orderDto.setFinalpaymentamount(finalpaymentamount);

                            OrderdetailDTO orderDetailDto = new OrderdetailDTO();
                            orderDetailDto.setOrderid(orderId);
                            orderDetailDto.setGoodsid(goodsid);
                            orderDetailDto.setQuantity(quantity);
                            orderDetailDto.setSize(size);

                            orderDto.setOrderDetails(Arrays.asList(orderDetailDto));
                            orderDao.insert(orderDto);

                            // 쿠폰 사용 업데이트
                            if (couponid != null && !couponid.isEmpty()) {
                                orderDao.updateCouponUsage(couponid);
                            }

                            response.put("status", "success");
                            response.put("order_id", orderId);
                            return response;
                        }
                    }
                }
            }
        }

        response.put("status", "error");
        response.put("message", "결제 검증에 실패했습니다.");
        return response;
    }

    private String generateOrderId() {
        String prefix = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(prefix);

        if (maxOrderId == null) {
            return prefix + "0001";
        } else {
            int nextOrderId = Integer.parseInt(maxOrderId.substring(8)) + 1;
            return prefix + String.format("%04d", nextOrderId);
        }
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    @GetMapping("/orderList")
    public ModelAndView orderList(HttpSession session) {
        ModelAndView mav = new ModelAndView("order/orderList");
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            mav.setViewName("redirect:/member/login");
            return mav;
        }

        List<OrderDTO> orderList = orderDao.list(userid);
        mav.addObject("orderList", orderList);
        return mav;
    }
}

























<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="../header.jsp" %>
<style>
    .mypage-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        padding: 30px 10px;
    }
    .mypage-sidebar {
        width: 200px; /* 사이드바 너비 */
        padding: 20px;
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 20px;
    }
    .mypage-form {
        flex: 1;
        padding: 30px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }
    .mypage-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        color: #333;
    }
    .table-container {
        margin-top: 20px;
    }
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }
    .table th, .table td {
        border: 1px solid #ccc;
        padding: 12px; /* 셀 안의 여백 */
        text-align: center;
        vertical-align: middle;
    }
    .table th {
        font-size: 16px;
        background-color: #f0f0f0;
        font-weight: bold;
    }
    .table td {
        font-size: 19px; /* 글자 크기 증가 */
    }
    .badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .badge-success {
        background-color: #28a745;
        color: #fff;
    }
    .badge-danger {
        background-color: #dc3545;
        color: #fff;
    }
</style>
<div class="mypage-container">
    <!-- 사이드바 -->
    <div class="mypage-sidebar">
        <ul class="list-group">
            <li class="list-group-item"><a href="/member/mypage">회원 정보</a></li>
            <li class="list-group-item"><a href="/member/mypage/point">포인트 내역</a></li>
            <li class="list-group-item"><a href="/member/mypage/coupon">쿠폰함</a></li>
            <li class="list-group-item"><a href="/cart/list">장바구니</a></li>
            <li class="list-group-item"><a href="/tickets/reservationList">나의 예매내역</a></li>
            <li class="list-group-item active"><a href="/order/orderList">나의 주문내역</a></li>
            <li class="list-group-item"><a href="/membershipticket/membershippaymentlist">멤버쉽 구매내역</a></li>
        </ul>
    </div>
    <!-- 주문내역 내용 -->
    <div class="mypage-form">
        <h2 class="mypage-title">나의 주문내역</h2>
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>주문일</th>
                        <th>주문번호</th>
                        <th>굿즈ID</th>
                        <th>구매한 상품</th>
                        <th>사이즈</th>
                        <th>수량</th>
                        <th>결제 금액</th>
                        <th>취소가능일</th>
                        <th>현재상태</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${order}" var="order">
                        <c:forEach items="${order.orderDetails}" var="orderDetail">
                            <tr>
                                <td>${order.orderdate}</td>
                                <td><a href="/order/orderDetail?orderid=${order.orderid}" class="link-primary">${order.orderid}</a></td>
                                <td>${orderDetail.goodsid}</td>
                                <td>
                                    <c:forEach items="${goodsList}" var="goods">
                                        <c:if test="${orderDetail.goodsid eq goods.goodsid}">
                                            <c:if test="${not empty goods.filename}">
                                                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                                                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                                </a>
                                            </c:if>
                                            <br>
                                            <span>${goods.productname}</span>
                                        </c:if>
                                    </c:forEach>
                                </td>
                                <td>${orderDetail.size}</td>
                                <td>${orderDetail.quantity}개</td>
                                <td><fmt:formatNumber value="${orderDetail.price * orderDetail.quantity}" pattern="#,###원"/></td>
                                <td><fmt:formatDate value="${order.cancelDeadline}" pattern="yyyy-MM-dd HH:mm:ss"/></td>
                                <td>
                                    <span class="badge ${order.orderstatus == 'Completed' ? 'badge-success' : 'badge-danger'}">
                                        ${order.orderstatus == 'Pending' ? '결제완료' : '결제취소'}
                                    </span>
                                </td>
                            </tr>
                        </c:forEach>
                    </c:forEach>
                </tbody>
            </table>
        </div>
    </div>
</div>
<%@ include file="../footer.jsp" %>




<!-- 사용자 ID로 주문 목록 조회 (주문일 기준 내림차순 정렬) -->
<select id="getOrderByUserId" parameterType="string" resultMap="orderResultMap">
    SELECT o.*, od.*, g.*
    FROM `order` o
    JOIN orderdetail od ON o.orderid = od.orderid
    JOIN goods g ON od.goodsid = g.goodsid
    WHERE o.userid = #{userid}
    ORDER BY o.orderdate DESC
</select>

<resultMap id="orderResultMap" type="kr.co.matchday.order.OrderDTO">
    <id property="orderid" column="orderid"/>
    <!-- 나머지 OrderDTO 속성 매핑 -->
    <collection property="orderDetails" ofType="kr.co.matchday.order.OrderdetailDTO">
        <id property="orderid" column="orderid"/>
        <result property="goodsid" column="goodsid"/>
        <result property="size" column="size"/>
        <!-- 나머지 OrderdetailDTO 속성 매핑 -->
    </collection>
</resultMap>




@GetMapping("/orderList")
public ModelAndView orderList(@RequestParam(value = "orderid", required = false) String orderid, HttpSession session, Model model) {
    String userId = (String) session.getAttribute("userID");
    if (userId == null) {
        return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
    }

    List<OrderDTO> orderList = orderDao.getOrderByUserId(userId);

    // 주문 날짜를 Date 객체로 변환하고 취소 마감시간을 설정하는 로직
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    for (OrderDTO orderDto : orderList) {
        Date orderDate = null;
        try {
            // 주문 날짜를 Date 객체로 변환
            orderDate = formatter.parse(orderDto.getOrderdate());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        // 취소 마감시간 설정 (임의로 3일 후로 설정)
        Calendar cal = Calendar.getInstance();
        if (orderDate != null) {
            cal.setTime(orderDate);
            cal.add(Calendar.DATE, 3);
            orderDto.setCancelDeadline(cal.getTime());
        }
    }

    ModelAndView mav = new ModelAndView("order/orderList");
    mav.addObject("orderList", orderList); // orderList를 모델에 추가

    // orderid가 제공된 경우에만 주문 상세 정보를 조회
    if (orderid != null && !orderid.isEmpty()) {
        List<OrderdetailDTO> orderDetailList = orderDao.getOrderDetailByOrderId(orderid);
        model.addAttribute("orderDetailList", orderDetailList);
    }

    return mav;
}
@GetMapping("/orderList")
public ModelAndView orderList(@RequestParam(value = "orderid", required = false) String orderid, HttpSession session) {
    String userId = (String) session.getAttribute("userID");
    if (userId == null) {
        return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
    }

    List<OrderDTO> orderList = orderDao.getOrderByUserId(userId);
    List<OrderdetailDTO> orderDetailList = new ArrayList<>();

    // 모든 주문에 대한 상세 정보를 조회
    if (orderid != null && !orderid.isEmpty()) {
        orderDetailList = orderDao.getOrderDetailByOrderId(orderid);
    } else {
        // 전체 주문에 대한 상세 정보를 조회
        for (OrderDTO order : orderList) {
            List<OrderdetailDTO> details = orderDao.getOrderDetailByOrderId(order.getOrderid());
            order.setOrderDetails(details);
        }
    }

    ModelAndView mav = new ModelAndView("order/orderList");
    mav.addObject("orderList", orderList);
    mav.addObject("orderDetailList", orderDetailList); // 상세 정보를 추가
    return mav;
}
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<%@ include file="../header.jsp" %>
<style>
    .mypage-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        padding: 30px 10px;
    }
    .mypage-sidebar {
        width: 200px;
        padding: 20px;
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 20px;
    }
    .mypage-form {
        flex: 1;
        padding: 30px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }
    .mypage-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        color: #333;
    }
    .table-container {
        margin-top: 20px;
    }
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }
    .table th, .table td {
        border: 1px solid #ccc;
        padding: 12px;
        text-align: center;
        vertical-align: middle;
    }
    .table th {
        font-size: 16px;
        background-color: #f0f0f0;
        font-weight: bold;
    }
    .table td {
        font-size: 19px;
    }
    .badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .badge-success {
        background-color: #28a745;
        color: #fff;
    }
    .badge-danger {
        background-color: #dc3545;
        color: #fff;
    }
</style>
<div class="mypage-container">
    <!-- 사이드바 -->
    <div class="mypage-sidebar">
        <ul class="list-group">
            <li class="list-group-item"><a href="/member/mypage">회원 정보</a></li>
            <li class="list-group-item"><a href="/member/mypage/point">포인트 내역</a></li>
            <li class="list-group-item"><a href="/member/mypage/coupon">쿠폰함</a></li>
            <li class="list-group-item"><a href="/cart/list">장바구니</a></li>
            <li class="list-group-item"><a href="/tickets/reservationList">나의 예매내역</a></li>
            <li class="list-group-item active"><a href="/order/orderList">나의 주문내역</a></li>
            <li class="list-group-item"><a href="/membershipticket/membershippaymentlist">멤버쉽 구매내역</a></li>
        </ul>
    </div>
    <!-- 주문내역 내용 -->
    <div class="mypage-form">
        <h2 class="mypage-title">나의 주문내역</h2>
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>주문일</th>
                        <th>주문번호</th>
                        <th>굿즈ID</th>
                        <th>구매한 상품</th>
                        <th>사이즈</th>
                        <th>수량</th>
                        <th>결제 금액</th>
                        <th>취소가능일</th>
                        <th>현재상태</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${orderList}" var="order">
                        <c:forEach items="${order.orderDetails}" var="orderDetail">
                            <tr>
                                <td><fmt:formatDate value="${order.orderdate}" pattern="yyyy-MM-dd"/></td>
                                <td><a href="/order/orderDetail?orderid=${order.orderid}" class="link-primary">${order.orderid}</a></td>
                                <td>${orderDetail.goodsid}</td>
                                <td>
                                    <c:forEach items="${goodsList}" var="goods">
                                        <c:if test="${orderDetail.goodsid eq goods.goodsid}">
                                            <c:if test="${not empty goods.filename}">
                                                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                                                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                                </a>
                                            </c:if>
                                            <br>
                                            <span>${goods.productname}</span>
                                        </c:if>
                                    </c:forEach>
                                </td>
                                <td>${orderDetail.size}</td>
                                <td>${orderDetail.quantity}개</td>
                                <td><fmt:formatNumber value="${orderDetail.totalamount}" pattern="#,###원"/></td>
                                <td><fmt:formatDate value="${orderDetail.canceldate}" pattern="yyyy-MM-dd"/></td>
                                <td>
                                    <span class="badge ${orderDetail.iscanceled ? 'badge-danger' : 'badge-success'}">
                                        ${orderDetail.iscanceled ? '취소' : '정상'}
                                    </span>
                                </td>
                            </tr>
                        </c:forEach>
                    </c:forEach>
                </tbody>
            </table>
        </div>
    </div>
</div>
<%@ include file="../footer.jsp" %>






package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;
    
    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientemail = requestParams.get("recipientemail");
        String recipientphone = requestParams.get("recipientphone");
        String shippingaddress = requestParams.get("shippingaddress");
        String shippingrequest = requestParams.get("shippingrequest");
        String paymentmethodcode = requestParams.get("paymentmethodcode");
        String couponid = requestParams.get("couponid");
        int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
        int discountprice = parseInteger(requestParams.get("discountprice"), 0);
        String userId = (String) session.getAttribute("userID");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

        List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
        List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
        List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
        List<String> prices = Arrays.asList(requestParams.get("price").split(","));
        List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

        String allcartid = requestParams.get("cartid");
        List<String> cartidList = new ArrayList<>();
        if (allcartid != null && !allcartid.isEmpty()) {
            cartidList = Arrays.asList(allcartid.split(","));
        }

        if (userId == null) {
            response.put("success", false);
            response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
            return response;
        }

        if (goodsidList.isEmpty()) {
            response.put("success", false);
            response.put("message", "상품 ID가 유효하지 않습니다.");
            return response;
        }

        if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
            response.put("success", false);
            response.put("message", "결제 방법 코드가 유효하지 않습니다.");
            return response;
        }

        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
                "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        String redirectUrl = "/order/orderDetail?orderid=";
        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setOrderdate(currentDate);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid != null && !couponid.isEmpty() && !couponid.equals("null") ? couponid : null);
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();
                    int orderQuantity = 0;
                    int orderPrice = 0;

                    for (int i = 0; i < goodsidList.size(); i++) {
                        int quantity = parseInteger(quantities.get(i), 1);
                        int price = parseInteger(prices.get(i), 0);

                        orderQuantity += quantity;
                        orderPrice += (price * quantity);

                        OrderdetailDTO orderDetail = new OrderdetailDTO();
                        orderDetail.setGoodsid(goodsidList.get(i));
                        orderDetail.setSize(sizes.get(i));
                        orderDetail.setQuantity(quantity);
                        orderDetail.setPrice(price);
                        orderDetail.setTotalamount(price * quantity);
                        orderDetails.add(orderDetail);

                        // Update stock
                        goodsDao.updateStock(goodsidList.get(i), sizes.get(i), quantity);
                    }

                    orderDto.setOrderquantity(orderQuantity);
                    orderDto.setOrderprice(orderPrice);

                    orderDao.insertOrder(orderDto);
                    orderDao.insertOrderDetails(orderDetails);

                    if (cartidList.size() > 0) {
                        cartDao.deleteCarts(cartidList);
                    }

                    response.put("success", true);
                    response.put("message", "결제 완료되었습니다.");
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 확인 중 오류가 발생했습니다.");
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 확인 요청이 실패했습니다.");
        }

        response.put("redirectUrl", redirectUrl);
        return response;
    }

    @GetMapping("/orderDetail")
    public String orderDetail(@RequestParam("orderid") String orderid, Model model) {
        OrderDTO order = orderDao.getOrderById(orderid);
        if (order == null) {
            model.addAttribute("error", "주문 정보를 찾을 수 없습니다.");
            return "error";
        }

        List<OrderdetailDTO> orderDetails = orderDao.getOrderDetailsByOrderId(orderid);
        model.addAttribute("order", order);
        model.addAttribute("orderDetails", orderDetails);

        return "order/orderDetail";
    }

    private String getToken() {
        try {
            String authUrl = "https://api.iamport.kr/users/getToken";
            String authBody = "{\"imp_key\":\"" + env.getProperty("imp_key") + "\",\"imp_secret\":\"" + env.getProperty("imp_secret") + "\"}";
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(authBody, headers);
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<String> response = restTemplate.postForEntity(authUrl, entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.get

                
                
                
                
                
                
                
                
                
                
                
                
                
   package kr.co.matchday.cart;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class CartDAO {

    @Autowired
    private SqlSession sqlSession;

    // 장바구니에 상품 추가
    public int insert(CartDTO cartDto) {
        return sqlSession.insert("cart.insert", cartDto);
    }

    // 장바구니에서 수량 업데이트
    public int updateQuantity(CartDTO cartDto) {
        return sqlSession.update("cart.updateQuantity", cartDto);
    }

    // 장바구니에 상품이 존재하는지 확인
    public CartDTO checkIfExists(CartDTO cartDto) {
        return sqlSession.selectOne("cart.checkIfExists", cartDto);
    }

    // 사용자의 장바구니 목록 조회 
    public List<CartDTO> getCartList(String userid) {
        return sqlSession.selectList("cart.getCartList", userid);
    }

    // 장바구니에서 상품 삭제 (단일 항목)
    public int delete(int cartid) {
        return sqlSession.delete("cart.delete", cartid);
    }

    // 장바구니에서 상품 삭제 (여러 항목)
    public int deleteMultiple(List<Integer> cartidList) {
        return sqlSession.delete("cart.deleteMultiple", cartidList);
    }

    // 장바구니에서 선택된 항목 조회
    public List<CartDTO> getCartItems(List<Integer> cartidList) {
        return sqlSession.selectList("cart.getCartItems", cartidList);
    }
}














package kr.co.matchday.cart;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.order.OrderDAO;

@Controller
@RequestMapping("/cart")
public class CartCont {

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private MypageDAO mypageDao;

    public CartCont() {
        System.out.println("-----CartCont() 객체 생성됨");
    }

    @PostMapping("/insert")
    @ResponseBody
    public String insert(@ModelAttribute CartDTO cartDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        cartDto.setUserid(userid);

        // 장바구니에 이미 존재하는지 확인
        CartDTO existingCartItem = cartDao.checkIfExists(cartDto);

        if (existingCartItem != null) {
            // 이미 존재하면 수량 업데이트
            existingCartItem.setQuantity(existingCartItem.getQuantity() + cartDto.getQuantity());
            existingCartItem.setTotalprice(existingCartItem.getUnitprice() * existingCartItem.getQuantity());
            cartDao.updateQuantity(existingCartItem);
        } else {
            // 존재하지 않으면 새로 추가
            cartDao.insert(cartDto);
        }

        return "SUCCESS";
    }

    @GetMapping("/list")
    public String showCartList(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<GoodsDTO> goodsList = goodsDao.list();
        List<CartDTO> cartList = cartDao.getCartList(userid);
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("cartList", cartList);
        return "cart/list";
    }

    @GetMapping("/delete")
    public String deleteItems(@RequestParam("cartid") List<Integer> cartid) {
        cartDao.deleteMultiple(cartid);
        return "redirect:/cart/list";
    }

    @GetMapping("/cartPayment")
    public String cartPayment(
            @RequestParam("cartid") String cartid,
            @RequestParam("goodsid") String goodsid,
            @RequestParam("size") String size,
            @RequestParam("quantity") String quantity,
            @RequestParam("price") String price,
            @RequestParam("deliveryfee") String deliveryfee,
            @RequestParam("totalPrice") String totalPrice,
            HttpSession session, Model model) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<String> goodsidList = Arrays.asList(goodsid.split(","));
        List<String> sizeList = Arrays.asList(size.split(","));
        List<Integer> quantityList = Arrays.asList(quantity.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> priceList = Arrays.asList(price.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

        List<GoodsDTO> goodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("cartid", cartid);
        
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("sizeList", sizeList);
        model.addAttribute("quantityList", quantityList);
        model.addAttribute("priceList", priceList);
        model.addAttribute("totalPriceList", totalPriceList);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "cart/cartPayment";
    }
}











package kr.co.matchday.cart;

import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.order.OrderDAO;

@Controller
@RequestMapping("/cart")
public class CartCont {

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private MypageDAO mypageDao;

    @PostMapping("/insert")
    @ResponseBody
    public String insert(@ModelAttribute CartDTO cartDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        cartDto.setUserid(userid);

        // 재고 수량 조회
        List<StockDTO> stockList = goodsDao.stocklist(cartDto.getGoodsid());
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(cartDto.getSize()))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (cartDto.getQuantity() > availableStock) {
            return "ERROR: Not enough stock available.";
        }

        // 장바구니에 이미 존재하는지 확인
        CartDTO existingCartItem = cartDao.checkIfExists(cartDto);

        if (existingCartItem != null) {
            // 이미 존재하면 수량 업데이트
            if (existingCartItem.getQuantity() + cartDto.getQuantity() > availableStock) {
                return "ERROR: Not enough stock available.";
            }
            existingCartItem.setQuantity(existingCartItem.getQuantity() + cartDto.getQuantity());
            existingCartItem.setTotalprice(existingCartItem.getUnitprice() * existingCartItem.getQuantity());
            cartDao.updateQuantity(existingCartItem);
        } else {
            // 존재하지 않으면 새로 추가
            cartDao.insert(cartDto);
        }

        return "SUCCESS";
    }

    @GetMapping("/cartPayment")
    public String cartPayment(
            @RequestParam("cartid") String cartid,
            @RequestParam("goodsid") String goodsid,
            @RequestParam("size") String size,
            @RequestParam("quantity") String quantity,
            @RequestParam("price") String price,
            @RequestParam("deliveryfee") String deliveryfee,
            @RequestParam("totalPrice") String totalPrice,
            HttpSession session, Model model) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<String> goodsidList = Arrays.asList(goodsid.split(","));
        List<String> sizeList = Arrays.asList(size.split(","));
        List<Integer> quantityList = Arrays.asList(quantity.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> priceList = Arrays.asList(price.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

        // 재고 수량 검증
        for (int i = 0; i < goodsidList.size(); i++) {
            String goodsid = goodsidList.get(i);
            String size = sizeList.get(i);
            int requestedQuantity = quantityList.get(i);

            List<StockDTO> stockList = goodsDao.stocklist(goodsid);
            int availableStock = stockList.stream()
                .filter(stock -> stock.getSize().equals(size))
                .mapToInt(StockDTO::getStockquantity)
                .findFirst()
                .orElse(0);

            if (requestedQuantity > availableStock) {
                model.addAttribute("error", "상품 " + goodsid + "의 재고가 부족합니다.");
                return "error";
            }
        }

        // 재고 수량 업데이트
        for (int i = 0; i < goodsidList.size(); i++) {
            StockDTO stockDto = new StockDTO();
            stockDto.setGoodsid(goodsidList.get(i));
            stockDto.setSize(sizeList.get(i));
            stockDto.setStockquantity(quantityList.get(i));
            goodsDao.buystockupdate(stockDto);
        }

        // 장바구니에서 선택된 항목 조회 및 모델에 추가
        List<GoodsDTO> goodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("cartid", cartid);
        
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("sizeList", sizeList);
        model.addAttribute("quantityList", quantityList);
        model.addAttribute("priceList", priceList);
        model.addAttribute("totalPriceList", totalPriceList);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "cart/cartPayment";
    }
}



   package kr.co.matchday.cart;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.order.OrderDAO;

@Controller
@RequestMapping("/cart")
public class CartCont {

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private MypageDAO mypageDao;

    @PostMapping("/insert")
    @ResponseBody
    public String insert(@ModelAttribute CartDTO cartDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        cartDto.setUserid(userid);

        // 재고 수량 조회
        List<StockDTO> stockList = goodsDao.stocklist(cartDto.getGoodsid());
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(cartDto.getSize()))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (cartDto.getQuantity() > availableStock) {
            return "ERROR: Not enough stock available.";
        }

        // 장바구니에 이미 존재하는지 확인
        CartDTO existingCartItem = cartDao.checkIfExists(cartDto);

        if (existingCartItem != null) {
            // 이미 존재하면 수량 업데이트
            if (existingCartItem.getQuantity() + cartDto.getQuantity() > availableStock) {
                return "ERROR: Not enough stock available.";
            }
            existingCartItem.setQuantity(existingCartItem.getQuantity() + cartDto.getQuantity());
            existingCartItem.setTotalprice(existingCartItem.getUnitprice() * existingCartItem.getQuantity());
            cartDao.updateQuantity(existingCartItem);
        } else {
            // 존재하지 않으면 새로 추가
            cartDao.insert(cartDto);
        }

        return "SUCCESS";
    }

    @GetMapping("/list")
    public String showCartList(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<GoodsDTO> allGoodsList = goodsDao.list(); // Renamed
        List<CartDTO> cartList = cartDao.getCartList(userid);
        model.addAttribute("allGoodsList", allGoodsList);
        model.addAttribute("cartList", cartList);
        return "cart/list";
    }

    @GetMapping("/delete")
    public String deleteItems(@RequestParam("cartid") List<Integer> cartid) {
        for (int id : cartid) {
            cartDao.delete(id);
        }
        return "redirect:/cart/list";
    }

    @GetMapping("/cartPayment")
    public String cartPayment(
            @RequestParam("cartid") String cartid,
            @RequestParam("goodsid") String goodsid,
            @RequestParam("size") String size,
            @RequestParam("quantity") String quantity,
            @RequestParam("price") String price,
            @RequestParam("deliveryfee") String deliveryfee,
            @RequestParam("totalPrice") String totalPrice,
            HttpSession session, Model model) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<String> goodsidList = Arrays.asList(goodsid.split(","));
        List<String> sizeList = Arrays.asList(size.split(","));
        List<Integer> quantityList = Arrays.asList(quantity.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> priceList = Arrays.asList(price.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

        // 재고 수량 검증
        for (int i = 0; i < goodsidList.size(); i++) {
            String goodsid = goodsidList.get(i);
            String size = sizeList.get(i);
            int requestedQuantity = quantityList.get(i);

            List<StockDTO> stockList = goodsDao.stocklist(goodsid);
            int availableStock = stockList.stream()
                .filter(stock -> stock.getSize().equals(size))
                .mapToInt(StockDTO::getStockquantity)
                .findFirst()
                .orElse(0);

            if (requestedQuantity > availableStock) {
                model.addAttribute("error", "상품 " + goodsid + "의 재고가 부족합니다.");
                return "error";
            }
        }

        // 재고 수량 업데이트
        for (int i = 0; i < goodsidList.size(); i++) {
            StockDTO stockDto = new StockDTO();
            stockDto.setGoodsid(goodsidList.get(i));
            stockDto.setSize(sizeList.get(i));
            stockDto.setStockquantity(quantityList.get(i));
            goodsDao.buystockupdate(stockDto);
        }

        // 장바구니에서 선택된 항목 조회 및 모델에 추가
        List<GoodsDTO> selectedGoodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList()); // Renamed
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("cartid", cartid);

        model.addAttribute("selectedGoodsList", selectedGoodsList); // Renamed
        model.addAttribute("sizeList", sizeList);
        model.addAttribute("quantityList", quantityList);
        model.addAttribute("priceList", priceList);
        model.addAttribute("totalPriceList", totalPriceList);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "cart/cartPayment";
    }
}









@GetMapping("/cartPayment")
public String cartPayment(
        @RequestParam("cartid") String cartid,
        @RequestParam("goodsid") String goodsidParam,
        @RequestParam("size") String sizeParam,
        @RequestParam("quantity") String quantityParam,
        @RequestParam("price") String priceParam,
        @RequestParam("deliveryfee") String deliveryfee,
        @RequestParam("totalPrice") String totalPrice,
        HttpSession session, Model model) {
    
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login";
    }

    List<String> goodsidList = Arrays.asList(goodsidParam.split(","));
    List<String> sizeList = Arrays.asList(sizeParam.split(","));
    List<Integer> quantityList = Arrays.asList(quantityParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> priceList = Arrays.asList(priceParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

    // Validate stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        String itemGoodsId = goodsidList.get(i);
        String itemSize = sizeList.get(i);
        int requestedQuantity = quantityList.get(i);

        List<StockDTO> stockList = goodsDao.stocklist(itemGoodsId);
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(itemSize))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (requestedQuantity > availableStock) {
            model.addAttribute("error", "상품 " + itemGoodsId + "의 재고가 부족합니다.");
            return "error";
        }
    }

    // Update stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        StockDTO stockDto = new StockDTO();
        stockDto.setGoodsid(goodsidList.get(i));
        stockDto.setSize(sizeList.get(i));
        stockDto.setStockquantity(quantityList.get(i));
        goodsDao.buystockupdate(stockDto);
    }
    
    // Retrieve selected items and add to model
    List<GoodsDTO> selectedGoodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
    model.addAttribute("goodsid", goodsidParam);
    model.addAttribute("size", sizeParam);
    model.addAttribute("quantity", quantityParam);
    model.addAttribute("price", priceParam);
    model.addAttribute("totalPrice", totalPrice);
    model.addAttribute("deliveryfee", deliveryfee);
    model.addAttribute("cartid", cartid);

    model.addAttribute("goodsList", selectedGoodsList);
    model.addAttribute("sizeList", sizeList);
    model.addAttribute("quantityList", quantityList);
    model.addAttribute("priceList", priceList);
    model.addAttribute("totalPriceList", totalPriceList);

    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    MypageDTO mypageDto = mypageDao.getUserById(userid);
    if (mypageDto == null) {
        model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
        return "error";
    }
    model.addAttribute("totalpoints", mypageDto.getTotalpoints());

    return "cart/cartPayment";
}

   @GetMapping("/cartPayment")
public String cartPayment(
        @RequestParam("cartid") String cartid,
        @RequestParam("goodsid") String goodsidParam,
        @RequestParam("size") String sizeParam,
        @RequestParam("quantity") String quantityParam,
        @RequestParam("price") String priceParam,
        @RequestParam("deliveryfee") String deliveryfee,
        @RequestParam("totalPrice") String totalPrice,
        HttpSession session, Model model) {
    
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login";
    }

    List<String> goodsidList = Arrays.asList(goodsidParam.split(","));
    List<String> sizeList = Arrays.asList(sizeParam.split(","));
    List<Integer> quantityList = Arrays.asList(quantityParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> priceList = Arrays.asList(priceParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    
    // Validate stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        String itemGoodsId = goodsidList.get(i);
        String itemSize = sizeList.get(i);
        int requestedQuantity = quantityList.get(i);

        List<StockDTO> stockList = goodsDao.stocklist(itemGoodsId);
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(itemSize))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (requestedQuantity > availableStock) {
            model.addAttribute("error", "상품 " + itemGoodsId + "의 재고가 부족합니다.");
            return "cart/cartPayment";
        }
    }

    // Update stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        StockDTO stockDto = new StockDTO();
        stockDto.setGoodsid(goodsidList.get(i));
        stockDto.setSize(sizeList.get(i));
        stockDto.setStockquantity(quantityList.get(i));
        goodsDao.buystockupdate(stockDto);
    }
    
    // Retrieve selected items and add to model
    List<GoodsDTO> goodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
    model.addAttribute("goodsid", goodsidParam);
    model.addAttribute("size", sizeParam);
    model.addAttribute("quantity", quantityParam);
    model.addAttribute("price", priceParam);
    model.addAttribute("totalPrice", totalPrice);
    model.addAttribute("deliveryfee", deliveryfee);
    model.addAttribute("cartid", cartid);
    
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("sizeList", sizeList);
    model.addAttribute("quantityList", quantityList);
    model.addAttribute("priceList", priceList);
    model.addAttribute("totalPriceList", totalPriceList);

    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    MypageDTO mypageDto = mypageDao.getUserById(userid);
    if (mypageDto == null) {
        model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
        return "cart/cartPayment";
    }
    model.addAttribute("totalpoints", mypageDto.getTotalpoints());

    return "cart/cartPayment";
}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">
    <!-- 리뷰 추가 -->
    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, orderid, reviewdate, title, content, rating, grantedpoints, filename, filesize)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{orderid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints}, #{filename}, #{filesize})
    </insert>

    <!-- 특정 상품의 리뷰 목록 조회 -->
    <select id="getReviewList" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE goodsid = #{goodsid}
    </select>

    <!-- 특정 리뷰 조회 -->
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>

    <!-- 리뷰 업데이트 -->
    <update id="update" parameterType="kr.co.matchday.review.ReviewDTO">
        UPDATE review
        SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, orderid = #{orderid}, reviewdate = #{reviewdate},
            title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}, filename = #{filename}, filesize = #{filesize}
        WHERE reviewid = #{reviewid}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="reviewdelete" parameterType="String">
        DELETE FROM review WHERE reviewid = #{reviewid}
    </delete>

    <!-- 리뷰 ID에 해당하는 파일명 조회 -->
    <select id="filename" resultType="java.lang.String">
        SELECT filename
        FROM review
        WHERE reviewid = #{reviewid}
    </select>

    <!-- 모든 리뷰 조회 -->
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>

    <!-- 특정 리뷰 상세 조회 -->
    <select id="getReviewById" resultType="kr.co.matchday.review.ReviewDTO" parameterType="String">
        SELECT *
        FROM review
        WHERE reviewid = #{reviewid}
    </select>

    <!-- 모든 리뷰 목록 조회 -->
    <select id="getAllReviews" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT *
        FROM review
    </select>
    
    <!-- 포인트 적립 내역 추가 -->
    <insert id="insertPointHistory">
        INSERT INTO pointhistory (userid, pointtype, pointsource, pointamount, pointcreationdate)
        VALUES (#{userid}, '적립', #{pointSource}, #{pointAmount}, NOW())
    </insert>
    
    <!-- 특정 상품에 대한 주문 목록 조회 -->
    <select id="getOrderListByGoodsId" parameterType="map" resultType="kr.co.matchday.order.OrderDTO">
        SELECT orderid, goodsid
        FROM `order`
        WHERE goodsid = #{goodsid} AND userid = #{userid}
    </select>

    <!-- 특정 주문에 대한 리뷰 수 조회 -->
    <select id="countReviewByOrderId" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM review WHERE orderid = #{orderid}
    </select>
</mapper>
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.point.PointHistoryDTO;
import kr.co.matchday.tickets.TicketsDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        System.out.println("HERE !! ");
        System.out.println(requestParams);
        System.out.println(requestParams.get("goodsid"));

        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientemail = requestParams.get("recipientemail");
        String recipientphone = requestParams.get("recipientphone");
        String shippingaddress = requestParams.get("shippingaddress");
        String shippingrequest = requestParams.get("shippingrequest");
        String paymentmethodcode = requestParams.get("paymentmethodcode");
        String couponid = requestParams.get("couponid");
        int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
        int discountprice = parseInteger(requestParams.get("discountprice"), 0);
        String userId = (String) session.getAttribute("userID");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);
        System.out.println("usedpoints = " + usedpoints);
        List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
        List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
        List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
        List<String> prices = Arrays.asList(requestParams.get("price").split(","));
        List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

        System.out.println("imp_uid: " + imp_uid);

        String allcartid = requestParams.get("cartid");
        List<String> cartidList = new ArrayList<String>();

        if (allcartid != "" && allcartid != null) {
            cartidList = Arrays.asList(allcartid.split(","));        // 장바구니 삭제용
        }

        if (userId == null) {
            response.put("success", false);
            response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
            return response;
        }

        if (goodsidList.isEmpty()) {
            response.put("success", false);
            response.put("message", "상품 ID가 유효하지 않습니다.");
            return response;
        }

        if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
            response.put("success", false);
            response.put("message", "결제 방법 코드가 유효하지 않습니다.");
            return response;
        }

        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
        "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        String redirectUrl = "/order/orderDetail?orderid=";
        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    //orderDto.setGoodsid(goodsidList.get(i));
                    orderDto.setOrderdate(currentDate); // 결제 날짜 설정
                    orderDto.setOrderstatus("Completed");
                    if (couponid != null && !couponid.isEmpty() && !couponid.equals("null")) {
                        orderDto.setCouponid(couponid);
                    } else {
                        orderDto.setCouponid(null);
                    }
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();    // TB : orderDetail : 장바구니 개별 구매내역 리스트
                    int Orderquantity = 0;        // TB : order (전체 주문내역 : 장바구니 내역)

                    for (int i = 0; i < goodsidList.size(); i++) {
                        OrderdetailDTO orderDetailDto = new OrderdetailDTO();
                        orderDetailDto.setOrderid(orderid);
                        orderDetailDto.setGoodsid(goodsidList.get(i));
                        orderDetailDto.setQuantity(Integer.parseInt(quantities.get(i)));
                        orderDetailDto.setSize(sizes.get(i));
                        orderDetailDto.setPrice(Integer.parseInt(prices.get(i)));
                        orderDetailDto.setTotalPrice(Integer.parseInt(totalPrices.get(i)));
                        orderDetails.add(orderDetailDto);
                        Orderquantity += Integer.parseInt(quantities.get(i));
                    }

                    orderDto.setOrderquantity(Orderquantity);
                    boolean stockAvailable = true;

                    for (int i = 0; i < goodsidList.size(); i++) {
                        String goodsid = goodsidList.get(i);
                        String size = sizes.get(i);
                        int quantity = Integer.parseInt(quantities.get(i));

                        StockDTO stock = goodsDao.getStockByGoodsIdAndSize(goodsid, size);
                        if (stock == null || stock.getStock() < quantity) {
                            stockAvailable = false;
                            break;
                        }
                    }

                    if (stockAvailable) {
                        orderDao.addOrder(orderDto);

                        for (OrderdetailDTO orderDetailDto : orderDetails) {
                            orderDao.addOrderDetail(orderDetailDto);
                            goodsDao.updateStock(orderDetailDto.getGoodsid(), orderDetailDto.getSize(), orderDetailDto.getQuantity());
                        }

                        if (usedpoints > 0) {
                            int result = mypageDao.deductUserPoints(userId, usedpoints);
                            if (result > 0) {
                                PointHistoryDTO pointHistoryDto = new PointHistoryDTO();
                                pointHistoryDto.setUserid(userId);
                                pointHistoryDto.setPoints(-usedpoints);
                                pointHistoryDto.setDescription("상품 구매 사용");
                                pointHistoryDto.setCreatedat(new Timestamp(System.currentTimeMillis()));
                                mypageDao.addPointHistory(pointHistoryDto);
                            }
                        }

                        if (couponid != null && !couponid.isEmpty() && !couponid.equals("null")) {
                            orderDao.markCouponAsUsed(couponid, userId);
                        }

                        // 장바구니 내역 삭제
                        for (String cartid : cartidList) {
                            cartDao.deleteCartItem(Integer.parseInt(cartid));
                        }

                        response.put("success", true);
                        response.put("redirectUrl", redirectUrl);
                    } else {
                        response.put("success", false);
                        response.put("message", "재고가 부족합니다.");
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 검증 중 오류가 발생했습니다.");
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 조회에 실패했습니다.");
        }

        return response;
    }

    private String getToken() {
        String impKey = env.getProperty("import.imp_key");
        String impSecret = env.getProperty("import.imp_secret");

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, String> body = new HashMap<>();
        body.put("imp_key", impKey);
        body.put("imp_secret", impSecret);

        HttpEntity<Map<String, String>> entity = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.postForEntity(
            "https://api.iamport.kr/users/getToken", entity, String.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> json = objectMapper.readValue(response.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) json.get("response");
                return (String) responseJson.get("access_token");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        Calendar calendar = Calendar.getInstance();
        return sdf.format(calendar.getTime());
    }

    @GetMapping("/orderDetail")
    public ModelAndView orderDetail(@RequestParam("orderid") String orderid) {
        ModelAndView mav = new ModelAndView("order/orderDetail");
        OrderDTO order = orderDao.getOrderById(orderid);
        if (order == null) {
            mav.addObject("error", "주문 정보를 찾을 수 없습니다.");
            return mav;
        }
        List<OrderdetailDTO> orderDetails = orderDao.getOrderDetailsByOrderId(orderid);
        mav.addObject("order", order);
        mav.addObject("orderDetails", orderDetails);
        return mav;
    }
}
   
   
   
   
   
   
   <mapper namespace="com.example.mypage.MyPageDAO">
    <!-- 포인트 관련 쿼리 예시 -->
    
    <!-- 사용자의 포인트 내역을 조회하는 쿼리 -->
    <select id="getUserPoints" parameterType="String" resultType="com.example.mypage.Point">
        SELECT point_id, user_id, point_amount, point_date
        FROM user_points
        WHERE user_id = #{userId}
    </select>
    
    <!-- 특정 주문의 포인트 정보를 조회하는 쿼리 -->
    <select id="getOrderPoints" parameterType="String" resultType="com.example.mypage.OrderPoints">
        SELECT order_id, point_amount
        FROM order_points
        WHERE order_id = #{orderId}
    </select>
</mapper>
   
   
   
   
   
   
   
   
   
   
   @PostMapping("/verifyPayment")
@ResponseBody
public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
    Map<String, Object> response = new HashMap<>();
    
    String imp_uid = requestParams.get("imp_uid");
    String merchant_uid = requestParams.get("merchant_uid");
    int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
    int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
    String recipientname = requestParams.get("recipientname");
    String recipientemail = requestParams.get("recipientemail");
    String recipientphone = requestParams.get("recipientphone");
    String shippingaddress = requestParams.get("shippingaddress");
    String shippingrequest = requestParams.get("shippingrequest");
    String paymentmethodcode = requestParams.get("paymentmethodcode");
    String couponid = requestParams.get("couponid");
    int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
    int discountprice = parseInteger(requestParams.get("discountprice"), 0);
    String userId = (String) session.getAttribute("userID");
    int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

    List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
    List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
    List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
    List<String> prices = Arrays.asList(requestParams.get("price").split(","));
    List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

    String allcartid = requestParams.get("cartid");
    List<String> cartidList = new ArrayList<String>();
    
    if (allcartid != null && !allcartid.isEmpty()) {
        cartidList = Arrays.asList(allcartid.split(","));
    }
    
    if (userId == null) {
        response.put("success", false);
        response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
        return response;
    }

    if (goodsidList.isEmpty()) {
        response.put("success", false);
        response.put("message", "상품 ID가 유효하지 않습니다.");
        return response;
    }

    if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
        response.put("success", false);
        response.put("message", "결제 방법 코드가 유효하지 않습니다.");
        return response;
    }

    String token = getToken();
    if (token == null) {
        response.put("success", false);
        response.put("message", "토큰을 가져오지 못했습니다.");
        return response;
    }

    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);

    HttpEntity<String> entity = new HttpEntity<>(headers);
    ResponseEntity<String> paymentResponse = restTemplate.exchange(
    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

    String redirectUrl = "/order/orderDetail?orderid=";
    if (paymentResponse.getStatusCode() == HttpStatus.OK) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
            Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
            int amount = (Integer) responseJson.get("amount");

            if (amount == paid_amount) {
                String orderid = generateOrderId();
                redirectUrl = redirectUrl + orderid;
                String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                OrderDTO orderDto = new OrderDTO();
                orderDto.setOrderid(orderid);
                orderDto.setUserid(userId);
                orderDto.setOrderdate(currentDate);
                orderDto.setOrderstatus("Completed");
                orderDto.setCouponid(couponid);
                orderDto.setUsedpoints(usedpoints);
                orderDto.setFinalpaymentamount(finalpaymentamount);
                orderDto.setShippingstatus("Pending");
                orderDto.setRecipientname(recipientname);
                orderDto.setRecipientemail(recipientemail);
                orderDto.setRecipientphone(recipientphone);
                orderDto.setShippingaddress(shippingaddress);
                orderDto.setShippingrequest(shippingrequest);
                orderDto.setPaymentmethodcode(paymentmethodcode);
                orderDto.setDeliveryfee(deliveryFee);
                orderDto.setDiscountprice(discountprice);
                orderDto.setImpUid(imp_uid);

                List<OrderdetailDTO> orderDetails = new ArrayList<>();
                int Orderquantity = 0;
                int Orderprice = 0;

                for (int i = 0; i < goodsidList.size(); i++) {
                    int quantity = parseInteger(quantities.get(i), 1);
                    int price = parseInteger(prices.get(i), 0);
                    
                    Orderquantity += quantity;
                    Orderprice += (price * quantity);
                    
                    OrderdetailDTO orderDetail = new OrderdetailDTO();
                    orderDetail.setGoodsid(goodsidList.get(i));
                    orderDetail.setSize(sizes.get(i));
                    orderDetail.setQuantity(quantity);
                    orderDetail.setPrice(price);
                    orderDetail.setTotalamount(price * quantity);
                    orderDetails.add(orderDetail);

                    StockDTO stockDto = new StockDTO();
                    stockDto.setGoodsid(goodsidList.get(i));
                    stockDto.setSize(sizes.get(i));
                    stockDto.setStockquantity(quantity);
                    goodsDao.buystockupdate(stockDto);
                    
                    if (!cartidList.isEmpty()) {
                        cartDao.delete(Integer.parseInt(cartidList.get(i)));
                    }
                    
                    orderDto.setOrderDetails(orderDetails);
                }

                orderDto.setPrice(Orderprice);
                orderDto.setQuantity(Orderquantity);
                orderDto.setTotalprice(Orderprice);
                orderDto.setReceiptmethodcode("receiving02");

                try {
                    orderDao.insert(orderDto);
                } catch (Exception e) {
                    response.put("success", false);
                    response.put("message", "Order insertion failed.");
                    return response;
                }
                
                if (couponid != null && !couponid.equals("0")) {
                    orderDao.updateCouponUsage(couponid);
                }

                MypageDTO mypageDto = mypageDao.getUserById(userId);
                if (mypageDto != null) {
                    int totalpoints = mypageDto.getTotalpoints();
                    if (totalpoints >= usedpoints) {
                        int remainingPoints = totalpoints - usedpoints;
                        // 포인트 업데이트
                        mypageDao.updatePoints(userId, remainingPoints);

                        // 포인트 사용 기록 추가
                        PointHistoryDTO pointHistory = new PointHistoryDTO();
                        pointHistory.setUserid(userId);
                        pointHistory.setPointcategoryid("point_use");
                        pointHistory.setPointtype("사용");
                        pointHistory.setPointamount(-usedpoints);
                        pointHistory.setOrderid(orderid);
                        orderDao.insertPointHistory(pointHistory);

                        response.put("success", true);
                        response.put("redirectUrl", redirectUrl);
                    } else {
                        response.put("success", false);
                        response.put("message", "사용 가능한 포인트가 부족합니다.");
                        return response;
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "사용자 포인트 정보를 찾을 수 없습니다.");
                    return response;
                }
            } else {
                response.put("success", false);
                response.put("message", "결제 금액이 일치하지 않습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }
    } else {
        response.put("success", false);
        response.put("message", "결제 정보를 가져오지 못했습니다.");
    }

    return response;
}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.*;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private Environment env;

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        try {
            String imp_uid = requestParams.get("imp_uid");
            String merchant_uid = requestParams.get("merchant_uid");
            int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
            int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
            String recipientname = requestParams.get("recipientname");
            String recipientemail = requestParams.get("recipientemail");
            String recipientphone = requestParams.get("recipientphone");
            String shippingaddress = requestParams.get("shippingaddress");
            String shippingrequest = requestParams.get("shippingrequest");
            String paymentmethodcode = requestParams.get("paymentmethodcode");
            String couponid = requestParams.get("couponid");
            int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
            int discountprice = parseInteger(requestParams.get("discountprice"), 0);
            String userId = (String) session.getAttribute("userID");
            int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

            List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
            List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
            List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
            List<String> prices = Arrays.asList(requestParams.get("price").split(","));
            List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

            String allcartid = requestParams.get("cartid");
            List<String> cartidList = new ArrayList<>();
            if (allcartid != null && !allcartid.isEmpty()) {
                cartidList = Arrays.asList(allcartid.split(","));
            }

            if (userId == null) {
                response.put("success", false);
                response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                return response;
            }

            if (goodsidList.isEmpty()) {
                response.put("success", false);
                response.put("message", "상품 ID가 유효하지 않습니다.");
                return response;
            }

            if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
                response.put("success", false);
                response.put("message", "결제 방법 코드가 유효하지 않습니다.");
                return response;
            }

            String token = getToken();
            if (token == null) {
                response.put("success", false);
                response.put("message", "토큰을 가져오지 못했습니다.");
                return response;
            }

            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

            String redirectUrl = "/order/orderDetail?orderid=";
            if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setOrderdate(currentDate);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid != null && !couponid.isEmpty() && !couponid.equals("null") ? couponid : null);
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();
                    int Orderquantity = 0;
                    int Orderprice = 0;

                    for (int i = 0; i < goodsidList.size(); i++) {
                        int quantity = parseInteger(quantities.get(i), 1);
                        int price = parseInteger(prices.get(i), 0);

                        Orderquantity += quantity;
                        Orderprice += (price * quantity);

                        OrderdetailDTO orderDetail = new OrderdetailDTO();
                        orderDetail.setGoodsid(goodsidList.get(i));
                        orderDetail.setSize(sizes.get(i));
                        orderDetail.setQuantity(quantity);
                        orderDetail.setPrice(price);
                        orderDetail.setTotalamount(price * quantity);
                        orderDetails.add(orderDetail);

                        // 재고 수정
                        StockDTO stockDto = new StockDTO();
                        stockDto.setGoodsid(goodsidList.get(i));
                        stockDto.setSize(sizes.get(i));
                        stockDto.setStockquantity(quantity);
                        goodsDao.buystockupdate(stockDto);

                        // 장바구니 삭제
                        if (!cartidList.isEmpty()) {
                            cartDao.delete(Integer.parseInt(cartidList.get(i)));
                        }
                    }

                    orderDto.setOrderDetails(orderDetails);
                    orderDto.setPrice(Orderprice);
                    orderDto.setQuantity(Orderquantity);
                    orderDto.setTotalprice(Orderprice);
                    orderDto.setReceiptmethodcode("receiving02");

                    try {
                        orderDao.insert(orderDto);
                        if (couponid != null && !couponid.equals("0")) {
                            orderDao.updateCouponUsage(couponid);
                        }

                        MypageDTO mypageDto = mypageDao.getUserById(userId);
                        if (mypageDto != null) {
                            int totalpoints = mypageDto.getTotalpoints();
                            if (totalpoints >= usedpoints) {
                                int remainingPoints = totalpoints - usedpoints;
                                mypageDao.updateTotalPoints(userId, remainingPoints);

                                PointHistoryDTO pointHistory = new PointHistoryDTO();
                                pointHistory.setUserid(userId);
                                pointHistory.setPointcategoryid("point_use");
                                pointHistory.setPointtype("사용");
                                pointHistory.setPointamount(-usedpoints);
                                pointHistory.setOrderid(orderid);
                                orderDao.insertPointHistory(pointHistory);

                                response.put("success", true);
                                response.put("redirectUrl", redirectUrl);
                            } else {
                                response.put("success", false);
                                response.put("message", "사용 가능한 포인트가 부족합니다.");
                            }
                        } else {
                            response.put("success", false);
                            response.put("message", "사용자 포인트 정보를 찾을 수 없습니다.");
                        }
                    } catch (Exception e) {
                        response.put("success", false);
                        response.put("message", "주문 처리 중 오류 발생.");
                        e.printStackTrace();
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } else {
                response.put("success", false);
                response.put("message", "결제 정보를 가져오지 못했습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }

        return response;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        String prefix = "order";
        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(date);

        int nextSuffix = 1;
        if (maxOrderId != null) {
            nextSuffix = Integer.parseInt(maxOrderId.substring(maxOrderId.length() - 6)) + 1;
        }

        return String.format("%s%s%06d", prefix, date, nextSuffix);
    }

    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.*;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private Environment env;

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        try {
            // 요청 파라미터 추출
            String imp_uid = requestParams.get("imp_uid");
            String merchant_uid = requestParams.get("merchant_uid");
            int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
            int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
            String recipientname = requestParams.get("recipientname");
            String recipientemail = requestParams.get("recipientemail");
            String recipientphone = requestParams.get("recipientphone");
            String shippingaddress = requestParams.get("shippingaddress");
            String shippingrequest = requestParams.get("shippingrequest");
            String paymentmethodcode = requestParams.get("paymentmethodcode");
            String couponid = requestParams.get("couponid");
            int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
            int discountprice = parseInteger(requestParams.get("discountprice"), 0);
            String userId = (String) session.getAttribute("userID");
            int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

            List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
            List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
            List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
            List<String> prices = Arrays.asList(requestParams.get("price").split(","));
            List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

            String allcartid = requestParams.get("cartid");
            List<String> cartidList = new ArrayList<>();
            if (allcartid != null && !allcartid.isEmpty()) {
                cartidList = Arrays.asList(allcartid.split(","));
            }

            if (userId == null) {
                response.put("success", false);
                response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                return response;
            }

            if (goodsidList.isEmpty()) {
                response.put("success", false);
                response.put("message", "상품 ID가 유효하지 않습니다.");
                return response;
            }

            if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
                response.put("success", false);
                response.put("message", "결제 방법 코드가 유효하지 않습니다.");
                return response;
            }

            // 결제 토큰 가져오기
            String token = getToken();
            if (token == null) {
                response.put("success", false);
                response.put("message", "토큰을 가져오지 못했습니다.");
                return response;
            }

            // 결제 정보 확인
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

            String redirectUrl = "/order/orderDetail?orderid=";
            if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    // 주문 DTO 설정
                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setOrderdate(currentDate);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid != null && !couponid.isEmpty() && !couponid.equals("null") ? couponid : null);
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();
                    int Orderquantity = 0;
                    int Orderprice = 0;

                    // 주문 상세 설정 및 재고, 장바구니 업데이트
                    for (int i = 0; i < goodsidList.size(); i++) {
                        int quantity = parseInteger(quantities.get(i), 1);
                        int price = parseInteger(prices.get(i), 0);

                        Orderquantity += quantity;
                        Orderprice += (price * quantity);

                        OrderdetailDTO orderDetail = new OrderdetailDTO();
                        orderDetail.setGoodsid(goodsidList.get(i));
                        orderDetail.setSize(sizes.get(i));
                        orderDetail.setQuantity(quantity);
                        orderDetail.setPrice(price);
                        orderDetail.setTotalamount(price * quantity);
                        orderDetails.add(orderDetail);

                        // 재고 수정
                        StockDTO stockDto = new StockDTO();
                        stockDto.setGoodsid(goodsidList.get(i));
                        stockDto.setSize(sizes.get(i));
                        stockDto.setStockquantity(quantity);
                        goodsDao.buystockupdate(stockDto);

                        // 장바구니 삭제
                        if (!cartidList.isEmpty()) {
                            cartDao.delete(Integer.parseInt(cartidList.get(i)));
                        }
                    }

                    // 주문 상세 추가
                    orderDto.setOrderDetails(orderDetails);
                    orderDto.setPrice(Orderprice);
                    orderDto.setQuantity(Orderquantity);
                    orderDto.setTotalprice(Orderprice);
                    orderDto.setReceiptmethodcode("receiving02");

                    try {
                        // 주문 저장
                        orderDao.insert(orderDto);

                        // 쿠폰 사용 업데이트
                        if (couponid != null && !couponid.equals("0")) {
                            orderDao.updateCouponUsage(couponid);
                        }

                        // 사용자 포인트 업데이트
                        int totalpoints = mypageDao.getTotalPoints(userId);
                        if (totalpoints >= usedpoints) {
                            int remainingPoints = totalpoints - usedpoints;
                            mypageDao.updateTotalPoints(userId, remainingPoints);

                            PointHistoryDTO pointHistory = new PointHistoryDTO();
                            pointHistory.setUserid(userId);
                            pointHistory.setPointcategoryid("point_use");
                            pointHistory.setPointtype("사용");
                            pointHistory.setPointamount(-usedpoints);
                            pointHistory.setOrderid(orderid);
                            orderDao.insertPointHistory(pointHistory);

                            response.put("success", true);
                            response.put("redirectUrl", redirectUrl);
                        } else {
                            response.put("success", false);
                            response.put("message", "사용 가능한 포인트가 부족합니다.");
                        }
                    } catch (Exception e) {
                        response.put("success", false);
                        response.put("message", "주문 처리 중 오류 발생.");
                        e.printStackTrace();
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액 불일치.");
                }
            } else {
                response.put("success", false);
                response.put("message", "결제 정보 확인 실패.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "처리 중 오류 발생.");
            e.printStackTrace();
        }
        return response;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        String prefix = "order";
        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(date);

        int nextSuffix = 1;
        if (maxOrderId != null) {
            nextSuffix = Integer.parseInt(maxOrderId.substring(maxOrderId.length() - 6)) + 1;
        }

        return String.format("%s%s%06d", prefix, date, nextSuffix);
    }

    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}












<!-- totalpoints 업데이트 -->
<update id="buyupdateTotalPoints">
    UPDATE users u
    JOIN (
        SELECT userid, SUM(usedpoints) AS totalUsedPoints
        FROM orders
        WHERE orderid = #{orderid}
        GROUP BY userid
    ) o ON u.userid = o.userid
    SET u.totalpoints = u.totalpoints - o.totalUsedPoints
    WHERE u.userid = #{userid};
</update>

   