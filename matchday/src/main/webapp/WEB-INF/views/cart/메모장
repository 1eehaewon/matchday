<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ include file="../header.jsp" %>

<style>
    .cart-container {
        background-color: #fff;
        padding: 50px;   
    }

    .order_wrap {
        max-width: 1500px;
        margin: 0 auto;
    }
    
    /* 장바구니 라인 */
    .order_tit {
        border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        margin-bottom: 30px;
    }

    .order_tit h2 {
        font-size: 30px;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    .order_tit ol {
        list-style: none;
        display: flex;
        justify-content: right;
    }

    .order_tit ol li {
        display: flex;
        align-items: center;
        margin-right: 30px;
        font-size: 20px;
        color: #666;
    }

    .order_tit ol li.page_on span {
        font-weight: bold;
        color: #333;
    }

    .order_tit ol li img {
        margin-left: 5px;
        vertical-align: middle;
    }
    /* 장바구니 라인 end */

    /* 장바구니 상품 공간 */
    .cart_cont {
        border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        background-color: #fff;
        padding: 20px;
        margin-bottom: 50px;
    }

    .no_data {
        text-align: center;
        font-size: 20px;
        color: #666;
        margin-top: 20px;
    }

    /* 쇼핑계속하기 */
    .btn_left_box {
        text-align: left;
        margin-top: 20px;
    }

    .shop_go_link {
        font-size: 20px;
        color: #333;
        text-decoration: none;
    }

    .shop_go_link em {
        font-style: normal;
        font-weight: bold;
    }
    /* 쇼핑계속하기 end */

    /* 총 금액 계산하는 곳 */
    .price_sum {
        background-color: #fff;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .price_sum_list {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .price_sum_list dl {
        margin-bottom: 10px;
    }

    .price_sum_list dl dt {
        font-size: 16px;
        font-weight: bold;
        color: #333;
    }

    .price_sum_list dl dd {
        font-size: 16px;
        color: #333;
    }

    .price_sum_list span img {
        margin: 0 10px;
    }

    .price_sum_list dl.price_total {
        font-size: 18px;
    }

    .price_sum_list dl.price_total dt {
        color: #333;
        font-weight: bold;
    }

    .price_sum_list dl.price_total dd {
        font-size: 18px;
        color: #333;
        font-weight: bold;
    }
    /* 총 금액 계산하는 곳 end */
</style>

<div class="cart-container">
    <div class="content_box">
        <div class="order_wrap">
            <div class="order_tit">
                <h2>장바구니</h2>
                <ol>
                    <li class="page_on"><span>01</span> 장바구니 <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="장바구니진행 중"></span></li>
                    <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="주문서작성/결제대기"></span></li>
                    <li><span>03</span> 주문완료</li>
                </ol>
            </div>

            <div class="cart_cont">
                <form id="Cartfrm" name="Cartfrm" method="post">
                    <div class="row">
                        <div class="col-sm-12">
                            <table class="table table-hover">
                                <thead class="table-active">
                                    <tr>
                                        <th><input type="checkbox" id="selectAllCheckbox" onchange="toggleCheckboxes(this.checked)"></th>
                                        <th>상품 정보</th>
                                        <th>수량</th>
                                        <th>가격</th>
                                        <th>총 가격</th>
                                        <th>삭제</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <c:forEach items="${cartList}" var="cart">
                                        <tr>
                                            <td><input type="checkbox" name="selectedItems" value="${cart.cartid}" onchange="calculateTotal()"></td>
                                            <td>
                                                <c:forEach items="${goodsList}" var="goods">
                                                    <c:if test="${cart.goodsid eq goods.goodsid}">
                                                        <div class="product-image">
                                                            <c:if test="${not empty goods.filename}">
                                                                <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                                            </c:if>
                                                        </div>
                                                        <span>${goods.productname}</span>
                                                    </c:if>
                                                </c:forEach>
                                            </td>
                                            <td>
                                                <button type="button" onclick="decrementQuantity(this)">-</button>
                                                <input type="text" class="quantity-input" value="${cart.quantity}" readonly>
                                                <button type="button" onclick="incrementQuantity(this)">+</button>
                                            </td>
                                            <td>${cart.unitprice.toLocaleString()}</td>
                                            <td>${cart.totalprice.toLocaleString()}</td>
                                            <td><button type="button" onclick="deleteItem(${cart.cartid})">삭제하기</button></td>
                                        </tr>
                                    </c:forEach>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <p class="no_data" id="noDataMessage" style="display: none;">장바구니에 담겨있는 상품이 없습니다.</p>
                </form>
            </div>

            <div class="price_sum">
                <div class="price_sum_cont">
                    <div class="price_sum_list">
                        <dl>
                            <dt>총 <strong id="totalSelectedCount">0</strong> 개의 상품금액 </dt>
                            <dd><strong id="totalSelectedPrice">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_plus.png" alt="더하기" /></span>
                        <dl>
                            <dt>배송비</dt>
                            <dd><strong id="totalDeliveryCharge">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_total.png" alt="합계" /></span>
                        <dl class="price_total">
                            <dt>합계</dt>
                            <dd><strong id="totalSettlePrice">0</strong>원</dd>
                        </dl>
                    </div>
                    <em id="deliveryChargeText" class="tobe_mileage"></em>
                </div>
            </div>
            <div class="btn_left_box">
                <a href="/goods/list" class="shop_go_link"><em>&lt; 쇼핑 계속하기</em></a>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleCheckboxes(checked) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = checked;
        }
        calculateTotal();
    }

    function incrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) + 1;
        input.value = newValue;
        updateTotalPrice();
    }

    function decrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) - 1;
        if (newValue >= 0) {
            input.value = newValue;
            updateTotalPrice();
        }
    }















function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPrice = parseInt(row.cells[3].textContent.replace(/,/g, '')); // 단가가 표시된 셀 인덱스를 가정
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.cells[4].textContent = totalPrice.toLocaleString(); // 총 가격 열 업데이트
        }
    }

    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();

    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();

    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
}

function calculateTotal() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var totalPriceCell = row.cells[4];
            totalSelectedPrice += parseInt(totalPriceCell.textContent.replace(/,/g, ''));
        }
    }

    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();

    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();

    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
}





























<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ include file="../header.jsp" %>

<style>

    .cart-container {
        background-color: #fff;
        padding: 50px;   
    }
	
    .order_wrap {
        max-width: 1500px;
        margin: 0 auto;
    }
	
	/* 장바구니 라인 */
    .order_tit {
    	border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        margin-bottom: 30px;
    }

    .order_tit h2 {
        font-size: 30px;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    .order_tit ol {
        list-style: none;
        display: flex;
        justify-content: right;
    }

    .order_tit ol li {
        display: flex;
        align-items: center;
        margin-right: 30px;
        font-size: 20px;
        color: #666;
    }

    .order_tit ol li.page_on span {
        font-weight: bold;
        color: #333;
    }

    .order_tit ol li img {
        margin-left: 5px;
        vertical-align: middle;
    }
    /* 장바구니 라인 end */

    /* 장바구니 상품 공간 */
    .cart_cont {
    	border-bottom: 0.5px solid #000; /* 아래쪽 선 */
        background-color: #fff;
        padding: 20px;
        margin-bottom: 50px;
        
    }

    .no_data {
        text-align: center;
        font-size: 20px;
        color: #666;
        margin-top: 20px;
    }

	/* 총 금액 계산하는 곳 */
    .price_sum {
        background-color: #fff;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .price_sum_list {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .price_sum_list dl {
        margin-bottom: 10px;
    }

    .price_sum_list dl dt {
        font-size: 16px;
        font-weight: bold;
        color: #333;
    }

    .price_sum_list dl dd {
        font-size: 16px;
        color: #333;
    }

    .price_sum_list span img {
        margin: 0 10px;
    }

    .price_sum_list dl.price_total {
        font-size: 18px;
    }

    .price_sum_list dl.price_total dt {
        color: #333;
        font-weight: bold;
    }

    .price_sum_list dl.price_total dd {
        font-size: 18px;
        color: #333;
        font-weight: bold;
    }
    /* 총 금액 계산하는 곳 end */
    
    /* 쇼핑계속하기 */
    .btn_left_box {
        text-align: left;
        margin-top: 20px;
    }

    .shop_go_link {
        font-size: 20px;
        color: #333;
        text-decoration: none;
    }

    .shop_go_link em {
        font-style: normal;
        font-weight: bold;
    }
	/* 쇼핑계속하기 end */

	/* 테이블 헤더와 바디의 내용 가운데 정렬 */
    .table-active, .table-hover tbody {
        text-align: center;
        vertical-align: middle;
    }
</style>
<!-- 본문 시작 cart/list.jsp -->
<div class="cart-container">
	<div class="content_box">
	    <div class="order_wrap">
	    
	        <div class="order_tit">
	            <h2>장바구니</h2>
	            <ol>
	                <li class="page_on"><span>01</span> 장바구니 <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="장바구니진행 중"></span></li>
	                <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="주문서작성/결제대기"></span></li>
	                <li><span>03</span> 주문완료</li>
	            </ol>
	        </div>
	        <!-- //order_tit -->
	
	        <div class="cart_cont">
	            <form id="Cartfrm" name="Cartfrm" method="post">
	            <!-- 장바구니 상품리스트 시작 -->
				<div class="row">
					<div class="col-sm-12">
						<table class="table table-hover">
							<thead class="table-active">
								<tr>
									<th><input type="checkbox" id="selectAllCheckbox" onchange="toggleCheckboxes(this.checked)"></th>
									<th>상품 정보</th>	
									<th>수량</th>
									<th>가격</th>
									<th>총 가격</th>	
									<th>삭제</th>
								</tr>					
							</thead>
							<tbody>
							    <c:forEach items="${cartList}" var="cart">
							        <tr>
							            <td><input type="checkbox" name="selectedItems" value="${cart.cartid}" onchange="calculateTotal()"></td>
							            <td>
                                        <c:forEach items="${goodsList}" var="goods">
	                                        <c:if test="${cart.goodsid eq goods.goodsid}">
		                                        <div class="product-image">
			                                        <c:if test="${not empty goods.filename}">
			                                        	<a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
			                                        	<img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
			                                        </c:if>
		                                        </div>
		                                        <br>
	                                        	<span>${goods.productname}</span>
	                                        	<span>${goods.size}</span>
	                                        </c:if>
                                        </c:forEach>
                                        </td>
							            <td>
										    <button type="button" onclick="decrementQuantity(this)">-</button>
										    <input type="text" class="quantity-input" value="${cart.quantity}" readonly>
										    <button type="button" onclick="incrementQuantity(this)">+</button>
										</td>
							            <td>${cart.unitprice}</td>
							            <td>${cart.totalprice}</td>
							            <td><button type="button" onclick="deleteItem(${cart.cartid})">삭제하기</button></td>
							        </tr>
							    </c:forEach>
							</tbody>
						</table>
					</div><!-- col end -->
				</div><!-- row end -->
	                <!-- cart_cont_list -->
	                <!-- 장바구니 상품리스트 끝 -->
	
	                <p class="no_data" id="noDataMessage" style="display: none;">장바구니에 담겨있는 상품이 없습니다.</p>
	            </form>
	        </div>
	        <!-- //cart_cont -->
	        
	        <div class="price_sum">
	        	<div class="price_sum_cont">
		            <div class="price_sum_list">
		            	<dl>
                            <dt>총 <strong id="totalSelectedCount">0</strong> 개의 상품금액 </dt>
                            <dd><strong id="totalSelectedPrice">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_plus.png" alt="더하기" /></span>
                        <dl>
                            <dt>배송비</dt>
                            <dd><strong id="totalDeliveryCharge">0</strong>원</dd>
                        </dl>
                        <span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/order/order_price_total.png" alt="합계" /></span>
                        <dl class="price_total">
                            <dt>합계</dt>
                            <dd><strong id="totalSettlePrice">0</strong>원</dd>
                        </dl>
		            </div>
	            	<em id="deliveryChargeText" class="tobe_mileage"></em>
		        </div>
		        <!-- price_sum_cont end-->
	    	</div>
	        <!-- price_sum end -->
	        <div class="btn_left_box">
	        	<a href="/goods/list" class="shop_go_link"><em>&lt; 쇼핑 계속하기</em></a>
	        </div>
	    </div>
	    <!-- order_wrap end-->
	



























// 전체 선택 체크박스 클릭 시 모든 체크박스를 선택 또는 해제하는 함수
function toggleCheckboxes(checked) {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = checked;
    }
    calculateTotal();
}

// 수량 증가 함수
function incrementQuantity(button) {
    var input = button.parentNode.querySelector('.quantity-input');
    var newValue = parseInt(input.value) + 1;
    input.value = newValue;
    updateTotalPrice();
}

// 수량 감소 함수
function decrementQuantity(button) {
    var input = button.parentNode.querySelector('.quantity-input');
    var newValue = parseInt(input.value) - 1;
    if (newValue >= 0) {
        input.value = newValue;
        updateTotalPrice();
    }
}

// 수량 변경에 따른 총 가격 업데이트 함수
function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPrice = parseInt(row.cells[4].textContent.replace('원', '').replace(',', '')); // 단가가 표시된 셀 인덱스를 가정
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.cells[5].textContent = totalPrice.toLocaleString() + '원'; // 총 가격 열 업데이트
        }
    }

    // 화면에 표시되는 총합 업데이트
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString() + '원';

    // 배송비 계산 및 총 결제 가격 업데이트
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString() + '원';

    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString() + '원';
}

// 수량 입력 변경 이벤트 리스너
document.addEventListener("DOMContentLoaded", function() {
    var quantityInputs = document.querySelectorAll('.quantity-input');
    for (var input of quantityInputs) {
        input.addEventListener('change', updateTotalPrice);
    }

    var cartItems = document.getElementsByName('selectedItems');
    if (cartItems.length === 0) {
        document.getElementById('noDataMessage').style.display = 'block';
    }
});

// 선택된 상품의 개수와 총 가격을 계산하여 표시하는 함수
function calculateTotal() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var totalPriceCell = row.cells[5];
            totalSelectedPrice += parseInt(totalPriceCell.textContent.replace('원', '').replace(',', ''));
        }
    }

    // 상품금액 표시
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString() + '원'; // 콤마(,) 표시 추가

    // 배송비 계산
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString() + '원';

    // 합계 계산
    var totalSettlePrice

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // 수량 변경에 따른 총 가격 업데이트 함수
function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPrice = parseInt(row.cells[4].textContent.replace('원', '').replace(',', '')); // 단가가 표시된 셀 인덱스를 가정
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.cells[5].textContent = formatPrice(totalPrice); // 총 가격 열 업데이트
        }
    }

    // 화면에 표시되는 총합 업데이트
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = formatPrice(totalSelectedPrice);
    
    // 배송비 계산 및 총 결제 가격 업데이트
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = formatPrice(deliveryCharge);
    
    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = formatPrice(totalSettlePrice);
}

// 금액 포맷 함수
function formatPrice(price) {
    return price.toLocaleString() + '원';
}






// 선택된 상품의 개수와 총 가격을 계산하여 표시하는 함수
function calculateTotal() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var totalPriceCell = row.cells[5];
            totalSelectedPrice += parseInt(totalPriceCell.textContent.replace('원', '').replace(',', ''));
        }
    }

    // 상품금액 표시
    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = formatPrice(totalSelectedPrice);

    // 배송비 계산
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = formatPrice(deliveryCharge);
    
    // 합계 계산
    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = formatPrice(totalSettlePrice);
}




























.item-card {
    position: relative;
}

.sold-out {
    opacity: 0.7; /* 품절 상품의 투명도를 줄입니다. */
    pointer-events: none; /* 클릭 이벤트 비활성화 */
    filter: grayscale(100%); /* 회색으로 만듭니다. */
    /* 추가적으로 품절 상품의 스타일을 지정할 수 있습니다. */
}

.sold-out-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.3); /* 투명 회색 배경 */
}

.sold-out-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 0, 0, 0.7); /* 반투명 빨간 배경 */
    color: white;
    font-weight: bold;
    padding: 5px 10px;
    border-radius: 4px;
}





<div class="goodsItem">
    <div class="item-card ${'Y' eq row.issoldout ? 'sold-out' : ''}" data-category="${row.category}">
        <c:choose>
            <c:when test="${not empty row.filename && row.filename != '-'}">
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/storage/goods/${row.filename}"
                         class="img-responsive margin">
                </a>
            </c:when>
            <c:otherwise>
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/images/default_product_image.jpg"
                         alt="등록된 사진 없음" class="small-image">
                </a>
            </c:otherwise>
        </c:choose>
        <p>
            <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">${row.productname}</a>
        	<p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
        </p>

        <c:choose>
            <c:when test="${'Y' eq row.issoldout}">
                <div class="sold-out-overlay"></div>
                <p class="sold-out-text">품절</p>
            </c:when>
            <c:otherwise>
                <p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
            </c:otherwise>
        </c:choose>
    </div>
</div>
















<div class="goodsItem">
    <div class="item-card ${'Y' eq row.issoldout && not 'M' eq user.membergrade ? 'sold-out' : ''}" data-category="${row.category}">
        <c:choose>
            <c:when test="${not empty row.filename && row.filename != '-'}">
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/storage/goods/${row.filename}"
                         class="img-responsive margin">
                </a>
            </c:when>
            <c:otherwise>
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">
                    <img src="${pageContext.request.contextPath}/images/default_product_image.jpg"
                         alt="등록된 사진 없음" class="small-image">
                </a>
            </c:otherwise>
        </c:choose>
        <p>
            <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${row.goodsid}">${row.productname}</a>
            <p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
        </p>

        <c:choose>
            <c:when test="${'Y' eq row.issoldout && not 'M' eq user.membergrade}">
                <div class="sold-out-overlay"></div>
                <p class="sold-out-text">품절</p>
            </c:when>
            <c:otherwise>
                <p><fmt:formatNumber value="${row.price}" pattern="#,###원" /></p>
            </c:otherwise>
        </c:choose>
    </div>
</div>

<script>
    // JavaScript를 사용하여 특정 조건에 따라 클릭 가능 여부를 설정합니다.
    document.addEventListener("DOMContentLoaded", function() {
        var itemCards = document.querySelectorAll('.item-card');
        
        itemCards.forEach(function(card) {
            if (card.classList.contains('sold-out')) {
                // 품절 상품이면서, 회원 등급이 'M'인 사용자인 경우 클릭 가능하도록 변경합니다.
                if (user.membergrade === 'M') {
                    card.classList.remove('sold-out');
                    card.style.opacity = '1';
                    card.style.pointerEvents = 'auto';
                }
            }
        });
    });
</script>















<td>
    <c:forEach items="${goodsList}" var="goods">
        <c:if test="${cart.goodsid eq goods.goodsid}">
            <c:choose>
                <c:when test="${goods.size eq 'FREE'}">
                    FREE
                </c:when>
                <c:otherwise>
                    <select class="size-select" onchange="updateTotalPrice(this)">
                        <option value="S" <c:if test="${goods.size eq 'S'}">selected</c:if>>S</option>
                        <option value="M" <c:if test="${goods.size eq 'M'}">selected</c:if>>M</option>
                        <option value="L" <c:if test="${goods.size eq 'L'}">selected</c:if>>L</option>
                        <option value="XL" <c:if test="${goods.size eq 'XL'}">selected</c:if>>XL</option>
                    </select>
                </c:otherwise>
            </c:choose>
        </c:if>
    </c:forEach>
</td>

<td>
    <c:forEach items="${goodsList}" var="goods">
        <c:if test="${cart.goodsid eq goods.goodsid}">
            <c:choose>
                <c:when test="${goods.size eq 'FREE'}">
                    FREE
                </c:when>
                <c:otherwise>
                    <span>${goods.size}</span> <!-- 기존 사이즈 표시 -->
                </c:otherwise>
            </c:choose>
        </c:if>
    </c:forEach>
</td>


<td>
    <c:forEach items="${goodsList}" var="goods">
        <c:if test="${goodsDto.goodsid eq goodsDto.goodsid}">
            <c:choose>
                <c:when test="${goodsDto.size eq 'FREE'}">
                    FREE
                </c:when>
                <c:otherwise>
                    <select name="size">
                        <option value="S" <c:if test="${goodsDto.size eq 'S'}">selected</c:if>>S</option>
                        <option value="M" <c:if test="${goodsDto.size eq 'M'}">selected</c:if>>M</option>
                        <option value="L" <c:if test="${goodsDto.size eq 'L'}">selected</c:if>>L</option>
                        <option value="XL" <c:if test="${goodsDto.size eq 'XL'}">selected</c:if>>XL</option>
                    </select>
                </c:otherwise>
            </c:choose>
        </c:if>
    </c:forEach>
</td>













<!-- 선택한 상품만 삭제하기 버튼 -->
<button type="button" onclick="deleteSelectedItems()" class="delete-button">선택한 상품만 삭제하기</button>
<!-- 전체 삭제하기 버튼 -->
<button type="button" onclick="deleteAllItems()" class="delete-button">전체 삭제하기</button>


















// 선택한 상품만 삭제하기 함수
function deleteSelectedItems() {
    var selectedItems = document.querySelectorAll('input[name="selectedItems"]:checked');
    if (selectedItems.length > 0) {
        if (confirm("선택한 상품을 삭제하시겠습니까?")) {
            var selectedIds = [];
            selectedItems.forEach(function(item) {
                selectedIds.push(item.value);
            });
            location.href = '/cart/delete?cartid=' + selectedIds.join(',');
        }
    } else {
        alert("삭제할 상품을 선택하세요.");
    }
}

// 전체 삭제하기 함수
function deleteAllItems() {
    var allCheckboxes = document.querySelectorAll('input[name="selectedItems"]');
    if (allCheckboxes.length > 0) {
        var selectAllCheckbox = document.getElementById("selectAllCheckbox");
        selectAllCheckbox.checked = true;
        toggleCheckboxes(true); // 모든 체크박스를 선택 상태로 변경

        if (confirm("전체 상품을 삭제하시겠습니까?")) {
            var allIds = [];
            allCheckboxes.forEach(function(item) {
                allIds.push(item.value);
            });
            location.href = '/cart/delete?cartid=' + allIds.join(',');
        } else {
            // 사용자가 취소 버튼을 클릭한 경우 모든 체크박스를 해제 상태로 변경
            selectAllCheckbox.checked = false;
            toggleCheckboxes(false);
        }
    } else {
        alert("삭제할 상품이 없습니다.");
    }
}

// 기존 함수 수정
function toggleCheckboxes(checked) {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = checked;
    }
    calculateTotal();
}









// 선택된 상품 삭제 함수
function deleteSelectedItems() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("삭제할 상품을 선택해주세요.");
        return;
    }

    if (confirm("선택한 상품을 삭제하시겠습니까?")) {
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

// 전체 상품 삭제 함수
function deleteAllItems() {
    if (confirm("전체 상품을 삭제하시겠습니까?")) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = true;
        }
        var selectedItems = [];
        for (var checkbox of checkboxes) {
            selectedItems.push(checkbox.value);
        }
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

// Attach the functions to the buttons
document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
    document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
});


<!-- 선택한 상품 삭제 버튼 -->
<div class="button-container">
    <button type="button" id="deleteSelectedButton" class="delete-button">선택한 상품만 삭제하기</button>
    <!-- 전체 삭제 버튼 -->
    <button type="button" id="deleteAllButton" class="delete-button">전체 삭제하기</button>
</div>


/* 쇼핑계속하기 */
.btn_left_box {
    text-align: left;
    margin-top: 20px;
}

.button-container {
    display: flex;
    justify-content: flex-end; /* Align items to the right */
    margin-top: 20px; /* Adjust margin as needed */
}

.delete-button {
    font-size: 18px;
    padding: 10px 20px; /* padding으로 크기 조정 */
    background-color: #f1f1f1; /* 버튼 배경 색상 */
    border: 1px solid #ccc; /* 버튼 테두리 */
    border-radius: 4px; /* 모서리 둥글게 */
    cursor: pointer; /* 마우스 커서 변경 */
    margin: 0 5px; /* 버튼 좌우 여백 */
}

.delete-button:hover {
    background-color: #e1e1e1; /* 버튼 호버 시 배경 색상 */
}

.delete-button:active {
    background-color: #d1d1d1; /* 버튼 클릭 시 배경 색상 */
    border-color: #999; /* 버튼 클릭 시 테두리 색상 */
}















import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class CartController {

    @RequestMapping(value = "/cart/delete", method = RequestMethod.GET)
    public String deleteItems(@RequestParam List<Integer> cartid) {
        // Handle the deletion logic here
        for (int id : cartid) {
            // Delete the item with the given id
            // e.g., cartService.deleteItemById(id);
        }
        return "redirect:/cart/list"; // Redirect to the cart list page after deletion
    }
}





<!-- 선택한 상품 삭제 버튼 -->
<button type="button" id="deleteSelectedButton" class="delete-button">선택한 상품만 삭제하기</button>

<!-- 전체 삭제 버튼 -->
<button type="button" id="deleteAllButton" class="delete-button">전체 삭제하기</button>






function deleteSelectedItems() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("삭제할 상품을 선택해주세요.");
        return;
    }

    if (confirm("선택한 상품을 삭제하시겠습니까?")) {
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

function deleteAllItems() {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = true;
    }
    deleteSelectedItems();
}

// Attach the functions to the buttons
document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
    document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
});









function addToCart() {
    // 수량 입력 요소 확인
    var quantityInput = document.getElementById('quantity-input');
    if (!quantityInput) {
        console.error('수량 입력 요소를 찾을 수 없습니다');
        return;
    }

    var quantity = parseInt(quantityInput.value); // 수량을 정수로 변환

    // 총 가격 요소 확인
    var totalPriceElement = document.getElementById('total-price');
    if (!totalPriceElement) {
        console.error('총 가격 요소를 찾을 수 없습니다');
        return;
    }

    var totalPriceText = totalPriceElement.innerText;
    var totalPrice = parseInt(totalPriceText.replace(/,/g, '')); // 쉼표 제거 후 정수로 변환

    // formQuantity 입력 요소 확인
    var formQuantity = document.getElementById('form-quantity');
    if (!formQuantity) {
        console.error('장바구니 수량 입력 필드를 찾을 수 없습니다');
        return;
    }

    // formTotalPrice 입력 요소 확인
    var formTotalPrice = document.getElementById('form-totalprice');
    if (!formTotalPrice) {
        console.error('장바구니 총 가격 입력 필드를 찾을 수 없습니다');
        return;
    }

    // 세션 스코프에서 userid 가져오기
    var userId = '${sessionScope.userID}';
    console.log('사용자 아이디:', userId);
    
    // 폼 필드에 값 설정
    formQuantity.value = quantity;
    formTotalPrice.value = totalPrice;

    // Ajax를 사용하여 장바구니에 상품 추가하는 코드 작성 가능

    // 디버깅을 위한 콘솔 출력
    console.log('수량:', quantity);
    console.log('총 가격:', totalPrice);

    // 모달 창 띄우기
    showCartModal();
}


function goToCart() {
    document.getElementById('addToCartForm').submit(); // 폼 제출 후 장바구니 목록 페이지 URL로 이동
}


























<script>
    // 장바구니에 상품 추가 함수
    function addToCart() {
        // 수량 입력 요소 가져오기
        var quantityInput = document.getElementById('quantity-input');
        if (!quantityInput) {
            console.error('수량 입력 요소를 찾을 수 없습니다');
            return;
        }

        // 수량 값 가져오기
        var quantity = parseInt(quantityInput.value);

        // 사용자 아이디 가져오기
        var userId = '${sessionScope.userID}';

        // 상품 정보 가져오기
        var goodsId = '${goodsDto.goodsid}';
        var unitPrice = ${goodsDto.price};
        var totalPrice = quantity * unitPrice;

        // AJAX를 이용한 서버로의 요청
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '${pageContext.request.contextPath}/cart/insert', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    // 성공적으로 추가되면 모달창 띄우기
                    showCartModal();
                } else {
                    console.error('장바구니 추가에 실패했습니다.');
                }
            }
        };
        
        // 요청 본문 생성
        var params = 'userid=' + encodeURIComponent(userId) +
                     '&goodsid=' + encodeURIComponent(goodsId) +
                     '&quantity=' + encodeURIComponent(quantity) +
                     '&unitprice=' + encodeURIComponent(unitPrice) +
                     '&totalprice=' + encodeURIComponent(totalPrice);
        
        // 요청 보내기
        xhr.send(params);
    }

    // 모달창 보이기
    function showCartModal() {
        var modal = document.getElementById('cartModal');
        modal.style.display = 'block';
    }

    // 쇼핑 계속하기
    function continueShopping() {
        var modal = document.getElementById('cartModal');
        modal.style.display = 'none';
        window.location.href = '/goods/list'; // 쇼핑 계속하기 페이지로 이동
    }

    // 장바구니로 이동
    function goToCart() {
        var addToCartForm = document.getElementById('addToCartForm');
        addToCartForm.submit(); // 폼 제출하여 장바구니 페이지로 이동
    }

    // 수량 업데이트
    function updateQuantity(change) {
        var quantityInput = document.getElementById('quantity-input');
        var currentValue = parseInt(quantityInput.value) || 1; // 기본값 1 설정
        var newValue = currentValue + change;

        if (newValue < 1) {
            newValue = 1;
        }

        quantityInput.value = newValue;

        // 총 가격 업데이트
        updateTotalPrice();
    }

















// 장바구니에 상품을 추가하는 함수
function addToCart() {
    // 수량 입력 요소 확인
    var quantityInput = document.getElementById('quantity-input');
    if (!quantityInput) {
        console.error('수량 입력 요소를 찾을 수 없습니다');
        return;
    }

    var quantity = parseInt(quantityInput.value); // 수량을 정수로 변환

    // 총 가격 요소 확인
    var totalPriceElement = document.getElementById('total-price');
    if (!totalPriceElement) {
        console.error('총 가격 요소를 찾을 수 없습니다');
        return;
    }

    var totalPriceText = totalPriceElement.innerText;
    var totalPrice = parseInt(totalPriceText.replace(/[^0-9]/g, '')); // 숫자 이외의 문자 제거 후 정수로 변환

    // formQuantity 입력 요소 확인
    var formQuantity = document.getElementById('form-quantity');
    if (!formQuantity) {
        console.error('장바구니 수량 입력 필드를 찾을 수 없습니다');
        return;
    }

    // formTotalPrice 입력 요소 확인
    var formTotalPrice = document.getElementById('form-totalprice');
    if (!formTotalPrice) {
        console.error('장바구니 총 가격 입력 필드를 찾을 수 없습니다');
        return;
    }

    // 세션 스코프에서 userid 가져오기
    var userId = '${sessionScope.userID}';
    console.log('사용자 아이디:', userId);

    // 폼 필드에 값 설정
    formQuantity.value = quantity;
    formTotalPrice.value = totalPrice;

    // 디버깅을 위한 콘솔 출력
    console.log('수량:', quantity);
    console.log('총 가격:', totalPrice);

    // 장바구니에 추가된 상품을 표시하기 위한 모달 열기
    showCartModal();
}

// 쇼핑 계속하기 버튼 클릭 시 동작
function continueShopping() {
    // 장바구니 추가 함수 호출
    addToCart();

    // 쇼핑 계속하기 페이지로 이동
    window.location.href = '/goods/list'; // 쇼핑 계속하기 페이지 URL로 수정
}










function loadContent(tabId) {
    try {
        if (tabId === 'info04') {
            // 리뷰 탭이 클릭되었을 때
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    // 서버로부터 받은 리뷰 목록을 info04 탭 내용에 출력
                    document.getElementById('info04').innerHTML = this.responseText;
                }
            };
            xhttp.open("GET", "${pageContext.request.contextPath}/review/list", true);
            xhttp.send();
        } else {
            // 다른 탭을 클릭했을 때는 기존의 loadContent 로직과 동일하게 처리
            var tabContents = document.querySelectorAll('.tabcont');
            tabContents.forEach(function(content) {
                content.style.display = 'none';
            });
            var selectedTabContent = document.getElementById(tabId);
            selectedTabContent.style.display = 'block';

            var tabMenuItems = document.querySelectorAll('.info-tab li');
            tabMenuItems.forEach(function(item) {
                item.classList.remove('on');
            });
            var selectedTabMenuItem = document.querySelector('.info-tab li[data-tab="' + tabId + '"]');
            selectedTabMenuItem.classList.add('on');
        }
    } catch (error) {
        console.error('loadContent 함수에서 오류 발생:', error);
        alert('콘텐츠를 로드하는 데 실패했습니다. 나중에 다시 시도해주세요.');
    }
}













<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>상품후기</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="review-tabs">
        <button class="tab-button active" onclick="showTab('review')">상품후기</button>
        <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기</button>
        <button class="tab-button" onclick="showTab('write-review')">상품 글쓰기</button>
    </div>

    <div id="review" class="tab-content">
        <div class="review-container">
            <div class="review-header">
                <div class="review-author">
                    <img src="path_to_avatar_image.jpg" alt="Avatar" class="author-avatar">
                    <span class="author-name">사용자 이름</span>
                </div>
                <div class="review-date">2024-07-09</div>
            </div>
            <div class="review-rating">
                ★★★★☆
            </div>
            <div class="review-content">
                여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
            </div>
        </div>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        상품 전체 보기 내용
    </div>

    <div id="write-review" class="tab-content" style="display: none;">
        상품 글쓰기 내용
    </div>

    <script>
        function showTab(tabId) {
            var tabs = document.getElementsByClassName('tab-content');
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].style.display = 'none';
            }
            document.getElementB




body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    padding: 20px;
}

.review-tabs {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 20px;
}

.tab-button {
    background-color: #f1f1f1;
    border: 1px solid #ddd;
    padding: 10px 20px;
    cursor: pointer;
    margin-right: 10px;
    border-radius: 5px;
    font-size: 16px;
}

.tab-button.active {
    background-color: #fff;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.tab-content {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.review-container {
    border: 1px solid #ddd;
    padding: 20px;
    margin: 20px 0;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.review-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.review-author {
    display: flex;
    align-items: center;
}

.author-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    margin-right: 10px;
}

.author-name {
    font-weight: bold;
    color: #333;
}

.review-date {
    color: #999;
}

.review-rating {
    margin-bottom: 10px;
    color: #f5c518; /* 평점 색상 */
    font-size: 20px;
}

.review-content {
    font-size: 16px;
    color: #333;
}









<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>상품후기</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="review-tabs">
        <button class="tab-button active" onclick="showTab('review')">상품후기</button>
        <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기</button>
        <button class="tab-button" onclick="showTab('write-review')">상품 글쓰기</button>
    </div>

    <div id="review" class="tab-content">
        <div class="review-list">
            <div class="review-summary" onclick="toggleReviewDetails('review1')">
                <div class="review-rating">★★★★☆</div>
                <div class="review-title">좋은 상품입니다</div>
                <div class="review-author">사용자 이름</div>
                <div class="review-date">2024-07-09</div>
            </div>
            <div id="review1" class="review-details">
                <div class="review-content">
                    여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                </div>
                <img src="path_to_image.jpg" alt="Review Image" class="review-image">
                <div class="review-comments">
                    <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                    <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                </div>
            </div>

            <div class="review-summary" onclick="toggleReviewDetails('review2')">
                <div class="review-rating">★★★☆☆</div>
                <div class="review-title">보통입니다</div>
                <div class="review-author">다른 사용자</div>
                <div class="review-date">2024-07-08</div>
            </div>
            <div id="review2" class="review-details">
                <div class="review-content">
                    상품이 보통입니다.
                </div>
                <img src="path_to_image2.jpg" alt="Review Image" class="review-image">
                <div class="review-comments">
                    <div class="comment">댓글 1: 동의합니다.</div>
                </div>
            </div>
        </div>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        상품 전체 보기 내용
    </div>

    <div id="write-review" class="tab-content" style="display: none;">
        상품 글쓰기 내용
    </div>

    <script>
        function showTab(tabId) {
            var tabs = document.getElementsByClassName('tab-content');
            for (var i = 0; i < tabs.length; i++) {
                tabs[i].style.display = 'none';
            }
            document.getElementById(tabId).style.display = 'block';

            var buttons = document.getElementsByClassName('tab-button');
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].classList.remove('active');
            }
            event.currentTarget.classList.add('active');
        }

        function toggleReviewDetails(reviewId) {
            var details = document.getElementById(reviewId);
            if (details.style.display === 'none' || details.style.display === '') {
                details.style.display = 'block';
            } else {
                details.style.display = 'none';
            }
        }
    </script>
</body>
</html>






body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    padding: 20px;
}

.review-tabs {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 20px;
}

.tab-button {
    background-color: #f1f1f1;
    border: 1px solid #ddd;
    padding: 10px 20px;
    cursor: pointer;
    margin-right: 10px;
    border-radius: 5px;
    font-size: 16px;
}

.tab-button.active {
    background-color: #fff;
    border-bottom: 2px solid #007bff;
    color: #007bff;
}

.tab-content {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.review-list {
    margin-top: 20px;
}

.review-summary {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #f1f1f1;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    margin-bottom: 10px;
}

.review-summary:hover {
    background-color: #e1e1e1;
}

.review-rating, .review-title, .review-author, .review-date {
    flex: 1;
    text-align: center;
}

.review-details {
    display: none;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    margin-bottom: 10px;
}

.review-content {
    margin-bottom: 10px;
}

.review-image {
    max-width: 100%;
    height: auto;
    margin-bottom: 10px;
}

.review-comments {
    margin-top: 10px;
}

.comment {
    background-color: #f9f9f9;
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Review List</title>
    <style>
        .review-summary {
            cursor: pointer;
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 5px;
        }
        .review-details {
            display: none;
            padding: 10px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
        }
        .review-image {
            width: 100px;
            height: auto;
            display: block;
            margin-top: 10px;
        }
        .comment {
            margin-top: 5px;
        }
    </style>
</head>
<body>

<div id="review-container"></div>

<script>
    const reviews = [
        {
            rating: '★★★★☆',
            title: '좋은 상품입니다',
            author: '사용자 이름',
            date: '2024-07-09',
            content: '여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!',
            image: 'path_to_image.jpg',
            comments: [
                '댓글 1: 정말 좋은 리뷰네요!',
                '댓글 2: 저도 같은 경험을 했습니다.'
            ]
        },
        {
            rating: '★★★☆☆',
            title: '괜찮은 상품입니다',
            author: '다른 사용자',
            date: '2024-07-08',
            content: '상품이 나쁘지 않습니다. 괜찮아요.',
            image: 'path_to_another_image.jpg',
            comments: [
                '댓글 1: 저도 비슷하게 느꼈어요.',
                '댓글 2: 괜찮은 리뷰입니다.'
            ]
        }
        // 추가 리뷰 데이터를 여기에 추가
    ];

    function toggleReviewDetails(reviewId) {
        const reviewDetails = document.getElementById(reviewId);
        reviewDetails.style.display = reviewDetails.style.display === 'none' ? 'block' : 'none';
    }

    function renderReviews() {
        const reviewContainer = document.getElementById('review-container');
        reviews.forEach((review, index) => {
            const reviewId = `review${index}`;
            const reviewSummary = `
                <div class="review-summary" onclick="toggleReviewDetails('${reviewId}')">
                    <div class="review-rating">${review.rating}</div>
                    <div class="review-title">${review.title}</div>
                    <div class="review-author">${review.author}</div>
                    <div class="review-date">${review.date}</div>
                </div>
                <div id="${reviewId}" class="review-details">
                    <div class="review-content">${review.content}</div>
                    <img src="${review.image}" alt="Review Image" class="review-image">
                    <div class="review-comments">
                        ${review.comments.map(comment => `<div class="comment">${comment}</div>`).join('')}
                    </div>
                </div>
            `;
            reviewContainer.innerHTML += reviewSummary;
        });
    }

    document.addEventListener('DOMContentLoaded', renderReviews);
</script>

</body>
</html>
    
    
    function openPopup(url) { // 상품 글쓰기
        window.open(url, "popupWindow", "width=1200,height=800,scrollbars=yes");
    }
    
    function openPopup(url) {
    var width = 1200;
    var height = 800;

    // 화면의 중앙에 위치시키기 위한 좌표 계산
    var left = (screen.width - width) / 2;
    var top = (screen.height - height) / 2;

    // 창을 중앙에 띄우기
    window.open(url, "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
}
    
    
    
    
    

    

   
   
   
   
   
   
   <!-- review.xml -->

<!-- Insert a new review -->
<insert id="insertReview" parameterType="ReviewDTO">
    INSERT INTO reviews (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
    VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
</insert>

<!-- Select a review by reviewid -->
<select id="selectReviewById" parameterType="String" resultType="ReviewDTO">
    SELECT * FROM reviews WHERE reviewid = #{reviewid}
</select>

<!-- Update a review -->
<update id="updateReview" parameterType="ReviewDTO">
    UPDATE reviews
    SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, reviewdate = #{reviewdate},
        title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}
    WHERE reviewid = #{reviewid}
</update>

<!-- Delete a review -->
<delete id="deleteReview" parameterType="String">
    DELETE FROM reviews WHERE reviewid = #{reviewid}
</delete>

<!-- Select all reviews -->
<select id="selectAllReviews" resultType="ReviewDTO">
    SELECT * FROM reviews
</select>
   
   
   
   
   
   
   
   
  package kr.co.matchday.review;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private SqlSession sqlSession;

    public void insertReview(ReviewDTO review) {
        sqlSession.insert("insert", review);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("selectReviewById", reviewid);
    }

    public void updateReview(ReviewDTO review) {
        sqlSession.update("update", review);
    }

    public void deleteReview(String reviewid) {
        sqlSession.delete("delete", reviewid);
    }

    public List<ReviewDTO> selectAllReviews() {
        return sqlSession.selectList("selectAll");
    }
}
  
  
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.review;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    @GetMapping("/list")
    public String list(Model model) {
        // Fetch all reviews from DAO
        model.addAttribute("reviews", reviewDao.selectAllReviews());
        return "review/list"; // Assuming "review/list" is your view name
    }

    @GetMapping("/write")
    public String writeForm(Model model) {
        model.addAttribute("reviewDto", new ReviewDTO());
        return "review/write"; // Assuming "review/write" is your view name
    }

    // Handle form submission
    // Use POST method for submitting review data
    // Example: @PostMapping("/save")
    // @ModelAttribute binds form data to ReviewDTO object
    // Redirect to list after saving or return to form with errors
    // Adjust as per your actual form and submission needs
  
  
  
  
  
  
  <form name="frmWrite" id="frmWrite" action="${pageContext.request.contextPath}/review/save" method="post" enctype="multipart/form-data">
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.review;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    // Display form for writing a review
    @GetMapping("/write")
    public String writeForm(Model model) {
        model.addAttribute("reviewDto", new ReviewDTO());
        return "review/write"; // Assuming "review/write" is your view name
    }

    // Handle form submission to save a review
    @PostMapping("/save")
    public String saveReview(@ModelAttribute("reviewDto") ReviewDTO reviewDto) {
        // Perform validation or additional logic if needed

        // Save the review using ReviewDAO
        reviewDao.insert(reviewDto);

        // Redirect to list page or any other appropriate page
        return "redirect:/review/list";
    }

    // List reviews
    @GetMapping("/list")
    public String list(Model model) {
        // Fetch all reviews from DAO
        model.addAttribute("reviews", reviewDao.selectAllReviews());
        return "review/list"; // Assuming "review/list" is your view name
    }
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  @PostMapping("/save")
public String saveReview(@ModelAttribute("reviewDto") ReviewDTO reviewDto) {
    // Perform validation or additional logic if needed
    // For example, you can validate the rating field here

    int rating = reviewDto.getRating();
    if (rating < 1 || rating > 10) {
        // Handle validation error, e.g., return to form with error message
        return "review/write"; // Assuming "review/write" is your form view
    }

    // Save the review using ReviewDAO
    reviewDao.insert(reviewDto);

    // Redirect to list page or any other appropriate page
    return "redirect:/review/list";
}
  
  
  
  
  
  
  
  
package kr.co.matchday.review;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private SqlSession sqlSession;

    public void insert(ReviewDTO reviewDto) {
        sqlSession.insert("review.insert", reviewDto);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("review.selectReviewById", reviewid);
    }

    public void update(ReviewDTO reviewDto) {
        sqlSession.update("review.update", reviewDto);
    }

    public void delete(String reviewid) {
        sqlSession.delete("review.delete", reviewid);
    }

    public List<ReviewDTO> list() {
        return sqlSession.selectList("review.selectAll");
    }
}
  
  
  
  
  
  
  
  <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <!-- Insert a new review -->
    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <!-- Select a review by reviewid -->
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>
    
    <!-- Update a review -->
    <update id="update" parameterType="kr.co.matchday.review.ReviewDTO">
        UPDATE review
        SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, reviewdate = #{reviewdate},
            title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}
        WHERE reviewid = #{reviewid}
    </update>
    
    <!-- Delete a review -->
    <delete id="delete" parameterType="String">
        DELETE FROM review WHERE reviewid = #{reviewid}
    </delete>
    
    <!-- Select all reviews -->
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>
</mapper>
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.goods;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.review.ReviewDAO;
import kr.co.matchday.review.ReviewDTO;

@Controller
@RequestMapping("/goods")
public class GoodsCont {

    public GoodsCont() {
        System.out.println("-----GoodsCont() 객체 생성됨");
    }

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private ReviewDAO reviewDao;

    @RequestMapping("/list")
    public ModelAndView list(@RequestParam(defaultValue = "1") int page, HttpSession session) {
        int pageSize = 16;
        int offset = (page - 1) * pageSize;

        int totalRecords = goodsDao.countGoods();
        int totalPages = (int) Math.ceil((double) totalRecords / pageSize);

        Map<String, Integer> params = new HashMap<>();
        params.put("limit", pageSize);
        params.put("offset", offset);

        List<GoodsDTO> goodsList = goodsDao.listWithPaging(params);

        // Fetch reviews for each goods item
        Map<String, List<ReviewDTO>> reviewsMap = new HashMap<>();
        for (GoodsDTO goods : goodsList) {
            List<ReviewDTO> reviews = reviewDao.(goods.getGoodsid());
            reviewsMap.put(goods.getGoodsid(), reviews);
        }

        ModelAndView mav = new ModelAndView();
        mav.setViewName("goods/list");
        mav.addObject("list", goodsList);
        mav.addObject("reviewsMap", reviewsMap);
        mav.addObject("currentPage", page);
        mav.addObject("totalPages", totalPages);

        String userID = (String) session.getAttribute("userID");
        mav.addObject("userID", userID);

        return mav;
    }

    // Other methods remain unchanged

}
  
 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  package kr.co.matchday.review;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    public ReviewDAO() {
        System.out.println("-----ReviewDAO() 객체 생성됨");
    }

    @Autowired
    SqlSession sqlSession;

    public void insert(ReviewDTO reviewDto) {
        sqlSession.insert("review.insert", reviewDto);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("selectReviewById", reviewid);
    }

    public void update(ReviewDTO reviewDto) {
        sqlSession.update("review.update", reviewDto);
    }

    public void delete(String reviewid) {
        sqlSession.delete("review.delete", reviewid);
    }

    public List<ReviewDTO> list() {
        return sqlSession.selectList("review.list");
    }

    public List<ReviewDTO> (String goodsid) {
        return sqlSession.selectList("review.", goodsid);
    }

}
  
  
  
  
  
  
  
  
  
  
  
  
  
  <!-- goods/list.jsp -->
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<!DOCTYPE html>
<html>
<head>
    <title>Goods List</title>
</head>
<body>
    <h1>Goods List</h1>
    <c:forEach var="goods" items="${list}">
        <div>
            <h2>${goods.productname}</h2>
            <p>${goods.description}</p>
            <p>Price: ${goods.price}</p>
            <p>Category: ${goods.category}</p>
            <c:if test="${!empty goods.filename}">
                <img src="/storage/goods/${goods.filename}" alt="${goods.productname}" width="100" height="100">
            </c:if>
            <h3>Reviews:</h3>
            <c:forEach var="review" items="${reviewsMap[goods.goodsid]}">
                <div>
                    <p>Title: ${review.title}</p>
                    <p>Content: ${review.content}</p>
                    <p>Rating: ${review.rating}</p>
                </div>
            </c:forEach>
        </div>
    </c:forEach>
    <!-- Pagination controls -->
    <c:if test="${totalPages > 1}">
        <nav>
            <ul>
                <c:forEach begin="1" end="${totalPages}" var="pageNum">
                    <li><a href="?page=${pageNum}">${pageNum}</a></li>
                </c:forEach>
            </ul>
        </nav>
    </c:if>
</body>
</html>
  
  <c:if test="${empty reviewList}">
    <p>No reviews available.</p>
</c:if>
  
  <script>
    function toggleReviewDetails(reviewId) {
        var reviewDetails = document.getElementById(reviewId);
        if (reviewDetails.style.display === "none") {
            reviewDetails.style.display = "block";
        } else {
            reviewDetails.style.display = "none";
        }
    }
</script>
  
  
  
  <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<html>
<head>
    <title>Review List</title>
    <style>
        .review-details {
            display: none;
        }
    </style>
    <script>
        function toggleReviewDetails(reviewId) {
            var reviewDetails = document.getElementById(reviewId);
            if (reviewDetails.style.display === "none") {
                reviewDetails.style.display = "block";
            } else {
                reviewDetails.style.display = "none";
            }
        }
    </script>
</head>
<body>
    <c:if test="${empty reviewList}">
        <p>No reviews available.</p>
    </c:if>

    <c:forEach var="review" items="${reviewList}">
        <div class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
            <div class="review-rating">${review.rating} 평점</div>
            <div class="review-title">${review.title}</div>
            <div class="review-author">${review.userid}</div>
            <div class="review-date">${review.reviewdate}</div>
        </div>
        <div id="review${review.reviewid}" class="review-details">
            <div class="review-content">${review.content}</div>
            <img src="${review.imagepath}" alt="Review Image" class="review-image">
            <div class="review-comments">
                <c:forEach var="comment" items="${review.comments}">
                    <div class="comment">${comment}</div>
                </c:forEach>
            </div>
        </div>
    </c:forEach>
</body>
</html>
  
  
  
  
  
  
  
  
  
  @RequestMapping("/list")
public ModelAndView list(@RequestParam(defaultValue = "1") int page, HttpSession session) {
    int pageSize = 16;
    int offset = (page - 1) * pageSize;

    int totalRecords = goodsDao.countGoods();
    int totalPages = (int) Math.ceil((double) totalRecords / pageSize);

    Map<String, Integer> params = new HashMap<>();
    params.put("limit", pageSize);
    params.put("offset", offset);

    List<GoodsDTO> goodsList = goodsDao.listWithPaging(params);

    // Fetch reviews for each goods item
    Map<String, List<ReviewDTO>> reviewMap = new HashMap<>();
    for (GoodsDTO goods : goodsList) {
        List<ReviewDTO> reviews = reviewDao.getReviewByGoodsId(goods.getGoodsid());
        reviewMap.put(goods.getGoodsid(), reviews);
    }
    
    ModelAndView mav = new ModelAndView();
    mav.setViewName("goods/list");
    mav.addObject("list", goodsList);
    mav.addObject("currentPage", page);
    mav.addObject("totalPages", totalPages);

    // 세션에서 userID를 가져와서 사용자가 로그인한 상태인지 확인
    String userID = (String) session.getAttribute("userID");
    mav.addObject("userID", userID);

    // reviewList 추가
    mav.addObject("reviewList", reviewMap);

    return mav;
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<c:forEach var="goods" items="${list}">
    <div class="goods-item">
        <h3>${goods.productname}</h3>
        <!-- 상품의 다른 정보 표시 -->

        <!-- 리뷰 표시 -->
        <c:set var="reviewList" value="${reviewList[goods.goodsid]}"/>
        <c:if test="${empty reviewList}">
            <p>No reviews available.</p>
        </c:if>

        <c:forEach var="review" items="${reviewList}">
            <div class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
                <div class="review-rating">${review.rating} 평점</div>
                <div class="review-title">${review.title}</div>
                <div class="review-author">${review.userid}</div>
                <div class="review-date">${review.reviewdate}</div>
            </div>
            <div id="review${review.reviewid}" class="review-details">
                <div class="review-content">${review.content}</div>
                <img src="${review.imagepath}" alt="Review Image" class="review-image">
                <div class="review-comments">
                    <c:forEach var="comment" items="${review.comments}">
                        <div class="comment">${comment}</div>
                    </c:forEach>
                </div>
            </div>
        </c:forEach>
    </div>
</c:forEach>
  
  
  
  
  
  
  
  
  
  <script>
    function toggleReviewDetails(reviewId) {
        var reviewDetails = document.getElementById(reviewId);
        if (reviewDetails.style.display === "none") {
            reviewDetails.style.display = "block";
        } else {
            reviewDetails.style.display = "none";
        }
    }
</script>

<style>
    .review-details {
        display: none;
    }
</style>

















@Controller
public class ReviewController {
    @GetMapping("/review/write")
    public String showReviewWriteForm(@RequestParam("goodsid") int goodsid, Model model) {
        // Assuming you have a service method to get the GoodsDto by its ID
        GoodsDto goodsDto = goodsService.getGoodsById(goodsid);
        model.addAttribute("GoodsDto", goodsDto);
        return "review/write"; // The name of your JSP/HTML file
    }
}




















import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ReviewController {
    private GoodsDao goodsDao;

    // GoodsDao를 생성자를 통해 주입받습니다.
    public ReviewController(GoodsDao goodsDao) {
        this.goodsDao = goodsDao;
    }

    @GetMapping("/review/write")
    public String showReviewWriteForm(Model model) {
        // 상품 목록을 데이터베이스에서 가져옵니다.
        List<GoodsDto> goodsList = goodsDao.getAllGoods();
        model.addAttribute("goodsList", goodsList);
        return "review/write"; // review/write.jsp 또는 review/write.html 파일을 가리킵니다.
    }

    @PostMapping("/review/insert")
    public String insertReview(@RequestParam("goodsid") int goodsid,
                               @RequestParam("title") String title,
                               @RequestParam("content") String content,
                               RedirectAttributes redirectAttributes) {
        // 리뷰 데이터를 처리하는 코드를 작성합니다.
        // 여기서는 데이터베이스에 삽입하는 예시를 들었습니다.
        ReviewDto reviewDto = new ReviewDto();
        reviewDto.setGoodsid(goodsid);
        reviewDto.setTitle(title);
        reviewDto.setContent(content);

        // 리뷰를 데이터베이스에 삽입하는 메서드를 호출합니다.
        insertReviewIntoDatabase(reviewDto);

        // 리다이렉트 할 경로를 지정합니다.
        return "redirect:/review/list"; // 리뷰 목록 페이지로 리다이렉트합니다.
    }

    private void insertReviewIntoDatabase(ReviewDto reviewDto) {
        try (SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession()) {
            sqlSession.insert("review.insert", reviewDto);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ReviewController {
    private GoodsDao goodsDao;

    // GoodsDao를 생성자를 통해 주입받습니다.
    public ReviewController(GoodsDao goodsDao) {
        this.goodsDao = goodsDao;
    }

    @GetMapping("/review/write")
    public String showReviewWriteForm(Model model) {
        // 상품 목록을 데이터베이스에서 가져옵니다.
        List<GoodsDto> goodsList = goodsDao.getAllGoods();
        model.addAttribute("goodsList", goodsList);
        return "review/write"; // review/write.jsp 또는 review/write.html 파일을 가리킵니다.
    }

    @PostMapping("/review/insert")
    public String insertReview(@RequestParam("goodsid") int goodsid,
                               @RequestParam("title") String title,
                               @RequestParam("content") String content,
                               RedirectAttributes redirectAttributes) {
        // 리뷰 데이터를 처리하는 코드를 작성합니다.
        // 여기서는 데이터베이스에 삽입하는 예시를 들었습니다.
        ReviewDto reviewDto = new ReviewDto();
        reviewDto.setGoodsid(goodsid);
        reviewDto.setTitle(title);
        reviewDto.setContent(content);

        // 리뷰를 데이터베이스에 삽입하는 메서드를 호출합니다.
        insertReviewIntoDatabase(reviewDto);

        // 리다이렉트 할 경로를 지정합니다.
        return "redirect:/review/list"; // 리뷰 목록 페이지로 리다이렉트합니다.
    }

    private void insertReviewIntoDatabase(ReviewDto reviewDto) {
        try (SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession()) {
            sqlSession.insert("review.insert", reviewDto);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <label for="goodsid">상품 선택:</label>
    <select name="goodsid" id="goodsid">
        <c:forEach items="${goodsList}" var="goods">
            <option value="${goods.goodsid}">${goods.productname}</option>
        </c:forEach>
    </select>
    <br/>
    <label for="title">제목:</label>
    <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
    <br/>
    <label for="content">내용:</label>
    <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
    <br/>
    <input type="submit" value="리뷰 작성"/>
</form>
  
  
  
<!-- ReviewMapper.xml -->
<mapper namespace="kr.co.matchday.review.ReviewMapper">
    <select id="getReviewByGoodsId" parameterType="java.lang.Long" resultType="kr.co.matchday.review.Review">
        SELECT * FROM review_table WHERE goods_id = #{goodsId}
    </select>
</mapper>

  
  
  
  
  
  import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class GoodsDao {
    private final SqlSession sqlSession;

    public GoodsDao(SqlSession sqlSession) {
        this.sqlSession = sqlSession;
    }

    public List<GoodsDto> getAllGoods() {
        return sqlSession.selectList("goods.getAllGoods");
    }
}

<mapper namespace="goods">
    <select id="getAllGoods" resultType="GoodsDto">
        SELECT goodsid, productname
        FROM goods
    </select>
</mapper>

  
  
  
  
  // ReviewDAO.java
package kr.co.matchday.review;

import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public class ReviewDAO {
    private final ReviewMapper reviewMapper;

    public ReviewDAO(ReviewMapper reviewMapper) {
        this.reviewMapper = reviewMapper;
    }

    public List<Review> getReviewByGoodsId(Long goodsId) {
        return reviewMapper.getReviewByGoodsId(goodsId);
    }
}
  
  
  
  
  
  
  // ReviewMapper.java
package kr.co.matchday.review;

import java.util.List;

public interface ReviewMapper {
    List<Review> getReviewByGoodsId(Long goodsId);
}
  <!-- mybatis-config.xml -->
<configuration>
    <mappers>
        <mapper resource="kr/co/matchday/review/ReviewMapper.xml"/>
        <!-- Other mappers if any -->
    </mappers>
</configuration>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  @GetMapping("/detail")
public ModelAndView detail(@RequestParam("goodsid") String goodsid) {
    ModelAndView mav = new ModelAndView();
    mav.setViewName("goods/detail");

    // Retrieve goods details
    GoodsDTO goodsDto = goodsDao.detail(goodsid);
    mav.addObject("goodsDto", goodsDto);

    // Retrieve related reviews for the goods
    List<ReviewDTO> reviews = reviewDao.getReviewsByGoodsId(goodsid);
    mav.addObject("reviews", reviews);

    return mav;
}
  
  
  
  <!-- goods/detail.jsp -->
<h2>Goods Detail</h2>
<p>Product Name: ${goodsDto.productname}</p>
<p>Description: ${goodsDto.description}</p>
<!-- Display reviews -->
<h3>Reviews</h3>
<ul>
    <c:forEach items="${reviews}" var="review">
        <li>
            <p>Title: ${review.title}</p>
            <p>Content: ${review.content}</p>
            <p>Rating: ${review.rating}</p>
            <!-- Add other review details as needed -->
        </li>
    </c:forEach>
</ul>
  
  
  
  
  
  // In ReviewDAO.java
public List<ReviewDTO> (String goodsid) {
    return sqlSession.selectList("review.", goodsid);
}
  \
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <label for="goodsid">상품 선택:</label>
<select name="goodsid" id="goodsid">
    <c:forEach items="${goodsList}" var="goods">
        <option value="${goods.goodsid}">${goods.productname}</option>
    </c:forEach>
</select>
  
  
  
  
  
  <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <!-- goodsid will be submitted here -->
    <label for="goodsid">상품 선택:</label>
    <select name="goodsid" id="goodsid">
        <c:forEach items="${goodsList}" var="goods">
            <option value="${goods.goodsid}">${goods.productname}</option>
        </c:forEach>
    </select>
    <br/>
    <label for="title">제목:</label>
    <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
    <br/>
    <label for="content">내용:</label>
    <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
    <br/>
    <input type="submit" value="리뷰 작성"/>
</form>
  
  
  
  
  
  @Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    @Autowired
    private GoodsDAO goodsDao;

    @GetMapping("/write")
    public String write(@ModelAttribute("reviewDto") ReviewDTO reviewDto, Model model) {
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        return "review/write";
    }

    @PostMapping("/insert")
    public String insert(@ModelAttribute ReviewDTO reviewDto) {
        // Handle review insertion logic
        reviewDao.insert(reviewDto);
        return "redirect:/review/list";
    }

    @GetMapping("/list")
    public String list(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // Redirect to login page if user is not logged in
        }
        
        List<ReviewDTO> reviewList = reviewDao.list();
        model.addAttribute("reviewList", reviewList);
        return "review/list";
    }
}
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.review.ReviewMapper">

    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <select id="getReviewByGoodsId" parameterType="java.lang.Long" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE goodsid = #{goodsid}
    </select>
    
    <!-- 기타 필요한 매핑들 -->
    
</mapper>
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <mapper namespace="kr.co.matchday.goods.GoodsMapper">
 
     <insert id="insert" parameterType="kr.co.matchday.goods.GoodsDTO">
        INSERT INTO goods(goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo)
        VALUES(#{goodsid}, #{category}, #{productname}, #{description}, #{size}, #{price}, #{stockquantity}, #{issoldout}, #{filename}, #{filesize}, #{regdate}, #{caution}, #{deliveryreturnsexchangesinfo})
    </insert>
    
    <select id="list" resultType="kr.co.matchday.goods.GoodsDTO">
        SELECT goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo
        FROM goods
        ORDER BY productname
    </select>
    
    <!-- 기타 필요한 매핑들 -->
    
 </mapper>
 
 
 
 package kr.co.matchday.review;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class ReviewDAOImpl implements ReviewDAO {

    @Autowired
    private SqlSession sqlSession; // Make sure SqlSession is properly injected

    @Override
    public List<ReviewDTO> getReviewsByGoodsId(String goodsid) {
        return sqlSession.selectList("review.getReviewByGoodsId", goodsid);
    }
}
 
 
 
 
 
 
 package kr.co.matchday.review;

import java.util.List;

public interface ReviewDAO {
    List<ReviewDTO> getReviewsByGoodsId(String goodsid);
}
 
 
 
 
 
 
 
 <select id="getReviewByGoodsId" parameterType="java.lang.Long" resultType="kr.co.matchday.review.ReviewDTO">
    SELECT * FROM review WHERE goodsid = #{goodsid}
</select>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Review Page</title>
    <style>
        .review-summary {
            cursor: pointer;
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px 0;
        }
        .review-details {
            display: none;
            border-top: 1px solid #ccc;
            padding: 10px;
            margin-top: 5px;
        }
        .review-image {
            width: 100px;
            height: 100px;
        }
    </style>
    <script>
        function toggleReviewDetails(id) {
            const reviewDetails = document.getElementById(id);
            if (reviewDetails.style.display === "none") {
                reviewDetails.style.display = "block";
            } else {
                reviewDetails.style.display = "none";
            }
        }

        function loadReviews() {
            const reviews = [
                {
                    rating: 5,
                    title: "Great product",
                    author: "user1",
                    reviewdate: "2023-07-01",
                    content: "I loved this product! Highly recommend.",
                    imagePath: "path_to_image1.jpg",
                    comments: ["동의합니다."]
                },
                {
                    rating: 4,
                    title: "Very good",
                    author: "user2",
                    reviewdate: "2023-07-02",
                    content: "This product is very good, but there's room for improvement.",
                    imagePath: "path_to_image2.jpg",
                    comments: ["좋아요!"]
                }
                // 더 많은 리뷰 데이터를 여기에 추가할 수 있습니다.
            ];

            const reviewContainer = document.getElementById('reviewContainer');
            reviews.forEach((review, index) => {
                const reviewId = 'review' + index;
                const reviewSummary = `
                    <div class="review-summary" onclick="toggleReviewDetails('${reviewId}')">
                        <div class="review-rating">${review.rating} 평점</div>
                        <div class="review-title">${review.title}</div>
                        <div class="review-author">${review.author}</div>
                        <div class="review-date">${review.reviewdate}</div>
                    </div>
                    <div id="${reviewId}" class="review-details">
                        <div class="review-content">${review.content}</div>
                        <img src="${review.imagePath}" alt="Review Image" class="review-image">
                        <div class="review-comments">
                            ${review.comments.map(comment => `<div class="comment">댓글: ${comment}</div>`).join('')}
                        </div>
                    </div>
                `;
                reviewContainer.innerHTML += reviewSummary;
            });
        }

        document.addEventListener('DOMContentLoaded', loadReviews);
    </script>
</head>
<body>
    <div id="reviewContainer"></div>
</body>
</html>
 
 
 
 
 
 
 <div class="review-summary" onclick="toggleReviewDetails('review3')">
    <div class="review-rating">${review.rating}평점</div>
    <div class="review-title">${review.title}</div>
    <div class="review-author">${userid}</div>
    <div class="review-date">${review.reviewdate}</div>
</div>
<div id="review3" class="review-details">
    <div class="review-content">
        ${review.content}
    </div>
    <img src="path_to_image2.jpg" alt="Review Image" class="review-image">
    <div class="review-comments">
        <div class="comment">댓글 1: 동의합니다.</div>
    </div>
</div>
 
 <div class="review-rating">★★★★☆</div>
 
 
 
 
 
 
 
 
 
 
 
 
 
 function toggleReviewDetails(reviewId) {
    var reviewDetails = document.getElementById(reviewId);
    if (reviewDetails.style.display === 'none') {
        reviewDetails.style.display = 'block';
    } else {
        reviewDetails.style.display = 'none';
    }
}
 
 
 
 
 
 function toggleReviewDetails(reviewId) {
    var reviewDetails = document.getElementById(reviewId);
    if (reviewDetails.style.display === 'none') {
        reviewDetails.style.display = 'block';
        console.log("Rating: ★★★★☆"); // 예시로 하드코딩된 평점 출력
    } else {
        reviewDetails.style.display = 'none';
    }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <resultMap id="ReviewWithGoodsMap" type="kr.co.matchday.review.ReviewDTO">
        <id property="reviewid" column="reviewid" />
        <result property="userid" column="userid" />
        <result property="matchid" column="matchid" />
        <result property="goodsid" column="goodsid" />
        <result property="reviewdate" column="reviewdate" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="rating" column="rating" />
        <result property="grantedpoints" column="grantedpoints" />
        <!-- Add additional fields from goods table if needed -->
        <association property="goods" javaType="kr.co.matchday.goods.GoodsDTO">
            <result property="productname" column="productname" />
            <result property="price" column="price" />
            <result property="category" column="category" />
        </association>
    </resultMap>

    <select id="getReviewList" parameterType="String" resultMap="ReviewWithGoodsMap">
        SELECT r.reviewid, r.userid, r.matchid, r.goodsid, r.reviewdate, r.title, r.content, r.rating, r.grantedpoints,
               g.productname, g.price, g.category
        FROM review r
        JOIN goods g ON r.goodsid = g.goodsid
        WHERE r.goodsid = #{goodsid}
    </select>
    
    <!-- Additional SQL statements can be added as needed -->

</mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <select id="getReviewList" parameterType="kr.co.matchday.review.ReviewDTO" resultMap="reviewListResultMap">
        SELECT r.reviewid, r.userid, r.matchid, r.goodsid, r.reviewdate, r.title, r.content, r.rating, r.grantedpoints,
               g.productname, g.price, g.category
        FROM review r
        JOIN goods g ON r.goodsid = g.goodsid
        WHERE r.goodsid = #{goodsid}
    </select>
    
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>
    
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>

    <!-- resultMap 정의 -->
    <resultMap id="reviewListResultMap" type="kr.co.matchday.review.ReviewDTO">
        <id property="reviewid" column="reviewid"/>
        <result property="userid" column="userid"/>
        <result property="matchid" column="matchid"/>
        <result property="goodsid" column="goodsid"/>
        <result property="reviewdate" column="reviewdate"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="grantedpoints" column="grantedpoints"/>
        <!-- goods 객체 매핑 -->
        <association property="goods" javaType="kr.co.matchday.goods.Goods">
            <result property="productname" column="productname"/>
            <result property="price" column="price"/>
            <result property="category" column="category"/>
        </association>
    </resultMap>

</mapper>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 부트스트랩 CSS -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons CDN 추가 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/jquery-3.7.1.min.js"></script>
    <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            padding: 20px;
        }
        .board_write_popup {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .ly_tit {
            margin-bottom: 20px;
            text-align: center;
        }
        .ly_cont {
            margin-bottom: 20px;
        }
        .board_write_box {
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .board_write_table {
            width: 100%;
            margin-bottom: 0;
        }
        .board_write_table th {
            width: 15%;
            text-align: right;
            vertical-align: top;
        }
        .board_write_table td {
            width: 85%;
            padding-left: 10px;
        }
        .write_editor textarea {
            width: 100%;
            min-width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .btn_center_box {
            text-align: center;
        }
        .btn_ly_cancel, .btn_ly_write_ok {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            background-color: #007bff;
            border: 1px solid #007bff;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn_ly_cancel:hover, .btn_ly_write_ok:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
<div class="board_write_popup">
    <div class="ly_tit">
        <h4>상품 후기 쓰기</h4>
    </div>

    <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
        <label for="goodsid">상품 선택:</label>

        <select name="goodsid" id="goodsid">
            <c:forEach items="${goodsList}" var="goods">
                <!-- 특정 goodsid에 해당하는 상품명만 출력 -->
                <c:if test="${goods.goodsid eq 'goods5'}">
                    <option value="${goods.goodsid}">${goods.productname}</option>
                </c:if>
            </c:forEach>
        </select>
        <br/>
        <label for="title">제목:</label>
        <input type="text" name="title" id="title" placeholder="제목을 입력하세요"/>
        <br/>
        <label for="content">내용:</label>
        <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
        <br/>
        <input type="submit" value="리뷰 작성"/>
    </form>

    <div class="ly_cont">
        <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
            <input name="goodsid" id="goodsid" value="${goods.goodsid}">
            <div class="scroll_box">
                <div class="top_item_photo_info">
                    <div class="item_photo_box">
                        <img src="../images/서울 홈 유니폼(앞).jpg" width="300" alt="2024 스틸러스 원정 유니폼" title="2024 스틸러스 원정 유니폼" class="middle">
                    </div>
                    <br>

                    <c:forEach items="${goodsList}" var="goods">
                        <!-- 특정 goodsid에 해당하는 상품명만 출력 -->
                        <c:if test="${goods.goodsid eq 'goods5'}">
                            <div class="item_info_box">
                                <h5>${goods.productname}</h5>
                            </div>
                        </c:if>
                    </c:forEach>

                </div>
                <!-- //top_item_photo_info -->

                <div class="board_write_box">
                    <table class="board_write_table">
                        <colgroup>
                            <col style="width:15%">
                            <col style="width:85%">
                        </colgroup>
                        <tbody>
                        <tr>
                            <th scope="row">리뷰 ID</th>
                            <td>
                                <input type="text" name="reviewid" id="reviewid" class="form-control" placeholder="${goods.productname}리뷰 아이디 입력">
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">작성자</th>
                            <td>
                                <input type="text" name="userid" id="userid" value="${userID}" class="form-control" readonly>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">비밀번호</th>
                            <td>
                                <input type="password" name="writerPw" class="form-control" placeholder="비밀번호 입력">
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">제목</th>
                            <td>
                                <input type="text" name="title" id="title" class="form-control write_title" placeholder="제목 입력">
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">내용</th>
                            <td class="write_editor">
                                <div class="form_element">
                                    <input type="checkbox" name="isSecret" value="y" id="secret">
                                    <label for="secret" class="check_s">비밀글</label>
                                </div>
                                <textarea title="내용 입력" id="editor" class="form-control" name="content" id="content" rows="5" placeholder="내용을 입력하세요"></textarea>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">파일</th>
                            <td id="uploadBox">
                                <div class="file_upload_sec">
                                    <label for="attach"><input type="text" class="file_text form-control" readonly="readonly" placeholder="파일 첨부하기"></label>
                                    <div class="btn_upload_box">
                                        <button type="button" class="btn btn-outline-secondary btn_upload" title="찾아보기"><em>찾아보기</em></button>
                                        <input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
                                        <span class="btn_gray_list">
                                                    <button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
                                                </span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">평점</th>
                            <td>
                                <input type="
 
 
 
 
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 필요한 CSS 및 JavaScript 추가 -->
</head>
<body>
    <div class="item_info_box">
        <c:forEach items="${goodsList}" var="goods">
            <c:if test="${goods.goodsid eq param.goodsid}">
                <h5>${goods.productname}</h5>
            </c:if>
        </c:forEach>
    </div>
    <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
        <label for="goodsid">상품 선택:</label>
        <select name="goodsid" id="goodsid">
            <c:forEach items="${goodsList}" var="goods">
                <option value="${goods.goodsid}" <c:if test="${goods.goodsid eq param.goodsid}">selected</c:if>>${goods.productname}</option>
            </c:forEach>
        </select>
        <br/>
        <label for="title">제목:</label>
        <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
        <br/>
        <label for="content">내용:</label>
        <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
        <br/>
        <input type="submit" value="리뷰 작성"/>
    </form>
</body>
</html>

 
 
 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 필요한 CSS 및 JavaScript 추가 -->
</head>
<body>
    <div class="item_info_box">
        <c:forEach items="${goodsList}" var="goods">
            <c:if test="${goods.goodsid eq param.goodsid}">
                <h5>${goods.productname}</h5>
            </c:if>
        </c:forEach>
    </div>
    <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
        <input type="hidden" name="goodsid" value="${param.goodsid}" />
        <label for="title">제목:</label>
        <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
        <br/>
        <label for="content">내용:</label>
        <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
        <br/>
        <input type="submit" value="리뷰 작성"/>
    </form>
</body>
</html>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>상품 후기 쓰기</title>
    <!-- 부트스트랩 CSS -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons CDN 추가 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/jquery-3.7.1.min.js"></script>
    <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        /* 스타일 생략 */
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
    <div class="board_write_popup">
        <div class="ly_tit">
            <h4>상품 후기 쓰기</h4>
        </div>
        
        <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
            <input type="hidden" name="goodsid" value="${param.goodsid}" />
            <!-- 리뷰 아이디는 JavaScript로 자동 생성 -->
            <input type="hidden" name="reviewid" id="reviewid" value="" />
            <label for="title">제목:</label>
            <input type="text" name="title" id="title" placeholder="제목을 입력하세요" />
            <br/>
            <label for="content">내용:</label>
            <textarea name="content" id="content" placeholder="리뷰를 작성하세요"></textarea>
            <br/>
            <input type="submit" value="리뷰 작성"/>
        </form>

        <div class="ly_cont">
            <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
                <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
                <!-- 리뷰 아이디는 JavaScript로 자동 생성 -->
                <input type="hidden" name="reviewid" id="reviewid" value="" />

                <div class="scroll_box">
                    <div class="top_item_photo_info">
                        <div class="item_photo_box">
                            <img src="../images/서울 홈 유니폼(앞).jpg" width="300" alt="2024 스틸러스 원정 유니폼" title="2024 스틸러스 원정 유니폼" class="middle">
                        </div>
                        <br>
                        <c:forEach items="${goodsList}" var="goods">
                            <c:if test="${goods.goodsid eq param.goodsid}">
                                <h5>${goods.productname}</h5>
                            </c:if>
                        </c:forEach>    
                    </div>
                    <!-- //top_item_photo_info -->

                    <div class="board_write_box">
                        <table class="board_write_table">
                            <colgroup>
                                <col style="width:15%">
                                <col style="width:85%">
                            </colgroup>
                            <tbody>
                                <tr>
                                    <th scope="row">리뷰 ID</th>
                                    <td>
                                        <!-- 리뷰 아이디 입력란은 사용자에게 보이지 않게 설정 -->
                                        <input type="text" name="reviewid_visible" class="form-control" readonly>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">작성자</th>
                                    <td>
                                        <input type="text" name="userid" id="userid" value="${userID}" class="form-control" readonly>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">비밀번호</th>
                                    <td>
                                        <input type="password" name="writerPw" class="form-control" placeholder="비밀번호 입력">
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">제목</th>
                                    <td>
                                        <input type="text" name="title" id="title" class="form-control write_title" placeholder="제목 입력">
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">내용</th>
                                    <td class="write_editor">
                                        <div class="form_element">
                                            <input type="checkbox" name="isSecret" value="y" id="secret">
                                            <label for="secret" class="check_s">비밀글</label>
                                        </div>
                                        <textarea title="내용 입력" id="editor" class="form-control" name="content" id="content" rows="5" placeholder="내용을 입력하세요"></textarea>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">파일</th>
                                    <td id="uploadBox">
                                        <div class="file_upload_sec">
                                            <label for="attach"><input type="text" class="file_text form-control" readonly="readonly" placeholder="파일 첨부하기"></label>
                                            <div class="btn_upload_box">
                                                <button type="button" class="btn btn-outline-secondary btn_upload" title="찾아보기"><em>찾아보기</em></button>
                                                <input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
                                                <span class="btn_gray_list">
                                                    <button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
                                                </span>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">평점</th>
                                    <td>
                                        <input type="number" name="rating" id="rating" class="form-control" min="1" max="10" required>
                                        <small class="text-muted">1부터 10까지의 숫자로 입력해주세요.</small>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- //board_write_box -->
                </div>
                <!-- //scroll_box -->
                <div class="btn_center_box">
                    <a href="javascript:window.close()" class="btn btn-secondary btn_ly_cancel"><strong>취소</strong></a>
                    <a href="" class="btn btn-primary btn_ly_write_ok"><strong>등록</strong></a>
                    <input type="submit" value="등록" class="btn btn-success">
                </div>
            </form>
        </div>
        <!-- //ly_cont -->
    </div>
    <!-- //board_write_popup -->

    <script>
    // 페이지 로드 시 리뷰 아이디 생성 및 입력란에 자동 설정
    document.addEventListener('DOMContentLoaded', function() {
        var reviewId = generateReviewId(); // 리뷰 아이디 생성 함수 호출
        document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
    });

    // 랜덤한 리뷰 아이디 생성 함수
    function generateReviewId() {
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var length = 10;
        var result = '';
        for (var i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }
</script>














<script>
    // 페이지 로드 시 리뷰 아이디 생성 및 입력란에 자동 설정
    document.addEventListener('DOMContentLoaded', function() {
        var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
        document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
    });

    // 랜덤한 리뷰 아이디 생성 함수 (review로 시작하는 숫자)
    function generateUniqueReviewId() {
        var prefix = 'review';
        var num;
        var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

        // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
        existingIds.push('review001');
        existingIds.push('review6165');
        existingIds.push('review615');

        // 중복되지 않는 아이디 생성
        do {
            num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
            var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
        } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

        return newId;
    }

    // 랜덤 숫자 생성 함수 (1 이상 999 이하)
    function generateRandomNumber() {
        return Math.floor(Math.random() * 999) + 1;
    }
</script>









import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private SqlSession sqlSession;

    public void insert(ReviewDTO reviewDto) {
        sqlSession.insert("review.insert", reviewDto);
    }

    public ReviewDTO selectReviewById(String reviewid) {
        return sqlSession.selectOne("review.selectReviewById", reviewid);
    }

    public List<ReviewDTO> getReviewList(String goodsid) {
        return sqlSession.selectList("review.getReviewList", goodsid);
    }

    public List<ReviewDTO> list() {
        return sqlSession.selectList("review.selectAll");
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">

    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, reviewdate, title, content, rating, grantedpoints)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints})
    </insert>
    
    <select id="getReviewList" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE goodsid = #{goodsid}
    </select>
    
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>
    
    <!-- 
    <update id="update" parameterType="kr.co.matchday.review.ReviewDTO">
        UPDATE review
        SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, reviewdate = #{reviewdate},
            title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}
        WHERE reviewid = #{reviewid}
    </update>
    
    <delete id="delete" parameterType="String">
        DELETE FROM review WHERE reviewid = #{reviewid}
    </delete>  
    -->
    
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>
</mapper>












<form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
    <input type="hidden" name="reviewid" id="reviewid" value="">
    <!-- 기타 입력 항목들 ... -->
    <input type="submit" value="등록" class="btn btn-success">
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
    document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
});

function generateUniqueReviewId() {
    var prefix = 'review';
    var num;
    var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

    // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    <c:forEach items="${reviewList}" var="review">
        existingIds.push('${review.reviewid}');
    </c:forEach>

    // 중복되지 않는 아이디 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    return newId;
}

function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1;
}
</script>

















@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session) {
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 리뷰 아이디 생성
    String reviewId = generateUniqueReviewId();
    reviewDto.setReviewid(reviewId);
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 등록
    reviewDao.insert(reviewDto);
    
    return "redirect:/review/list";
}



@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session) {
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 리뷰 아이디 생성
    String reviewId = generateUniqueReviewId();
    reviewDto.setReviewid(reviewId);
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 등록
    reviewDao.insert(reviewDto);
    
    return "redirect:/review/list";
}


@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session) {
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 등록
    reviewDao.insert(reviewDto);
    
    return "redirect:/review/list";
}




<form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
    <input type="hidden" name="reviewid" id="reviewid" value="">
    <!-- 기타 입력 항목들 ... -->
    <input type="submit" value="등록" class="btn btn-success">
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
    document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
});

function generateUniqueReviewId() {
    var prefix = 'review';
    var num;
    var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

    // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    <c:forEach items="${reviewList}" var="review">
        existingIds.push('${review.reviewid}');
    </c:forEach>

    // 중복되지 않는 아이디 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    return newId;
}

function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1;
}
</script>






<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>상품 후기 쓰기</title>
  <!-- 부트스트랩 CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons CDN 추가 -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/jquery-3.7.1.min.js"></script>
  <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            padding: 20px;
        }
        .board_write_popup {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .ly_tit {
            margin-bottom: 20px;
            text-align: center;
        }
        .ly_cont {
            margin-bottom: 20px;
        }
        
        /* 이미지 및 상품명 센터 정렬 */
	    .top_item_photo_info {
	        text-align: center;
	        margin-bottom: 20px;
	    }
	    
	    .item_photo_box {
	        display: inline-block;
	    }
	    
	    .item_photo_box img {
	        max-width: 100%;
	        height: auto;
	    }
	    
	    /* 상품명 스타일 */
	    .productname {
	        font-size: 24px; /* 원하는 크기로 조정 */
	        font-weight: bold; /* 굵게 설정 */
	        margin-top: 10px; /* 필요에 따라 조정 */
	        margin-bottom: 10px; /* 필요에 따라 조정 */
	    } 
    
        .board_write_box {
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .board_write_table {
            width: 100%;
            margin-bottom: 0;
        }
        .board_write_table th {
            width: 15%;
            text-align: right;
            vertical-align: top;
        }
        .board_write_table td {
            width: 85%;
            padding-left: 10px;
        }
        .write_editor textarea {
            width: 100%;
            min-width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .btn_center_box {
            text-align: center;
        }
        .btn_ly_cancel, .btn_ly_write_ok {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            background-color: #007bff;
            border: 1px solid #007bff;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn_ly_cancel:hover, .btn_ly_write_ok:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
    <div class="board_write_popup">
        <div class="ly_tit">
            <h2>상품 후기 쓰기</h2>
        </div>
        
        <div class="ly_cont">
            <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
                <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
                <input type="hidden" name="reviewid" id="reviewid" value="">
                <div class="scroll_box">
                    <div class="top_item_photo_info">
                        <div class="item_photo_box">
                            <img src="<c:url value='/images/${param.goodsid}.jpg' />" width="300" alt="${param.goodsid} 상품 이미지" title="${param.goodsid} 상품 이미지" class="middle">
                        </div>
                        <br>
                        <c:forEach items="${goodsList}" var="goods">
				            <c:if test="${goods.goodsid eq param.goodsid}">
				                <h5 class="productname">${goods.productname}</h5>
				            </c:if>
				        </c:forEach>    
                    </div>
                    <!-- //top_item_photo_info -->

                    <div class="board_write_box">
                        <table class="board_write_table">
                            <colgroup>
                                <col style="width:15%">
                                <col style="width:85%">
                            </colgroup>
                            <tbody>
                                <!-- 나머지 폼 요소들은 그대로 유지 -->
                            </tbody>
                        </table>
                    </div>
                    <!-- //board_write_box -->
                </div>
                <!-- //scroll_box -->
                <div class="btn_center_box">
                    <a href="javascript:window.close()" class="btn btn-secondary btn_ly_cancel"><strong>취소</strong></a>
                    <a href="" class="btn btn-primary btn_ly_write_ok"><strong>등록</strong></a>
                    <input type="submit" value="등록" class="btn btn-success">
                </div>
            </form>  
        </div>
        <!-- //ly_cont -->
    </div>
    <!-- //board_write_popup -->
</body>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var reviewId = generateUniqueReviewId(); // 리뷰 아이디 생성 함수 호출
    document.getElementById('reviewid').value = reviewId; // 리뷰 아이디 입력란에 설정
});

function generateUniqueReviewId() {
    var prefix = 'review';
    var num;
    var existingIds = []; // 기존 리뷰 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

    // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    <c:forEach items="${reviewList}" var="review">
        existingIds.push('${review.reviewid}');
    </c:forEach>

    // 중복되지 않는 아이디 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    return newId;
}

function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1;
}
</script>
</html>



<script>
function handleRatingClick(rating) {
    var radios = document.getElementsByName('rating');
    for (var i = 0; i < radios.length; i++) {
        if (radios[i].value == rating) {
            radios[i].checked = true;
        } else {
            radios[i].checked = false;
        }
    }
}
</script>












document.addEventListener('DOMContentLoaded', function() {
    // 기본 상품순 토글 버튼 클릭 이벤트 리스너 추가
    document.getElementById('defaultSort').addEventListener('click', function(e) {
        e.preventDefault(); // 기본 이벤트 동작을 막습니다.
        showAllItems(); // 모든 상품을 기본 순서대로 보여줍니다.
        dropdownButton.textContent = '기본상품순'; // 드롭다운 버튼의 텍스트를 변경합니다.
    });

    // 기타 초기화 코드 등

});



<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>평점 선택하기</title>
<style>
    .rating {
        margin-bottom: 20px;
    }
    .rating input[type="radio"] {
        display: none;
    }
    .rating label {
        display: inline-block;
        cursor: pointer;
        width: 50px;
        height: 50px;
        background-color: #f0f0f0;
        border-radius: 50%;
        text-align: center;
        line-height: 50px;
        margin-right: 10px;
    }
    .rating label:hover,
    .rating input[type="radio"]:checked + label {
        background-color: #ffd700; /* 선택된 체크박스의 배경색을 변경 */
    }
</style>
</head>
<body>

<form>
    <div class="rating">
        <input type="radio" id="star5" name="rating" value="5">
        <label for="star5">★★★★★</label>
        
        <input type="radio" id="star4" name="rating" value="4">
        <label for="star4">★★★★</label>
        
        <input type="radio" id="star3" name="rating" value="3">
        <label for="star3">★★★</label>
        
        <input type="radio" id="star2" name="rating" value="2">
        <label for="star2">★★</label>
        
        <input type="radio" id="star1" name="rating" value="1">
        <label for="star1">★</label>
    </div>
</form>

<script>
    // JavaScript 예제가 필요하시면 추가로 작성해드리겠습니다.
</script>

</body>
</html>





<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>동그란 체크박스 예제</title>
</head>
<body>

<form>
    <label>
        <input type="radio" name="option" value="option1">
        옵션 1
    </label>
    <br>
    <label>
        <input type="radio" name="option" value="option2">
        옵션 2
    </label>
    <br>
    <label>
        <input type="radio" name="option" value="option3">
        옵션 3
    </label>
</form>

</body>
</html>













document.addEventListener('DOMContentLoaded', function() {
    var form = document.getElementById('goodsfrm');

    // 굿즈 ID 생성 함수
    function generateUniqueGoodsId() {
        var prefix = 'goods';
        var num;
        var existingIds = []; // 기존 굿즈 아이디 리스트 (실제 사용하시는 데이터를 가져와야 합니다)

        // 기존 아이디들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
        <c:forEach items="${goodsList}" var="goods">
            existingIds.push('${goods.goodsid}');
        </c:forEach>

        // 중복되지 않는 아이디 생성
        do {
            num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
            var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
        } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

        return newId;
    }

    // 랜덤 숫자 생성 함수
    function generateRandomNumber() {
        return Math.floor(Math.random() * 999) + 1;
    }

    // 굿즈 ID 설정
    document.getElementById('goodsid').value = generateUniqueGoodsId();

    function validateForm() {
        var isValid = true;

        // 카테고리 유효성 검사
        var category = document.getElementById('category').value;
        var categoryMsg = document.getElementById('categoryMsg');
        if (category === "") {
            categoryMsg.textContent = '카테고리를 선택해주세요.';
            isValid = false;
        } else {
            categoryMsg.textContent = '';
        }

        // 굿즈 ID 유효성 검사 (중복 검사 포함)
        var goodsid = document.getElementById('goodsid').value;
        var duplicateMsg = document.getElementById('duplicateMsg');
        if (goodsid === "") {
            duplicateMsg.textContent = '굿즈 ID를 입력해주세요.';
            isValid = false;
        } else {
            duplicateMsg.textContent = '';
        }

        // 상품명 유효성 검사
        var productname = document.getElementById('productname').value;
        var productnameMsg = document.getElementById('productnameMsg');
        if (productname.length < 2) {
            productnameMsg.textContent = '상품명은 2글자 이상이어야 합니다.';
            isValid = false;
        } else {
            productnameMsg.textContent = '';
        }

        // 상품 사진 유효성 검사
        var img = document.getElementById('img').value;
        var imgMsg = document.getElementById('imgMsg');
        if (img === "") {
            imgMsg.textContent = '상품 사진을 선택해주세요.';
            isValid = false;
        } else {
            imgMsg.textContent = '';
        }

        // 사이즈 유효성 검사
        var size = document.getElementById('size').value;
        var sizeMsg = document.getElementById('sizeMsg');
        if (size === "") {
            sizeMsg.textContent = '사이즈를 선택해주세요.';
            isValid = false;
        } else {
            sizeMsg.textContent = '';
        }

        // 가격 유효성 검사
        var price = document.getElementById('price').value;
        var priceMsg = document.getElementById('priceMsg');
        if (price === "" || price <= 0) {
            priceMsg.textContent = '가격을 입력해주세요 (0 이상).';
            isValid = false;
        } else {
            priceMsg.textContent = '';
        }

        // 재고 수량 유효성 검사
        var stockquantity = document.getElementById('stockquantity').value;
        var stockquantityMsg = document.getElementById('stockquantityMsg');
        if (stockquantity === "" || stockquantity < 0) {
            stockquantityMsg.textContent = '재고 수량을 입력해주세요 (0 이상).';
            isValid = false;
        } else {
            stockquantityMsg.textContent = '';
        }

        // 라디오 버튼 유효성 검사
        var issoldoutChecked = document.querySelector('input[name="issoldout"]:checked');
        var issoldoutMsg = document.getElementById('issoldoutMsg');
        if (!issoldoutChecked) {
            issoldoutMsg.textContent = '품절 여부를 선택해주세요.';
            isValid = false;
        } else {
            issoldoutMsg.textContent = '';
        }

        // 폼이 유효하지 않으면 제출 방지
        if (!isValid) {
            event.preventDefault();
        }

        return isValid;
    }

    // 폼 제출 이벤트 리스너
    form.addEventListener('submit', function(event) {
        if (!validateForm()) {
            event.preventDefault(); // 유효성 검사 실패 시 제출 방지
        }
    });

    // Summernote 초기화
    $('.summernote').summernote({
        height: 300,
        lang: 'ko-KR',
        toolbar: [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']]
        ],
        callbacks: {
            onImageUpload: function(files) {
                sendFile(files[0]);
            }
        }
    }); //summernote end

    function sendFile(file) {
        var data = new FormData();
        data.append("file", file);
        $.ajax({
            url: '/goods/uploadImage',
            method: 'POST',
            data: data,
            contentType: false,
            processData: false,
            success: function(url) {
                $('.summernote').summernote('insertImage', url);
            },
            error: function() {
                alert('이미지 업로드 중 오류가 발생하였습니다.');
            }
        });
    } // sendFile end
}); //document.addEventListener('DOMContentLoaded', function() end









<!-- 장바구니 폼 -->
<form id="addToCartForm" method="post" action="${pageContext.request.contextPath}/cart/insert">
    <input type="hidden" name="userid" value="${sessionScope.userID}">
    <input type="hidden" name="goodsid" value="${goodsDto.goodsid}">
    <input type="hidden" name="quantity" id="form-quantity" value="">
    <input type="hidden" name="unitprice" id="form-unitprice">
    <input type="hidden" name="totalprice" id="form-totalprice">
</form>

<!-- 리뷰 탭 내의 c:forEach 반복문 수정 -->
<c:forEach items="${reviewList}" var="review">
    <div class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
        <div class="review-rating">${review.rating} 점</div>
        <div class="review-title">${review.title}</div>
        <div class="review-author">${review.userid}</div>
        <div class="review-date">${review.reviewdate}</div>
    </div>
    <div id="review${review.reviewid}" class="review-details">
        <div class="review-content">
            ${review.content}
        </div>
        <img src="${review.imageurl}" alt="Review Image" class="review-image">
        <div class="review-comments">
            <c:forEach items="${review.comments}" var="comment">
                <div class="comment">${comment.text}</div>
            </c:forEach>
        </div>
    </div>
</c:forEach>






// 주문 수량 업데이트 함수
function updateQuantity(change) {
    var input = document.getElementById('quantity-input');
    var currentValue = parseInt(input.value);
    var newValue = currentValue + change;

    if (newValue < 1) {
        newValue = 1; // 최소 수량은 1로 설정
    }

    input.value = newValue;
    updateTotalPrice(); // 총 가격 업데이트
}

// 총 가격 업데이트 함수
function updateTotalPrice() {
    var quantity = parseInt(document.getElementById('quantity-input').value);
    var price = ${goodsDto.price};
    var totalPrice = quantity * price;

    // 업데이트된 값들을 화면에 표시합니다
    document.getElementById('order-quantity').innerText = quantity + '개';
    document.getElementById('total-price').innerText = totalPrice.toLocaleString() + '원';

    // 숨겨진 입력 필드를 업데이트합니다
    document.getElementById('form-quantity').value = quantity;
    document.getElementById('form-unitprice').value = price;
    document.getElementById('form-totalprice').value = totalPrice;
}

// 초기 로드 시 총 상품 금액 계산
document.addEventListener('DOMContentLoaded', function() {
    updateTotalPrice();
});

// 장바구니에 추가 버튼 클릭 시
function addToCart() {
    var quantityInput = document.getElementById('quantity-input');
    if (!quantityInput) {
        console.error('수량 입력 요소를 찾을 수 없습니다');
        return;
    }

    var quantity = parseInt(quantityInput.value);

    var totalPriceElement = document.getElementById('total-price');
    if (!totalPriceElement) {
        console.error('총 가격 요소를 찾을 수 없습니다');
        return;
    }

    var totalPriceText = totalPriceElement.innerText;
    var totalPrice = parseInt(totalPriceText.replace(/[^0-9]/g, ''));

    var formQuantity = document.getElementById('form-quantity');
    if (!formQuantity) {
        console.error('장바구니 수량 입력 필드를 찾을 수 없습니다');
        return;
    }

    var formTotalPrice = document.getElementById('form-totalprice');
    if (!formTotalPrice) {
        console.error('장바구니 총 가격 입력 필드를 찾을 수 없습니다');
        return;
    }

    var userId = '${sessionScope.userID}';
    console.log('사용자 아이디:', userId);

    formQuantity.value = quantity;
    formTotalPrice.value = totalPrice;

    console.log('수량:', quantity);
    console.log('총 가격:', totalPrice);

    showCartModal();
}

// 장바구니 모달
var modal = document.getElementById("cartModal");
var span = document.getElementsByClassName("close")[0];

function showCartModal() {
    modal.style.display = "block";
}

span.onclick = function() {
    modal.style.display = "none";
}

window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}

function continueShopping() {
    modal.style.display = "none";
    window.location.href = '/goods/list';
}











function loadContent(tabId) {
    try {
        var tabContents = document.querySelectorAll('.tabcont');
        tabContents.forEach(function(content) {
            content.classList.remove('on');
        });

        var selectedTabContent = document.getElementById(tabId);
        selectedTabContent.classList.add('on');

        var tabMenuItems = document.querySelectorAll('.info-tab li');
        tabMenuItems.forEach(function(item) {
            item.classList.remove('on');
        });

        var selectedTabMenuItem = document.querySelector('.info-tab li[data-tab="' + tabId + '"]');
        selectedTabMenuItem.classList.add('on');
    } catch (error) {
        console.error('loadContent 함수에서 오류 발생:', error);
        alert('콘텐츠를 로드하는 데 실패했습니다. 나중에 다시 시도해주세요.');
    }
}















<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>리뷰 페이지</title>
    <style>
        .review-details {
            display: none;
        }
        .review-summary {
            cursor: pointer;
        }
        .review-summary:hover {
            background-color: #f0f0f0;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
    <script>
        function toggleReviewDetails(reviewid) {
            var reviewDetails = document.getElementById(reviewid);
            if (reviewDetails.style.display === '' || reviewDetails.style.display === 'none') {
                reviewDetails.style.display = 'block';
            } else {
                reviewDetails.style.display = 'none';
            }
        }
    </script>
</head>
<body>
    <div id="review" class="tab-content">
        <table>
            <thead>
                <tr>
                    <th>평점</th>
                    <th>제목</th>
                    <th>작성자</th>
                    <th>작성일</th>
                </tr>
            </thead>
            <tbody>
                <!-- 리뷰 탭 내의 c:forEach 반복문 -->
                <c:forEach items="${reviewList}" var="review">
                    <tr class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
                        <td>${review.rating}점</td>
                        <td>${review.title}</td>
                        <td>${review.userid}</td>
                        <td>${review.reviewdate}</td>
                    </tr>
                    <tr id="review${review.reviewid}" class="review-details">
                        <td colspan="4">
                            <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                            <div class="review-content">
                                여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                            </div>
                            <div class="review-comments">
                                <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                                <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                            </div>
                        </td>
                    </tr>
                </c:forEach>

                <!-- 예시 리뷰 항목들 -->
                <tr class="review-summary" onclick="toggleReviewDetails('review1')">
                    <td>4점</td>
                    <td>좋은 상품입니다</td>
                    <td>사용자 이름</td>
                    <td>2024-07-09</td>
                </tr>
                <tr id="review1" class="review-details">
                    <td colspan="4">
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </td>
                </tr>
                <tr class="review-summary" onclick="toggleReviewDetails('review2')">
                    <td>5점</td>
                    <td>좋은 상품입니다</td>
                    <td>사용자 이름</td>
                    <td>2024-07-09</td>
                </tr>
                <tr id="review2" class="review-details">
                    <td colspan="4">
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        상품 전체 보기 내용
    </div>

    <div id="write-review" class="tab-content" style="display: none;">
        상품 글쓰기 내용
    </div>
</body>
</html>












<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>리뷰 페이지</title>
    <style>
        .review-details {
            display: none;
        }
        .review-summary {
            cursor: pointer;
        }
        .review-summary:hover {
            background-color: #f0f0f0;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
    <script>
        function toggleReviewDetails(reviewid) {
            var reviewDetails = document.getElementById(reviewid);
            if (reviewDetails.style.display === '' || reviewDetails.style.display === 'none') {
                reviewDetails.style.display = 'table-row';
            } else {
                reviewDetails.style.display = 'none';
            }
        }
    </script>
</head>
<body>
    <div id="review" class="tab-content">
        <table>
            <thead>
                <tr>
                    <th>평점</th>
                    <th>제목</th>
                    <th>작성자</th>
                    <th>작성일</th>
                </tr>
            </thead>
            <tbody>
                <!-- 리뷰 탭 내의 c:forEach 반복문 -->
                <c:forEach items="${reviewList}" var="review">
                    <tr class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
                        <td>${review.rating}점</td>
                        <td>${review.title}</td>
                        <td>${review.userid}</td>
                        <td>${review.reviewdate}</td>
                    </tr>
                    <tr id="review${review.reviewid}" class="review-details">
                        <td colspan="4">
                            <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                            <div class="review-content">
                                여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                            </div>
                            <div class="review-comments">
                                <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                                <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                            </div>
                        </td>
                    </tr>
                </c:forEach>

                <!-- 예시 리뷰 항목들 -->
                <tr class="review-summary" onclick="toggleReviewDetails('review1')">
                    <td>4점</td>
                    <td>좋은 상품입니다</td>
                    <td>사용자 이름</td>
                    <td>2024-07-09</td>
                </tr>
                <tr id="review1" class="review-details">
                    <td colspan="4">
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </td>
                </tr>
                <tr class="review-summary" onclick="toggleReviewDetails('review2')">
                    <td>5점</td>
                    <td>좋은 상품입니다</td>
                    <td>사용자 이름</td>
                    <td>2024-07-09</td>
                </tr>
                <tr id="review2" class="review-details">
                    <td colspan="4">
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        상품 전체 보기 내용
    </div>

    <div id="write-review" class="tab-content" style="display: none;">
        상품 글쓰기 내용
    </div>
</body>
</html>


















모양은 제대로 나옴

<table>
    	<thead>
            <tr>
                <th>평점</th>
                <th>제목</th>
                <th>작성자</th>
                <th>작성일</th>
            </tr>
        </thead>
        <tbody>
    	
        <div class="review-list">
        <!-- 리뷰 탭 내의 c:forEach 반복문 -->
            <c:forEach items="${reviewList}" var="review">
            <tr>
			    <div class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
			        <th>${review.rating}점</th>
			        <th>${review.title}</th>
			        <th>${review.userid}</th>
			        <th>${review.reviewdate}</th>
			    </div>
			</tr>
			<tr>   
    			<div id="review3" class="review-details">
	                <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
	                <div class="review-content">
	                    여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                	</div>
                <div class="review-comments">
                    <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                    <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                </div>
            	</div>
            </tr>
			</c:forEach>
			</tbody>
			</table>








<table>
    	
            <tr>
                <th>평점</th>
                <th>제목</th>
                <th>작성자</th>
                <th>작성일</th>
            </tr>
        
    	
        <div class="review-list">
        <!-- 리뷰 탭 내의 c:forEach 반복문 -->
            <c:forEach items="${reviewList}" var="review">
            <tr class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')"> 
			        <th>${review.rating}점</th>
			        <th>${review.title}</th>
			        <th>${review.userid}</th>
			        <th>${review.reviewdate}</th>
			    </tr>
			    
    			<tr id="review3" class="review-details">
    			<td>
	                <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
	                <div class="review-content">
	                    여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                </td>
                </tr>
                <div class="review-comments">
                    <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                    <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                </div>
            	</div>
			</c:forEach>
			
			</table>



상세보기 됨
<div id="review" class="tab-content">
    <table>
        <thead>
            <tr>
                <th>평점</th>
                <th>제목</th>
                <th>작성자</th>
                <th>작성일</th>
            </tr>
        </thead>
        <tbody>
            <!-- 리뷰 탭 내의 c:forEach 반복문 -->
            <c:forEach items="${reviewList}" var="review">
                <tr class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
                    <td>${review.rating}점</td>
                    <td>${review.title}</td>
                    <td>${review.userid}</td>
                    <td>${review.reviewdate}</td>
                </tr>
                <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                    <td colspan="4">
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </td>
                </tr>
            </c:forEach>

            <!-- 예시 리뷰 항목들 -->
            <tr class="review-summary" onclick="toggleReviewDetails('review1')">
                <td>4점</td>
                <td>좋은 상품입니다</td>
                <td>사용자 이름</td>
                <td>2024-07-09</td>
            </tr>
            <tr id="review1" class="review-details" style="display: none;">
                <td colspan="4">
                    <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                    <div class="review-content">
                        여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                    </div>
                    <div class="review-comments">
                        <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                        <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                    </div>
                </td>
            </tr>
            <tr class="review-summary" onclick="toggleReviewDetails('review2')">
                <td>5점</td>
                <td>좋은 상품입니다</td>
                <td>사용자 이름</td>
                <td>2024-07-09</td>
            </tr>
            <tr id="review2" class="review-details" style="display: none;">
                <td colspan="4">
                    <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                    <div class="review-content">
                        여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                    </div>
                    <div class="review-comments">
                        <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                        <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="all-reviews" class="tab-content" style="display: none;">
    상품 전체 보기 내용
</div>

<div id="write-review" class="tab-content" style="display: none;">
    상품 글쓰기 내용
</div>

<script>
function toggleReviewDetails(reviewid) {
    var reviewDetails = document.getElementById(reviewid);
    if (reviewDetails.style.display === 'none' || reviewDetails.style.display === '') {
        reviewDetails.style.display = 'table-row';
    } else {
        reviewDetails.style.display = 'none';
    }
}
</script>





















<div id="review" class="tab-content">
    <table>
        <thead>
            <tr>
                <th>평점</th>
                <th>제목</th>
                <th>작성자</th>
                <th>작성일</th>
            </tr>
        </thead>
        <tbody>
            <!-- 리뷰 탭 내의 c:forEach 반복문 -->
            <c:forEach items="${reviewList}" var="review">
                <tr class="review-summary" onclick="toggleReviewDetails('review${review.reviewid}')">
                    <td>${review.rating}점</td>
                    <td>${review.title}</td>
                    <td>${review.userid}</td>
                    <td>${review.reviewdate}</td>
                </tr>
                <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                    <td colspan="4">
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </td>
                </tr>
            </c:forEach>

            <!-- 예시 리뷰 항목들 -->
            <tr class="review-summary" onclick="toggleReviewDetails('review1')">
                <td>4점</td>
                <td>좋은 상품입니다</td>
                <td>사용자 이름</td>
                <td>2024-07-09</td>
            </tr>
            <tr id="review1" class="review-details" style="display: none;">
                <td colspan="4">
                    <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                    <div class="review-content">
                        여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                    </div>
                    <div class="review-comments">
                        <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                        <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                    </div>
                </td>
            </tr>
            <tr class="review-summary" onclick="toggleReviewDetails('review2')">
                <td>5점</td>
                <td>좋은 상품입니다</td>
                <td>사용자 이름</td>
                <td>2024-07-09</td>
            </tr>
            <tr id="review2" class="review-details" style="display: none;">
                <td colspan="4">
                    <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                    <div class="review-content">
                        여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                    </div>
                    <div class="review-comments">
                        <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                        <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="all-reviews" class="tab-content" style="display: none;">
    상품 전체 보기 내용
</div>

<div id="write-review" class="tab-content" style="display: none;">
    상품 글쓰기 내용
</div>

<script>
function toggleReviewDetails(reviewid) {
    var reviewDetails = document.getElementById(reviewid);
    if (reviewDetails.style.display === 'none' || reviewDetails.style.display === '') {
        reviewDetails.style.display = 'table-row';
    } else {
        reviewDetails.style.display = 'none';
    }
}
</script>




















<div id="review" class="tab-content">
    <table>
        <thead>
            <tr>
                <th>평점</th>
                <th>제목</th>
                <th>작성자</th>
                <th>작성일</th>
            </tr>
        </thead>
        <tbody>
            <!-- 리뷰 탭 내의 c:forEach 반복문 -->
            <c:forEach items="${reviewList}" var="review">
                <tr>
                    <td>${review.rating}점</td>
                    <td>${review.title}</td>
                    <td>${review.userid}</td>
                    <td>${review.reviewdate}</td>
                </tr>
                <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                    <td colspan="4">
                        <div>
                            <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                            <div class="review-content">
                                여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                            </div>
                            <div class="review-comments">
                                <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                                <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                            </div>
                        </div>
                    </td>
                </tr>
            </c:forEach>

            <!-- 예시 리뷰 항목들 -->
            <tr onclick="toggleReviewDetails('review1')">
                <td>4점</td>
                <td>좋은 상품입니다</td>
                <td>사용자 이름</td>
                <td>2024-07-09</td>
            </tr>
            <tr id="review1" class="review-details" style="display: none;">
                <td colspan="4">
                    <div>
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </div>
                </td>
            </tr>
            <tr onclick="toggleReviewDetails('review2')">
                <td>5점</td>
                <td>좋은 상품입니다</td>
                <td>사용자 이름</td>
                <td>2024-07-09</td>
            </tr>
            <tr id="review2" class="review-details" style="display: none;">
                <td colspan="4">
                    <div>
                        <img src="../images/울산 원정 유니폼.jpg" alt="Review Image" class="review-image">
                        <div class="review-content">
                            여기에 사용자의 후기가 들어갑니다. 상품이 정말 좋습니다!
                        </div>
                        <div class="review-comments">
                            <div class="comment">댓글 1: 정말 좋은 리뷰네요!</div>
                            <div class="comment">댓글 2: 저도 같은 경험을 했습니다.</div>
                        </div>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="all-reviews" class="tab-content" style="display: none;">
    상품 전체 보기 내용
</div>

<div id="write-review" class="tab-content" style="display: none;">
    상품 글쓰기 내용
</div>

<script>
    function toggleReviewDetails(reviewid) {
        var reviewDetails = document.getElementById(reviewid);
        if (reviewDetails.style.display === 'none') {
            reviewDetails.style.display = 'block';
        } else {
            reviewDetails.style.display = 'none';
        }
    }
</script>























<div class="review">
    <div class="review-tabs">
        <button class="tab-button active" onclick="showTab('review')">상품후기</button>
        <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기</button>
        <button class="tab-button" onclick="openPopup('/review/write?goodsid=${goodsDto.goodsid}')">상품 글쓰기</button>
    </div>

    <div id="review" class="tab-content">
        <table>
            <thead>
                <tr>
                    <th>평점</th>
                    <th>제목</th>
                    <th>작성자</th>
                    <th>작성일</th>
                </tr>
            </thead>
            <tbody>
                <c:forEach items="${reviewList}" var="review">
                    <tr onclick="toggleReviewDetails('${review.reviewid}')">
                        <td>${review.rating}점</td>
                        <td>${review.title}</td>
                        <td>${review.userid}</td>
                        <td>${review.reviewdate}</td>
                    </tr>
                    <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                        <td colspan="4">
                            <div class="review-content-wrapper">
                                <img src="${pageContext.request.contextPath}/storage/reviews/${review.image}" alt="Review Image" class="review-image">
                                <div class="review-content">${review.content}</div>
                                <div class="review-comments">
                                    <c:forEach items="${review.comments}" var="comment">
                                        <div class="comment">${comment.userid}: ${comment.text}</div>
                                    </c:forEach>
                                </div>
                            </div>
                        </td>
                    </tr>
                </c:forEach>
            </tbody>
        </table>
    </div>

    <div id="all-reviews" class="tab-content" style="display: none;">
        <p>상품 전체 보기 내용</p>
        <!-- 전체 리뷰 리스트 링크 추가 -->
        <a href="/review/list">상품전체보기(리뷰리스트로 이동?)</a>
    </div>
</div>

<script>
    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    function toggleReviewDetails(reviewId) {
        var reviewDetails = document.getElementById(reviewId);
        if (reviewDetails.style.display === 'none' || reviewDetails.style.display === '') {
            reviewDetails.style.display = 'block';
        } else {
            reviewDetails.style.display = 'none';
        }
    }

    function openPopup(url) {
        var width = 1000;
        var height = 900;
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;
        window.open(url, "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
    }
</script>

<style>
    .review {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        padding: 20px;
    }
    .review-tabs {
        display: flex;
        justify-content: flex-start;
        margin-bottom: 20px;
    }
    .tab-button {
        background-color: #f1f1f1;
        border: 1px solid #ddd;
        padding: 10px 20px;
        cursor: pointer;
        margin-right: 10px;
        border-radius: 5px;
        font-size: 16px;
    }
    .tab-button.active {
        background-color: #fff;
        border-bottom: 2px solid #007bff;
        color: #007bff;
    }
    .tab-content {
        background-color: #fff;
        border: 1px solid #ddd;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .review-content-wrapper {
        display: flex;
    }
    .review-image {
        max-width: 150px;
        max-height: 150px;
        margin-right: 20px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    .review-content {
        flex: 1;
    }
    .review-comments {
        margin-top: 10px;
    }
    .comment {
        background-color: #f1f1f1;
        padding: 5px 10px;
        border-radius: 5px;
        margin-bottom: 5px;
    }
</style>

























<div id="info04" class="tabcont">
    <div class="review">
        <div class="review-tabs">
            <button class="tab-button active" onclick="showTab('review')">상품후기</button>
            <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기</button>
            <button class="tab-button" onclick="openPopup('/review/write?goodsid=${goodsDto.goodsid}')">상품 글쓰기</button>
        </div>

        <div id="review" class="tab-content">
            <table>
                <thead>
                    <tr>
                        <th>평점</th>
                        <th>제목</th>
                        <th>작성자</th>
                        <th>작성일</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${reviewList}" var="review">
                        <tr onclick="toggleReviewDetails('review${review.reviewid}')">
                            <td>${review.rating}점</td>
                            <td>${review.title}</td>
                            <td>${review.userid}</td>
                            <td>${review.reviewdate}</td>
                        </tr>
                        <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                            <td colspan="4">
                                <div class="review-content-wrapper">
                                    <c:if test="${not empty review.image}">
                                        <img src="${pageContext.request.contextPath}/storage/review/${review.image}" alt="Review Image" class="review-image">
                                    </c:if>
                                    <div class="review-content">
                                        ${review.content}
                                    </div>
                                    <div class="review-comments">
                                        <c:forEach items="${review.comments}" var="comment">
                                            <div class="comment">${comment.userid}: ${comment.text}</div>
                                        </c:forEach>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
        </div> <!-- id="review" class="tab-content" end -->

        <div id="all-reviews" class="tab-content" style="display: none;">
            <p>상품 전체 보기 내용</p>
            <a href="/review/list">상품전체보기(리뷰리스트로 이동?)</a>
        </div>
    </div> <!-- review end -->
</div> <!-- 리뷰 내용 -->

<script>
    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    function toggleReviewDetails(reviewId) {
        var reviewDetails = document.getElementById(reviewId);
        if (reviewDetails.style.display === 'none' || reviewDetails.style.display === '') {
            reviewDetails.style.display = 'block';
        } else {
            reviewDetails.style.display = 'none';
        }
    }
</script>











<input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
        <span class="btn_gray_list">
<button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
          </span>


<div class="file_upload_sec" id="uploadSection">
    <input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
    <div class="btn_upload_box">
        <button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
    </div>
</div>












document.addEventListener('DOMContentLoaded', function() {
    var uploadSection = document.getElementById('uploadSection');
    var addUploadBtn = document.getElementById('addUploadBtn');
    var uploadCount = 1;

    addUploadBtn.addEventListener('click', function() {
        var newInput = document.createElement('input');
        newInput.type = 'file';
        newInput.id = 'attach' + uploadCount;
        newInput.name = 'upfiles[]';
        newInput.className = 'file';
        newInput.title = '찾아보기';

        var span = document.createElement('span');
        span.className = 'btn_gray_list';
        var deleteBtn = document.createElement('button');
        deleteBtn.type = 'button';
        deleteBtn.className = 'btn btn-outline-secondary btn_gray_big';
        deleteBtn.innerHTML = '<span>- 삭제</span>';
        deleteBtn.addEventListener('click', function() {
            this.parentNode.previousSibling.remove(); // 파일 입력란 제거
            this.parentNode.remove(); // 삭제 버튼 제거
        });

        span.appendChild(deleteBtn);

        uploadSection.appendChild(newInput);
        uploadSection.appendChild(span);

        uploadCount++;
    });
});




















// JavaScript for toggling review details
function toggleReviewDetails(reviewId) {
    var reviewDetails = document.getElementById(reviewId);
    if (reviewDetails.style.display === 'none' || reviewDetails.style.display === '') {
        reviewDetails.style.display = 'table-row'; // Changed display to 'table-row' for table row visibility
    } else {
        reviewDetails.style.display = 'none';
    }
}

// Function to initialize event listeners for all review details toggles
document.addEventListener('DOMContentLoaded', function() {
    var reviewToggles = document.querySelectorAll('.review-details-toggle');
    reviewToggles.forEach(function(toggle) {
        toggle.addEventListener('click', function() {
            var reviewId = toggle.getAttribute('data-review-id');
            toggleReviewDetails(reviewId);
        });
    });
});















@GetMapping("/write")
public String write(@ModelAttribute("reviewDto") ReviewDTO reviewDto, Model model, HttpSession session, HttpServletRequest request) {
    // 로그인된 사용자 정보 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        // 로그인 페이지로 리디렉션하기 전에 현재 페이지의 URL을 세션에 저장
        String originalUrl = request.getRequestURL().toString();
        session.setAttribute("originalUrl", originalUrl);
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }

    // 사용자가 로그인한 경우
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    return "review/write";
}

// 로그인 성공 후의 처리를 담당하는 컨트롤러 메서드
@PostMapping("/login")
public String loginPost(HttpSession session, HttpServletRequest request) {
    // 로그인 성공 로직
    // ...

    // 세션에서 원래 페이지 URL 가져오기
    String originalUrl = (String) session.getAttribute("originalUrl");
    if (originalUrl != null) {
        // 세션에 저장된 원래 페이지 URL로 리다이렉트
        session.removeAttribute("originalUrl"); // 리다이렉트 후 세션에서 삭제
        return "redirect:" + originalUrl;
    }

    // 원래 페이지 URL이 없을 경우에는 기본적으로 홈페이지 등으로 리다이렉트
    return "redirect:/";
}


















- <!-- 기존의 상품 글쓰기 버튼 부분 -->
<button onclick="openProductWritingPopup()">상품 글쓰기</button>
+ <!-- 수정된 부분: 로그인 확인 후 상품 글쓰기 버튼 부분 -->
<button onclick="checkLoginThenOpenProductWriting()">상품 글쓰기</button>

...

 <script>
   function checkLoginThenOpenProductWriting() {
       // 로그인 여부를 확인하는 로직 추가
       if (isLoggedIn()) {
           openProductWritingPopup(); // 로그인 되어 있으면 상품 글쓰기 팝업 열기
       } else {
           alert("로그인이 필요합니다."); // 로그인 되어 있지 않으면 경고창 띄우기 또는 로그인 페이지로 이동
           // 예를 들어, 로그인 페이지로 이동하려면 window.location.href = "/login";
       }
   }

   function isLoggedIn() {
       // 로그인 여부를 확인하는 함수
       // 구체적인 로직은 서버와의 연동 또는 클라이언트 측에서 세션 등을 활용하여 구현
       // 예시로 임의로 true 또는 false를 반환하는 것으로 표현
       return true; // 현재는 임의로 true를 반환하여 로그인 상태로 가정
   }
 </script>

 
 
 
 
 
 <script>
    function checkLoginThenWriteReview() {
        // 로그인 여부를 확인하는 로직 추가
        if (isLoggedIn()) {
            openProductWritingPopup(); // 로그인 되어 있으면 상품 글쓰기 팝업 열기
        } else {
            alert("로그인이 필요합니다."); // 로그인 되어 있지 않으면 경고창 띄우기 또는 로그인 페이지로 이동
            // 예를 들어, 로그인 페이지로 이동하려면 window.location.href = "/login";
        }
    }

    function isLoggedIn() {
        // 로그인 여부를 확인하는 함수
        // 구체적인 로직은 서버와의 연동 또는 클라이언트 측에서 세션 등을 활용하여 구현
        // 예시로 임의로 true 또는 false를 반환하는 것으로 표현
        return true; // 현재는 임의로 true를 반환하여 로그인 상태로 가정
    }

    function openProductWritingPopup() {
        var goodsid = '${goodsDto.goodsid}';
        var url = '/review/write?goodsid=' + goodsid;

        var width = 1000;
        var height = 900;

        // 화면의 중앙에 위치시키기 위한 좌표 계산
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;

        // 창을 중앙에 띄우기
        window.open(url, "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
    }
</script>





<script>
    function checkLoginBeforeWrite() {
        var isLoggedIn = '${not empty sessionScope.userID}';
        if (isLoggedIn) {
            var goodsid = '${goodsDto.goodsid}';
            var url = '/review/write?goodsid=' + goodsid;
            window.location.href = url; // 로그인 상태이면 URL로 이동
        } else {
            alert('로그인이 필요합니다.');
            // 예를 들어, 로그인 페이지로 이동하도록 설정할 수 있습니다.
            // window.location.href = '/login';
        }
    }

    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    // 초기로 'review' 탭의 콘텐츠를 보이도록 설정
    document.getElementById('review').style.display = 'block';
</script>














<div id="info04" class="tabcont">
    <!-- 리뷰 내용 -->
    <div class="review">
        <div class="review-tabs">
            <button class="tab-button active" onclick="showTab('review')">상품후기</button>
            <button class="tab-button" onclick="showTab('all-reviews')"><a href="/review/list">상품전체보기(리뷰리스트로 이동?)</a></button>
            <button class="tab-button" onclick="openReviewPopup()">상품 글쓰기</button>
        </div>

        <div id="review" class="tab-content">
            <table>
                <thead>
                    <tr>
                        <th>평점</th>
                        <th>제목</th>
                        <th>작성자</th>
                        <th>작성일</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 리뷰 탭 내의 c:forEach 반복문 -->
                    <c:forEach items="${reviewList}" var="review">
                        <tr>
                            <td>${review.rating}점</td>
                            <td>${review.title}</td>
                            <td>${review.userid}</td>
                            <td>${review.reviewdate}</td>
                        </tr>
                        <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                            <td colspan="4">
                                <div class="review-content-wrapper">
                                    <div class="review-content">${review.content}</div>
                                    <div class="review-comments">
                                        <c:forEach items="${review.comments}" var="comment">
                                            <div class="comment">${comment.userid}: ${comment.text}</div>
                                        </c:forEach>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
        </div> <!-- id="review" class="tab-content" end -->

        <div id="all-reviews" class="tab-content" style="display: none;">
            <p>상품 전체 보기 내용</p>
            <!-- 전체 리뷰 리스트 링크 추가 -->
            <a href="/review/list">상품전체보기(리뷰리스트로 이동?)</a>
        </div>

    </div> <!-- review end -->
</div> <!-- 리뷰 내용 -->

<script>
    function openReviewPopup() {
        var isLoggedIn = '${not empty sessionScope.userID}';
        if (isLoggedIn) {
            var goodsid = '${goodsDto.goodsid}';
            var url = '/review/write?goodsid=' + goodsid;
            // 팝업 창 열기
            window.open(url, 'reviewPopup', 'width=800,height=600,scrollbars=yes,resizable=yes');
        } else {
            alert('로그인이 필요합니다.');
            // 예를 들어, 로그인 페이지로 이동하도록 설정할 수 있습니다.
            // window.location.href = '/login';
        }
    }

    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    // 초기로 'review' 탭의 콘텐츠를 보이도록 설정
    document.getElementById('review').style.display = 'block';
</script>















<div id="info04" class="tabcont">
    <!-- 리뷰 내용 -->
    <div class="review">
        <div class="review-tabs">
            <button class="tab-button active" onclick="showTab('review')">상품후기</button>
            <button class="tab-button" onclick="showTab('all-reviews')">상품전체보기(리뷰리스트로 이동?)</button>
            <button class="tab-button" onclick="redirectToLoginPage()">상품 글쓰기</button>
        </div>

        <div id="review" class="tab-content">
            <table>
                <thead>
                    <tr>
                        <th>평점</th>
                        <th>제목</th>
                        <th>작성자</th>
                        <th>작성일</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 리뷰 탭 내의 c:forEach 반복문 -->
                    <c:forEach items="${reviewList}" var="review">
                        <tr>
                            <td>${review.rating}점</td>
                            <td>${review.title}</td>
                            <td>${review.userid}</td>
                            <td>${review.reviewdate}</td>
                        </tr>
                        <tr id="review${review.reviewid}" class="review-details" style="display: none;">
                            <td colspan="4">
                                <div class="review-content-wrapper">
                                    <div class="review-content">${review.content}</div>
                                    <div class="review-comments">
                                        <c:forEach items="${review.comments}" var="comment">
                                            <div class="comment">${comment.userid}: ${comment.text}</div>
                                        </c:forEach>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
        </div> <!-- id="review" class="tab-content" end -->

        <div id="all-reviews" class="tab-content" style="display: none;">
            <p>상품 전체 보기 내용</p>
            <!-- 전체 리뷰 리스트 링크 추가 -->
            <a href="/review/list">상품전체보기(리뷰리스트로 이동?)</a>
        </div>

    </div> <!-- review end -->
</div> <!-- 리뷰 내용 -->

<script>
    function redirectToLoginPage() {
        var isLoggedIn = '${not empty sessionScope.userID}';
        if (!isLoggedIn) {
            // 로그인이 필요한 경우 로그인 페이지로 리다이렉트
            window.location.href = '/login';
        } else {
            // 로그인된 상태에서 상품 글쓰기 페이지로 이동
            var goodsid = '${goodsDto.goodsid}';
            window.location.href = '/review/write?goodsid=' + goodsid;
        }
    }

    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    // 초기로 'review' 탭의 콘텐츠를 보이도록 설정
    document.getElementById('review').style.display = 'block';
</script>

 
 





function redirectToLoginPage() {
        var isLoggedIn = '${not empty sessionScope.userID}';
        if (!isLoggedIn) {
            // 로그인이 필요한 경우 로그인 페이지로 리다이렉트
            window.location.href = '/login';
        } else {
        	// 세션 스코프에서 userid 가져오기
    	    var userId = '${sessionScope.userID}';
    	    console.log('사용자 아이디:', userId);
            
            // 로그인 여부에 따라 팝업을 띄웁니다.
            if (isLoggedIn) {
                window.alert('로그인되었습니다. 팝업을 띄웁니다.');
                // 여기에 추가적인 팝업 내용이나 로직을 추가할 수 있습니다.
            }
        }
    }

    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    // 초기로 'review' 탭의 콘텐츠를 보이도록 설정
    document.getElementById('review').style.display = 'block';
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 function redirectToLoginPage() {
        var isLoggedIn = '${not empty sessionScope.userID}';
        if (!isLoggedIn) {
            // 로그인이 필요한 경우 로그인 페이지로 리다이렉트
            window.location.href = '/login';
        } else {
        	// 세션 스코프에서 userid 가져오기
    	    var userId = '${sessionScope.userID}';
    	    console.log('사용자 아이디:', userId);
            
            // 로그인 여부에 따라 팝업을 띄웁니다.
            if (isLoggedIn) {
            	var width = 1000;
                var height = 900;

                // 화면의 중앙에 위치시키기 위한 좌표 계산
                var left = (screen.width - width) / 2;
                var top = (screen.height - height) / 2;

                // 창을 중앙에 띄우기
                window.open('/review/write?goodsid=${goodsDto.goodsid}', "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
            }
        }
    }

    function showTab(tabId) {
        var tabs = document.getElementsByClassName('tab-content');
        for (var i = 0; i < tabs.length; i++) {
            tabs[i].style.display = 'none';
        }
        document.getElementById(tabId).style.display = 'block';

        var buttons = document.getElementsByClassName('tab-button');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('active');
        }
        event.currentTarget.classList.add('active');
    }

    // 초기로 'review' 탭의 콘텐츠를 보이도록 설정
    document.getElementById('review').style.display = 'block';
    
    
    
    
    
    function redirectToLoginPage() {
    var isLoggedIn = '${not empty sessionScope.userID}';
    
    // 로그인이 필요한 경우 로그인 페이지로 리다이렉트
    if (!isLoggedIn) {
        window.location.href = '/login';
    } else {
        // 세션 스코프에서 userID 가져오기
        var userId = '${sessionScope.userID}';
        console.log('사용자 아이디:', userId);
        
        // 팝업 띄우기
        var width = 1000;
        var height = 900;
        
        // 화면의 중앙에 위치시키기 위한 좌표 계산
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;
        
        // 창을 중앙에 띄우기
        window.open('/review/write?goodsid=${goodsDto.goodsid}', "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
    }
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>상품 후기 쓰기</title>
  <!-- 부트스트랩 CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons CDN 추가 -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/jquery-3.7.1.min.js"></script>
  <link href="/css/styles.css" rel="stylesheet" type="text/css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            padding: 20px;
        }
        .board_write_popup {
        	width:600px;
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .ly_tit {
            margin-bottom: 20px;
            text-align: center;
        }
        .ly_cont {
            margin-bottom: 20px;
        }
        
        /* 이미지 및 상품명 센터 정렬 */
	    .top_item_photo_info {
	        text-align: center;
	        margin-bottom: 20px;
	    }
	    
	    .item_photo_box {
	        display: inline-block;
	    }
	    
	    .item_photo_box img {
	        max-width: 100%;
	        height: auto;
	    }
	    
	    /* 상품명 스타일 */
	    .productname {
	        font-size: 24px; /* 원하는 크기로 조정 */
	        font-weight: bold; /* 굵게 설정 */
	        margin-top: 10px; /* 필요에 따라 조정 */
	        margin-bottom: 10px; /* 필요에 따라 조정 */
	    } 
    
        .board_write_box {
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .board_write_table {
            width: 100%;
            margin-bottom: 0;
        }
        .board_write_table th {
            width: 15%;
            text-align: right;
            vertical-align: top;
        }
        .board_write_table td {
            width: 85%;
            padding-left: 10px;
        }
        .write_editor textarea {
            width: 100%;
            min-width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .btn_center_box {
            text-align: center;
        }
        .btn_ly_cancel, .btn_ly_write_ok {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            background-color: #007bff;
            border: 1px solid #007bff;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn_ly_cancel:hover, .btn_ly_write_ok:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
    <div class="board_write_popup">
        <div class="ly_tit">
            <h2>상품 후기 쓰기</h2>
        </div>
        
        <div class="ly_cont">
            <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data" onsubmit="return validateForm()">
                <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
                <input type="hidden" name="reviewid" id="reviewid" value="">
                <div class="scroll_box">
                    <div class="top_item_photo_info">
                        <div class="item_photo_box">
                            <img src="<c:url value='/images/서울 홈 유니폼(앞).jpg' />" width="300" alt="${param.goodsid} 상품 이미지" title="${param.goodsid} 상품 이미지" class="middle">
                        </div>
                        <br>
                        <c:forEach items="${goodsList}" var="goods">
				            <c:if test="${goods.goodsid eq param.goodsid}">
				                <h5 class="productname">${goods.productname}</h5>
				            </c:if>
				        </c:forEach>    
                    </div>
                    <!-- //top_item_photo_info -->

                    <div class="board_write_box">
                        <table class="board_write_table">
                            <colgroup>
                                <col style="width:15%">
                                <col style="width:85%">
                            </colgroup>
                            <tbody>
                                <tr>
                                    <th scope="row">작성자</th>
                                    <td>
                                        <input type="text" name="userid" id="userid" value="${userID}" class="form-control" readonly>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">제목</th>
                                    <td>
                                        <input type="text" name="title" id="title" class="form-control write_title" placeholder="제목 입력">
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">내용</th>
                                    <td class="write_editor">
                                        <textarea title="내용 입력" id="editor" class="form-control" name="content" id="content" rows="5" placeholder="내용을 입력하세요"></textarea>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">평점</th>
                                    <td>
                                        <label>
                                            <input type="radio" name="rating" value="1">
                                            1점
                                        </label>
                                        <label>
                                            <input type="radio" name="rating" value="2">
                                            2점
                                        </label>
                                        <label>
                                            <input type="radio" name="rating" value="3">
                                            3점
                                        </label>
                                        <label>
                                            <input type="radio" name="rating" value="4">
                                            4점
                                        </label>
                                        <label>
                                            <input type="radio" name="rating" value="5">
                                            5점
                                        </label>
                                        <br>
                                        <small class="text-muted">1점부터 5점까지의 점수 중 하나를 선택해주세요.</small>
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">파일</th>
                                    <td id="uploadBox">
                                        <div class="file_upload_sec" id="uploadSection">
                                            <input type="file" id="attach" name="upfiles[]" class="file" title="찾아보기">
                                            <div class="btn_upload_box">
                                                <button type="button" id="addUploadBtn" class="btn btn-outline-secondary btn_gray_big"><span>+ 추가</span></button>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <!-- //board_write_box -->
                </div>
                <!-- //scroll_box -->
                <div class="btn_center_box">
                    <a href="javascript:window.close()" class="btn btn-secondary btn_ly_cancel"><strong>취소</strong></a>
                    <input type="submit" value="등록" class="btn btn-primary btn_ly_write_ok">
                </div>
            </form>  
        </div>
        <!-- //ly_cont -->
    </div>
    <!-- //board_write_popup -->

    <script>
        function validateForm() {
            var title = document.getElementById('title').value.trim();
            var content = document.getElementById('content').value.trim();
            var radios = document.getElementsByName('rating');
            var ratingChecked = false;

            // Validate title
            if (title.length < 2) {
                alert('제목은 두 글자 이상이어야 합니다.');
                return false;
            }

            // Validate content
            if (content === '') {
                alert('내용을 입력해주세요.');
                return false;
            }

            // Validate rating
            for (var i = 0; i < radios.length; i++) {
                if (radios[i].checked) {
                    ratingChecked = true;
                    break;
                }
            }

            if (!ratingChecked) {
                alert('평점을 선택해주세요.');
                return false;
            }

            return true;
        }

        var uploadSection = document.getElementById('uploadSection');
        var addUploadBtn = document.getElementById('addUploadBtn');
        var uploadCount = 1;

        addUploadBtn.addEventListener('click', function() {
            var newInput = document.createElement('input');
            newInput.type = 'file';
            newInput.id = 'attach' + uploadCount;
            newInput.name = 'upfiles[]';
            newInput.className = 'file';
            newInput.title = '찾아보기';

            var span = document.createElement('span');
            span.className = 'btn_gray_list';
            var deleteBtn = document.createElement('button');
            deleteBtn.type = 'button';
            deleteBtn.className = 'btn btn-outline-secondary btn_gray_big';
            deleteBtn.innerHTML = '<span>- 삭제</span>';
            deleteBtn.addEventListener('click', function() {
                this.parentNode.previousSibling.remove(); // 파일 입력란 제거
                this.parentNode.remove(); // 삭제 버튼 제거
            });

            span.appendChild(deleteBtn);

            uploadSection.appendChild(newInput);
            uploadSection.appendChild(span);

            uploadCount++;
        });
    </script>
</body>
</html>
    




.review-tabs {
    display: flex;
    justify-content: flex-start; /* 기본적으로 왼쪽 정렬 */
}

.tab-button {
    margin-right: 10px; /* 버튼 사이에 간격을 줍니다. */
}

.tab-button.right-align {
    margin-left: auto; /* 오른쪽으로 이동시키기 위한 속성 */
}
<div class="review-tabs">
    <button class="tab-button active" onclick="showTab('review')">상품후기</button>
    <div class="right-buttons">
        <button class="tab-button" onclick="showTab('all-reviews')">
            <a href="/review/list">상품전체보기(리뷰리스트로 이동?)</a>
        </button>
        <button class="tab-button" onclick="openPopup('/review/write?goodsid=${goodsDto.goodsid}')">상품 글쓰기</button>
    </div>
</div>




.review-tabs {
    display: flex;
    justify-content: space-between; /* 양쪽 끝에 정렬 */
    align-items: center; /* 버튼들이 수직으로 중앙에 위치하도록 설정 */
}

.right-buttons {
    display: flex;
    gap: 10px; /* 두 버튼 사이의 간격 설정 */
}

.tab-button {
    margin: 0;
}

.tab-button a {
    text-decoration: none;
    color: inherit; /* a 태그의 기본 스타일을 제거하고 버튼 스타일에 맞춥니다. */
}
















package kr.co.matchday.memberships;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/memberships")
public class MembershipsCont {

    @Autowired
    private MembershipsDAO membershipsDao;

    @RequestMapping("/list")
    public ModelAndView list() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("memberships/list");
        mav.addObject("list", membershipsDao.list());
        return mav;
    }

    @GetMapping("/write")
    public String write() {
        return "memberships/write";
    }

    @PostMapping("/insert")
    public String insert(@RequestParam Map<String, Object> map,
                         @RequestParam("img") MultipartFile img,
                         HttpServletRequest req) {
        ServletContext application = req.getServletContext();
        String basePath = application.getRealPath("/storage/memberships");

        String filename = "-";
        long filesize = 0;

        try {
            if (!img.isEmpty()) {
                filesize = img.getSize();
                filename = uploadFile(basePath, img);
            }

            MembershipsDTO membershipsDto = new MembershipsDTO();
            membershipsDto.setMembershipid(UUID.randomUUID().toString()); // UUID를 사용하여 membershipid 생성
            membershipsDto.setMembershipname((String) map.get("membershipname"));
            membershipsDto.setPrice(parseInteger((String) map.get("price")));
            membershipsDto.setStartdate(parseDate((String) map.get("startdate")));
            membershipsDto.setEnddate(parseDate((String) map.get("enddate")));
            membershipsDto.setNotes((String) map.getOrDefault("notes", ""));
            membershipsDto.setDiscountamount(parseInteger((String) map.get("discountamount")));
            membershipsDto.setFilename(filename);
            membershipsDto.setFilesize(filesize);

            membershipsDao.insert(membershipsDto);

        } catch (Exception e) {
            e.printStackTrace();
            // 예외 처리 로직 추가
        }

        return "redirect:/memberships/list";
    }

    @GetMapping("/detail")
    public ModelAndView detail(@RequestParam("membershipid") String membershipid) {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("memberships/detail");
        mav.addObject("memberships", membershipsDao.detail(membershipid));
        return mav;
    }

    @GetMapping("/update")
    public ModelAndView updatedetail(@RequestParam("membershipid") String membershipid) {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("memberships/update");
        mav.addObject("detail", membershipsDao.detail(membershipid));
        return mav;
    }

    @PostMapping("/updateproc")
    public String update(@ModelAttribute MembershipsDTO membershipDTO,
                         @RequestParam(name = "img", required = false) MultipartFile img,
                         HttpServletRequest req) {
        ServletContext application = req.getServletContext();
        String basePath = application.getRealPath("/storage/memberships");

        String filename = membershipDTO.getFilename();
        long filesize = membershipDTO.getFilesize();

        try {
            if (img != null && !img.isEmpty()) {
                // 기존 파일 삭제
                deleteFile(basePath, filename);

                // 새 파일 업로드
                filename = uploadFile(basePath, img);
                filesize = img.getSize();
            }

            // 나머지 업데이트 로직은 유지
            membershipDTO.setStartdate(parseDate(req.getParameter("startdate")));
            membershipDTO.setEnddate(parseDate(req.getParameter("enddate")));
            membershipDTO.setFilename(filename);
            membershipDTO.setFilesize(filesize);

            membershipsDao.update(membershipDTO);

        } catch (IOException e) {
            e.printStackTrace();
            // 파일 업로드 중 예외 처리
        } catch (Exception e) {
            e.printStackTrace();
            // 그 외 예외 처리
        }

        return "redirect:/memberships/list";
    }

    private String uploadFile(String basePath, MultipartFile img) throws IOException {
        String originalFilename = img.getOriginalFilename();
        String filename = originalFilename;
        File file = new File(basePath, originalFilename);
        int i = 1;
        while (file.exists()) {
            int lastDot = originalFilename.lastIndexOf(".");
            filename = originalFilename.substring(0, lastDot) + "_" + i + originalFilename.substring(lastDot);
            file = new File(basePath, filename);
            i++;
        }
        img.transferTo(file);
        return filename;
    }

    private void deleteFile(String basePath, String filename) {
        if (filename != null && !filename.isEmpty()) {
            File existingFile = new File(basePath, filename);
            if (existingFile.exists()) {
                existingFile.delete();
            }
        }
    }

    private Integer parseInteger(String value) {
        if (value == null || value.trim().isEmpty()) {
            return 0; // 기본값으로 0을 반환
        }
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return 0; // 기본값으로 0을 반환
        }
    }

    private Date parseDate(String value) {
        if (value == null || value.trim().isEmpty()) {
            return null;
        }
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            return dateFormat.parse(value);
       
















package kr.co.matchday.memberships;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/memberships")
public class MembershipsCont {

    @Autowired
    private MembershipsDAO membershipsDao;

    @RequestMapping("/list")
    public ModelAndView list() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("memberships/list");
        mav.addObject("list", membershipsDao.list());
        return mav;
    }

    @GetMapping("/write")
    public String write() {
        return "memberships/write";
    }

    @PostMapping("/insert")
    public String insert(@RequestParam Map<String, Object> map,
                         @RequestParam("img") MultipartFile img,
                         HttpServletRequest req) {
        ServletContext application = req.getServletContext();
        String basePath = application.getRealPath("/storage/memberships");

        String filename = "-";
        long filesize = 0;

        try {
            if (!img.isEmpty()) {
                filesize = img.getSize();
                filename = uploadFile(basePath, img);
            }

            MembershipsDTO membershipsDto = new MembershipsDTO();
            membershipsDto.setMembershipid(UUID.randomUUID().toString());
            membershipsDto.setMembershipname((String) map.get("membershipname"));
            membershipsDto.setPrice(parseInteger((String) map.get("price")));
            membershipsDto.setStartdate(parseDate((String) map.get("startdate")));
            membershipsDto.setEnddate(parseDate((String) map.get("enddate")));
            membershipsDto.setNotes((String) map.getOrDefault("notes", ""));
            membershipsDto.setDiscountamount(parseInteger((String) map.get("discountamount")));
            membershipsDto.setFilename(filename);
            membershipsDto.setFilesize(filesize);

            membershipsDao.insert(membershipsDto);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return "redirect:/memberships/list";
    }

    @GetMapping("/update")
    public ModelAndView update(@RequestParam String membershipid) {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("memberships/update");
        mav.addObject("memberships", membershipsDao.read(membershipid));
        return mav;
    }

    @PostMapping("/updateproc")
    public String updateproc(@RequestParam Map<String, Object> map,
                             @RequestParam("img") MultipartFile img,
                             HttpServletRequest req) {
        ServletContext application = req.getServletContext();
        String basePath = application.getRealPath("/storage/memberships");

        String filename = "-";
        long filesize = 0;

        try {
            if (!img.isEmpty()) {
                filename = uploadFile(basePath, img);
                filesize = img.getSize();
            } else {
                filename = (String) map.get("existingFilename");
                filesize = Long.parseLong((String) map.get("existingFilesize"));
            }

            MembershipsDTO membershipsDto = new MembershipsDTO();
            membershipsDto.setMembershipid((String) map.get("membershipid"));
            membershipsDto.setMembershipname((String) map.get("membershipname"));
            membershipsDto.setPrice(parseInteger((String) map.get("price")));
            membershipsDto.setStartdate(parseDate((String) map.get("startdate")));
            membershipsDto.setEnddate(parseDate((String) map.get("enddate")));
            membershipsDto.setNotes((String) map.getOrDefault("notes", ""));
            membershipsDto.setDiscountamount(parseInteger((String) map.get("discountamount")));
            membershipsDto.setFilename(filename);
            membershipsDto.setFilesize(filesize);

            membershipsDao.update(membershipsDto);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return "redirect:/memberships/list";
    }

    private String uploadFile(String basePath, MultipartFile img) throws IllegalStateException, IOException {
        String filename = UUID.randomUUID().toString() + "_" + img.getOriginalFilename();
        File file = new File(basePath, filename);
        img.transferTo(file);
        return filename;
    }

    private Integer parseInteger(String value) {
        if (value == null || value.trim().isEmpty()) {
            return 0;
        }
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return 0;
        }
    }

    private Date parseDate(String value) {
        if (value == null || value.trim().isEmpty()) {
            return null;
        }
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            return dateFormat.parse(value);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}














package kr.co.matchday.memberships;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MembershipsDAO {

   public MembershipsDAO() {
      System.out.println("-----MembershipsDAO() 객체 생성됨");
   }//end
      
    @Autowired
    SqlSession sqlSession;
    
    public void insert(MembershipsDTO membershipsDto) {
       sqlSession.insert("memberships.insert", membershipsDto);
   }//insert end
      
    public List<MembershipsDTO> list() {
       return sqlSession.selectList("memberships.list");
   }//list end
    
    public MembershipsDTO read(String membershipid) {
        return sqlSession.selectOne("memberships.detail", membershipid);
    }//read end
    
    public void delete(String membershipid) {
        sqlSession.delete("memberships.delete", membershipid);
    }//delete end
    
    public void update(MembershipsDTO membershipsDto) {
        sqlSession.update("memberships.update", membershipsDto);
    }//update end
    
    public String filename(String membershipid) {
        return sqlSession.selectOne("memberships.filename", membershipid);
    }//filename end
}//class end



@GetMapping("/update")
public ModelAndView update(@RequestParam("membershipid") String membershipid) {
    ModelAndView mav = new ModelAndView();
    mav.setViewName("memberships/update");
    mav.addObject("memberships", membershipsDao.read(membershipid));
    return mav;
}












String filename = (String) map.get("existingFilename");
Long filesize = null;

// Check if filesize is provided and not null
if (map.get("existingFilesize") != null) {
    try {
        filesize = Long.parseLong((String) map.get("existingFilesize"));
    } catch (NumberFormatException e) {
        // Handle the case where existingFilesize is not a valid long
        // You might want to log an error or handle this case appropriately
        e.printStackTrace(); // Or log the exception
        // Optionally provide a default value or handle the error case
    }
}

// Now you can use filename and filesize safely






















@PostMapping("/updateproc")
public String updateproc(@RequestParam Map<String, Object> map,
                         @RequestParam(value = "img", required = false) MultipartFile img,
                         HttpServletRequest req) {
    ServletContext application = req.getServletContext();
    String basePath = application.getRealPath("/storage/memberships");

    String filename = "-";
    long filesize = 0;

    try {
        // Handle the case when img is not empty
        if (img != null && !img.isEmpty()) {
            filename = uploadFile(basePath, img);
            filesize = img.getSize();
        } else {
            // Handle the case when img is empty or not provided
            filename = (String) map.get("existingFilename");
            String existingFilesize = (String) map.get("existingFilesize");

            if (existingFilesize != null && !existingFilesize.isEmpty()) {
                filesize = Long.parseLong(existingFilesize);
            } else {
                // If existingFilesize is null or empty, set filesize to 0 or handle it as appropriate
                filesize = 0; // or any default value that makes sense in your context
            }
        }

        MembershipsDTO membershipsDto = new MembershipsDTO();
        membershipsDto.setMembershipid((String) map.get("membershipid"));
        membershipsDto.setMembershipname((String) map.get("membershipname"));
        membershipsDto.setPrice(parseInteger((String) map.get("price")));
        membershipsDto.setStartdate(parseDate((String) map.get("startdate")));
        membershipsDto.setEnddate(parseDate((String) map.get("enddate")));
        membershipsDto.setNotes((String) map.getOrDefault("notes", ""));
        membershipsDto.setDiscountamount(parseInteger((String) map.get("discountamount")));
        membershipsDto.setFilename(filename);
        membershipsDto.setFilesize(filesize);

        membershipsDao.update(membershipsDto);

    } catch (Exception e) {
        e.printStackTrace();
        // Handle the exception as needed
    }

    return "redirect:/memberships/list";
}














// Controller에서의 예시
@GetMapping("/product/reviews")
public String showReviews(@RequestParam("goodsId") Long goodsId, Model model) {
    List<Review> reviewList = reviewService.getReviewsByGoodsId(goodsId);
    model.addAttribute("reviewList", reviewList);
    return "reviewPage"; // 리뷰를 보여주는 JSP 페이지
}








package kr.co.matchday.goods;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.review.ReviewDAO;
import kr.co.matchday.review.ReviewDTO;

@Controller
@RequestMapping("/goods")
public class GoodsCont {

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private ReviewDAO reviewDao;

    @GetMapping("/review")
    public ModelAndView showReviews(@RequestParam("goodsId") Long goodsId, HttpSession session) {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("goods/review");

        // 리뷰 목록 조회
        mav.addObject("reviewList", reviewDao.getReviewsByGoodsId(goodsId));

        // 다른 필요한 정보들도 함께 전달 가능
        String userID = (String) session.getAttribute("userID");
        mav.addObject("userID", userID);

        return mav;
    }

    @PostMapping("/updateReview")
    public String updateReview(@RequestParam("reviewid") Long reviewId) {
        // 리뷰 수정 로직 구현
        // reviewDao.updateReview(reviewId); // 실제 DAO 호출 필요

        return "redirect:/goods/review";
    }

    @PostMapping("/deleteReview")
    public String deleteReview(@RequestParam("reviewid") Long reviewId) {
        // 리뷰 삭제 로직 구현
        // reviewDao.deleteReview(reviewId); // 실제 DAO 호출 필요

        return "redirect:/goods/review";
    }
}














package kr.co.matchday.review;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class ReviewDAO {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<ReviewDTO> getReviewsByGoodsId(Long goodsId) {
        String sql = "SELECT * FROM reviews WHERE goods_id = ?";
        return jdbcTemplate.query(sql, new Object[] { goodsId }, (rs, rowNum) -> {
            ReviewDTO review = new ReviewDTO();
            review.setReviewId(rs.getLong("review_id"));
            review.setRating(rs.getInt("rating"));
            review.setTitle(rs.getString("title"));
            review.setContent(rs.getString("content"));
            review.setUserId(rs.getString("user_id"));
            review.setReviewDate(rs.getTimestamp("review_date").toLocalDateTime());
            return review;
        });
    }

    // 다음과 같은 방식으로 updateReview 및 deleteReview 메서드를 구현할 수 있습니다.
    // public void updateReview(Long reviewId) { ... }
    // public void deleteReview(Long reviewId) { ... }
}




<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="kr.co.matchday.review.ReviewMapper">






    <!-- 리뷰 상세 조회 -->
    <select id="getReviewById" resultType="kr.co.matchday.review.ReviewDTO" parameterType="String">
        SELECT *
        FROM reviews
        WHERE reviewid = #{reviewid}
    </select>

   
</mapper>








package kr.co.matchday.goods;

import java.sql.Timestamp;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import kr.co.matchday.review.ReviewDAO;
import kr.co.matchday.review.ReviewDTO;

@Controller
@RequestMapping("/goods")
public class GoodsCont {

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private ReviewDAO reviewDao;

    // 상품 상세 페이지 조회
    @GetMapping("/detail")
    public ModelAndView detail(@RequestParam("goodsid") String goodsid, Model model, HttpSession session) {
        ModelAndView mav = new ModelAndView();
        mav.setViewName("goods/detail");

        // 상품 정보 조회
        GoodsDTO goodsDto = goodsDao.detail(goodsid);
        mav.addObject("goodsDto", goodsDto);

        // 상품의 리뷰 목록 조회
        List<ReviewDTO> reviewList = reviewDao.getReviewList(goodsid);
        mav.addObject("reviewList", reviewList);

        // 세션에서 userID를 가져와서 사용자가 로그인한 상태인지 확인
        String userID = (String) session.getAttribute("userID");
        mav.addObject("userID", userID);

        return mav;
    }

    // 리뷰 등록 처리
    @PostMapping("/addReview")
    public String addReview(@ModelAttribute ReviewDTO reviewDto) {
        reviewDto.setReviewdate(new Timestamp(System.currentTimeMillis())); // 현재 시간으로 리뷰 작성 날짜 설정
        reviewDao.insertReview(reviewDto);
        return "redirect:/goods/detail?goodsid=" + reviewDto.getGoodsid();
    }

    // 리뷰 수정 처리
    @PostMapping("/updateReview")
    public String updateReview(@ModelAttribute ReviewDTO reviewDto) {
        reviewDao.updateReview(reviewDto);
        return "redirect:/goods/detail?goodsid=" + reviewDto.getGoodsid();
    }

    // 리뷰 삭제 처리
    @PostMapping("/deleteReview")
    public String deleteReview(@RequestParam("reviewid") String reviewid, @RequestParam("goodsid") String goodsid) {
        reviewDao.deleteReview(reviewid);
        return "redirect:/goods/detail?goodsid=" + goodsid;
    }
}








// 파일 선택란에 추가 버튼 누를시 파일선택 버튼과 삭제버튼 생성
var uploadSection = document.getElementById('uploadSection');
var addUploadBtn = document.getElementById('addUploadBtn');
var uploadCount = 1;

addUploadBtn.addEventListener('click', function() {
    var newInput = document.createElement('input');
    newInput.type = 'file';
    newInput.id = 'img' + uploadCount;
    newInput.name = 'upfiles[]';
    newInput.className = 'file';
    newInput.title = '찾아보기';

    var span = document.createElement('span');
    span.className = 'btn_gray_list';
    var deleteBtn = document.createElement('button');
    deleteBtn.type = 'button';
    deleteBtn.className = 'btn btn-outline-secondary btn_gray_big';
    deleteBtn.innerHTML = '<span>- 삭제</span>';
    deleteBtn.addEventListener('click', function() {
        this.parentNode.previousSibling.remove(); // 파일 입력란 제거
        this.parentNode.remove(); // 삭제 버튼 제거
    });

    span.appendChild(deleteBtn);

    uploadSection.appendChild(newInput);
    uploadSection.appendChild(span);

    uploadCount++;
});







package kr.co.matchday.review;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.IOException;
import java.util.UUID;

@Controller
@RequestMapping("/review")
public class ReviewController {

    @Autowired
    private ReviewDAO reviewDao;

    @PostMapping("/insert")
    public String insertReview(HttpServletRequest request) throws IOException {
        String goodsid = request.getParameter("goodsid");
        String title = request.getParameter("title");
        String content = request.getParameter("content");
        int rating = Integer.parseInt(request.getParameter("rating"));

        // 파일 처리
        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
        MultipartFile multipartFile = multipartRequest.getFile("upfiles[]");

        String originalFileName = multipartFile.getOriginalFilename();
        String filename = generateFileName(originalFileName);

        String savePath = "/src/main/webapp/storage"; // 저장할 경로 설정 (실제 경로에 맞게 변경 필요)

        File file = new File(savePath + "/" + filename);
        multipartFile.transferTo(file); // 파일 저장

        // 리뷰 정보 저장
        ReviewDTO reviewDto = new ReviewDTO();
        reviewDto.setGoodsid(goodsid);
        reviewDto.setTitle(title);
        reviewDto.setContent(content);
        reviewDto.setRating(rating);
        reviewDto.setFilename(filename); // 파일명 저장

        reviewDao.insert(reviewDto); // 리뷰 정보 DB에 저장

        return "redirect:/goods/detail?goodsid=" + goodsid;
    }

    private String generateFileName(String originalFileName) {
        String filename;
        String extension;

        int lastIndex = originalFileName.lastIndexOf('.');
        if (lastIndex == -1) {
            filename = originalFileName;
            extension = "";
        } else {
            filename = originalFileName.substring(0, lastIndex);
            extension = originalFileName.substring(lastIndex);
        }

        return filename + "_" + UUID.randomUUID().toString() + extension;
    }
}


















import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping("/review")
public class ReviewCont {

    @Autowired
    private ReviewDAO reviewDao;

    @Autowired
    private GoodsDAO goodsDao;

    // 리뷰 작성 폼 요청 처리
    @GetMapping("/write")
    public String write(@ModelAttribute("reviewDto") ReviewDTO reviewDto, Model model, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        return "review/write"; // 리뷰 작성 폼으로 이동
    }

    // 리뷰 작성 처리
    @PostMapping("/insert")
    public String insert(@ModelAttribute ReviewDTO reviewDto, @RequestParam("upfiles") MultipartFile[] files, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 사용자 ID, 굿즈 ID 설정
        reviewDto.setUserid(userid);
        reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
        reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요

        // 리뷰 정보 DB에 저장
        reviewDao.insert(reviewDto);

        // 파일 업로드 처리
        if (files != null && files.length > 0) {
            for (MultipartFile file : files) {
                if (!file.isEmpty()) {
                    try {
                        // 실제 서버에 파일 저장하는 로직 추가 (예: 파일명 중복 처리 필요)
                        String filePath = "/your/server/path/" + file.getOriginalFilename(); // 실제 저장할 경로 설정
                        File dest = new File(filePath);
                        file.transferTo(dest);
                        // 리뷰ID와 함께 DB에 파일 정보 저장하는 로직 추가 필요
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        return "redirect:/review/list"; // 리뷰 목록 페이지로 리디렉션
    }

    // 리뷰 목록 조회
    @GetMapping("/list")
    public String list(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 모든 리뷰와 상품 목록을 조회하여 모델에 추가
        List<ReviewDTO> reviewList = reviewDao.list();
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("reviewList", reviewList);
        model.addAttribute("goodsList", goodsList);

        return "review/list"; // 리뷰 목록 페이지로 이동
    }
}

























package kr.co.matchday.order;

import java.sql.Timestamp;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@NoArgsConstructor
@Getter
@Setter
@ToString
public class OrderDTO {

    private String orderid; // 주문 ID
    private String userid; // 사용자 ID
    private Timestamp orderdate; // 주문 날짜
    private String orderstatus; // 주문 상태 ('Pending', 'Completed')
    private String couponid; // 쿠폰 ID
    private Integer usedpoints; // 사용한 포인트
    private Integer finalpaymentamount; // 최종 결제 금액
    private Timestamp shippingstartdate; // 배송 시작 날짜
    private Timestamp shippingenddate; // 배송 종료 날짜
    private String shippingstatus; // 배송 상태 ('Pending', 'Completed')
    private String recipientname; // 수령인 이름
    private String shippingaddress; // 배송 주소
    private String shippingrequest; // 배송 요청사항
    private String paymentmethodcode; // 결제 방법 코드
    private Integer price; // 가격
    private Integer quantity; // 수량
    private String receiptmethodcode; // 영수증 방법 코드

    // 생성자, Getter 및 Setter 메서드는 Lombok이 자동으로 생성합니다.
}













package kr.co.matchday.order;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class OrderDAOImpl implements OrderDAO {

    @Autowired
    private SqlSession sqlSession;

    private static final String NAMESPACE = "kr.co.matchday.order.OrderMapper";


    public List<Order> findAll() {
        return sqlSession.selectList(NAMESPACE + ".findAll");
    }

    public Order findById(String orderid) {
        return sqlSession.selectOne(NAMESPACE + ".findById", orderid);
    }

    public void insert(Order order) {
        sqlSession.insert(NAMESPACE + ".insert", order);
    }

    public void update(Order order) {
        sqlSession.update(NAMESPACE + ".update", order);
    }

    public void deleteById(String orderid) {
        sqlSession.delete(NAMESPACE + ".deleteById", orderid);
    }
}





package kr.co.matchday.order;

import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/orders")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @GetMapping
    public List<OrderDTO> getAllOrders() {
        List<Order> orders = orderDao.findAll();
        return orders.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @GetMapping("/{orderid}")
    public ResponseEntity<OrderDTO> getOrderById(@PathVariable String orderid) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            return ResponseEntity.ok(convertToDTO(order));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public void createOrder(@RequestBody OrderDTO orderDto) {
        orderDao.insert(convertToEntity(orderDto));
    }

    @PutMapping("/{orderid}")
    public ResponseEntity<OrderDTO> updateOrder(@PathVariable String orderid, @RequestBody OrderDTO orderDto) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            Order updatedOrder = convertToEntity(orderDto);
            updatedOrder.setOrderid(orderid);
            orderDao.update(updatedOrder);
            return ResponseEntity.ok(convertToDTO(updatedOrder));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{orderid}")
    public ResponseEntity<Void> deleteOrder(@PathVariable String orderid) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            orderDao.deleteById(orderid);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    private OrderDTO convertToDTO(Order order) {
        OrderDTO dto = new OrderDTO();
        dto.setOrderid(order.getOrderid());
        dto.setUserid(order.getUserid());
        dto.setOrderdate(order.getOrderdate());
        dto.setOrderstatus(order.getOrderstatus());
        dto.setCouponid(order.getCouponid());
        dto.setUsedpoints(order.getUsedpoints());
        dto.setFinalpaymentamount(order.getFinalpaymentamount());
        dto.setShippingstartdate(order.getShippingstartdate());
        dto.setShippingenddate(order.getShippingenddate());
        dto.setShippingstatus(order.getShippingstatus());
        dto.setRecipientname(order.getRecipientname());
        dto.setShippingaddress(order.getShippingaddress());
        dto.setShippingrequest(order.getShippingrequest());
        dto.setPaymentmethodcode(order.getPaymentmethodcode());
        dto.setPrice(order.getPrice());
        dto.setQuantity(order.getQuantity());
        dto.setReceiptmethodcode(order.getReceiptmethodcode());
        return dto;
    }

    private Order convertToEntity(OrderDTO dto) {
        Order order = new Order();
        order.setOrderid(dto.getOrderid());
        order.setUserid(dto.getUserid());
        order.setOrderdate(dto.getOrderdate());
        order.setOrderstatus(dto.getOrderstatus());
        order.setCouponid(dto.getCouponid());
        order.setUsedpoints(dto.getUsedpoints());
        order.setFinalpaymentamount(dto.getFinalpaymentamount());
        order.setShippingstartdate(dto.getShippingstartdate());
        order.setShippingenddate(dto.getShippingenddate());
        order.setShippingstatus(dto.getShippingstatus());
        order.setRecipientname(dto.getRecipientname());
        order.setShippingaddress(dto.getShippingaddress());
        order.setShippingrequest(dto.get



















package kr.co.matchday.order;

import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @GetMapping
    public List<OrderDTO> getAllOrders() {
        List<Order> orders = orderDao.findAll();
        return orders.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @GetMapping("/{orderid}")
    public ResponseEntity<OrderDTO> getOrderById(@PathVariable String orderid) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            return ResponseEntity.ok(convertToDTO(order));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public void createOrder(@RequestBody OrderDTO orderDto) {
        orderDao.insert(convertToEntity(orderDto));
    }

    @PutMapping("/{orderid}")
    public ResponseEntity<OrderDTO> updateOrder(@PathVariable String orderid, @RequestBody OrderDTO orderDto) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            Order updatedOrder = convertToEntity(orderDto);
            updatedOrder.setOrderid(orderid);
            orderDao.update(updatedOrder);
            return ResponseEntity.ok(convertToDTO(updatedOrder));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{orderid}")
    public ResponseEntity<Void> deleteOrder(@PathVariable String orderid) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            orderDao.deleteById(orderid);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    private OrderDTO convertToDTO(Order order) {
        OrderDTO dto = new OrderDTO();
        dto.setOrderid(order.getOrderid());
        dto.setUserid(order.getUserid());
        dto.setOrderdate(order.getOrderdate());
        dto.setOrderstatus(order.getOrderstatus());
        dto.setCouponid(order.getCouponid());
        dto.setUsedpoints(order.getUsedpoints());
        dto.setFinalpaymentamount(order.getFinalpaymentamount());
        dto.setShippingstartdate(order.getShippingstartdate());
        dto.setShippingenddate(order.getShippingenddate());
        dto.setShippingstatus(order.getShippingstatus());
        dto.setRecipientname(order.getRecipientname());
        dto.setShippingaddress(order.getShippingaddress());
        dto.setShippingrequest(order.getShippingrequest());
        dto.setPaymentmethodcode(order.getPaymentmethodcode());
        dto.setPrice(order.getPrice());
        dto.setQuantity(order.getQuantity());
        dto.setReceiptmethodcode(order.getReceiptmethodcode());
        return dto;
    }

    private Order convertToEntity(OrderDTO dto) {
        Order order = new Order();
        order.setOrderid(dto.getOrderid());
        order.setUserid(dto.getUserid());
        order.setOrderdate(dto.getOrderdate());
        order.setOrderstatus(dto.getOrderstatus());
        order.setCouponid(dto.getCouponid());
        order.setUsedpoints(dto.getUsedpoints());
        order.setFinalpaymentamount(dto.getFinalpaymentamount());
        order.setShippingstartdate(dto.getShippingstartdate());
        order.setShippingenddate(dto.getShippingenddate());
        order.setShippingstatus(dto.getShippingstatus());
        order.setRecipientname(dto.getRecipientname());
        order.setShippingaddress(dto.getShippingaddress());
        order.setShippingrequest(dto.getShippingrequest());
        order.setPaymentmethodcode(dto.getPaymentmethodcode());
        order.setPrice(dto.getPrice());
        order.setQuantity(dto.getQuantity());
        order.setReceiptmethodcode(dto.getReceiptmethodcode());
        return order;
    }
}









































package kr.co.matchday.order;

import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @GetMapping
    public List<OrderDTO> getAllOrders() {
        List<Order> orders = orderDao.findAll();
        return orders.stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    @GetMapping("/{orderid}")
    public ResponseEntity<OrderDTO> getOrderById(@PathVariable String orderid) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            return ResponseEntity.ok(convertToDTO(order));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public void createOrder(@RequestBody OrderDTO orderDto) {
        orderDao.insert(convertToEntity(orderDto));
    }

    @PutMapping("/{orderid}")
    public ResponseEntity<OrderDTO> updateOrder(@PathVariable String orderid, @RequestBody OrderDTO orderDto) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            Order updatedOrder = convertToEntity(orderDto);
            updatedOrder.setOrderid(orderid);
            orderDao.update(updatedOrder);
            return ResponseEntity.ok(convertToDTO(updatedOrder));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{orderid}")
    public ResponseEntity<Void> deleteOrder(@PathVariable String orderid) {
        Order order = orderDao.findById(orderid);
        if (order != null) {
            orderDao.deleteById(orderid);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    private OrderDTO convertToDTO(Order order) {
        OrderDTO dto = new OrderDTO();
        dto.setOrderid(order.getOrderid());
        dto.setUserid(order.getUserid());
        dto.setOrderdate(order.getOrderdate());
        dto.setOrderstatus(order.getOrderstatus());
        dto.setCouponid(order.getCouponid());
        dto.setUsedpoints(order.getUsedpoints());
        dto.setFinalpaymentamount(order.getFinalpaymentamount());
        dto.setShippingstartdate(order.getShippingstartdate());
        dto.setShippingenddate(order.getShippingenddate());
        dto.setShippingstatus(order.getShippingstatus());
        dto.setRecipientname(order.getRecipientname());
        dto.setShippingaddress(order.getShippingaddress());
        dto.setShippingrequest(order.getShippingrequest());
        dto.setPaymentmethodcode(order.getPaymentmethodcode());
        dto.setPrice(order.getPrice());
        dto.setQuantity(order.getQuantity());
        dto.setReceiptmethodcode(order.getReceiptmethodcode());
        return dto;
    }

    private Order convertToEntity(OrderDTO dto) {
        Order order = new Order();
        order.setOrderid(dto.getOrderid());
        order.setUserid(dto.getUserid());
        order.setOrderdate(dto.getOrderdate());
        order.setOrderstatus(dto.getOrderstatus());
        order.setCouponid(dto.getCouponid());
        order.setUsedpoints(dto.getUsedpoints());
        order.setFinalpaymentamount(dto.getFinalpaymentamount());
        order.setShippingstartdate(dto.getShippingstartdate());
        order.setShippingenddate(dto.getShippingenddate());
        order.setShippingstatus(dto.getShippingstatus());
        order.setRecipientname(dto.getRecipientname());
        order.setShippingaddress(dto.getShippingaddress());
        order.setShippingrequest(dto.getShippingrequest());
        order.setPaymentmethodcode(dto.getPaymentmethodcode());
        order.setPrice(dto.getPrice());
        order.setQuantity(dto.getQuantity());
        order.setReceiptmethodcode(dto.getReceiptmethodcode());
        return order;
    }
}


package kr.co.matchday.order;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/order")
public class OrderCont {

    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }

    @Autowired
    private OrderDAO orderDao;

    @PostMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        orderDto.setUserid(userid);
        
        // 주문 정보 삽입
        orderDao.insert(orderDto);
        
        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid) {
        // 여기에서 결제 관련 로직을 처리합니다.
        // 예를 들어, 결제 페이지로 이동
        return "order/payment";
    }

}


















package kr.co.matchday.order;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class OrderDAO {

    public OrderDAO() {
        System.out.println("-----OrderDAO() 객체 생성됨");
    }

    @Autowired
    private SqlSession sqlSession;

    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }

}











<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.order.OrderDAO">

    <select id="findAll" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM orders
    </select>

    <select id="findById" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM orders WHERE orderid = #{orderid}
    </select>

    <insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
        INSERT INTO orders (orderid, userid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, 
                             shippingstartdate, shippingenddate, shippingstatus, recipientname, shippingaddress, 
                             shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
        VALUES (#{orderid}, #{userid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, 
                #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{shippingaddress}, 
                #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
    </insert>

    <update id="update" parameterType="kr.co.matchday.order.OrderDTO">
        UPDATE orders
        SET userid = #{userid}, orderdate = #{orderdate}, orderstatus = #{orderstatus}, couponid = #{couponid}, 
            usedpoints = #{usedpoints}, finalpaymentamount = #{finalpaymentamount}, shippingstartdate = #{shippingstartdate}, 
            shippingenddate = #{shippingenddate}, shippingstatus = #{shippingstatus}, recipientname = #{recipientname}, 
            shippingaddress = #{shippingaddress}, shippingrequest = #{shippingrequest}, paymentmethodcode = #{paymentmethodcode}, 
            price = #{price}, quantity = #{quantity}, receiptmethodcode = #{receiptmethodcode}
        WHERE orderid = #{orderid}
    </update>

    <delete id="deleteById" parameterType="String">
        DELETE FROM orders WHERE orderid = #{orderid}
    </delete>

</mapper>

























<script>
    // 전체 선택 체크박스 클릭 시 모든 체크박스를 선택 또는 해제하는 함수
    function toggleCheckboxes(checked) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = checked;
        }
        calculateTotal();
    }

    // 수량 증가 함수
    function incrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) + 1;
        input.value = newValue;
        updateTotalPrice();
    }

    // 수량 감소 함수
    function decrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) - 1;
        if (newValue >= 0) {
            input.value = newValue;
            updateTotalPrice();
        }
    }

    // 수량 변경에 따른 총 가격 업데이트 함수
    function updateTotalPrice() {
        var totalSelectedCount = 0;
        var totalSelectedPrice = 0;

        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                totalSelectedCount++;
                var row = checkbox.parentNode.parentNode;
                var quantity = parseInt(row.querySelector('.quantity-input').value);
                var unitPrice = parseInt(row.cells[4].textContent.replace('원', '').replace(',', '')); // 단가가 표시된 셀 인덱스를 가정
                var totalPrice = quantity * unitPrice;
                totalSelectedPrice += totalPrice;
                row.cells[5].textContent = totalPrice.toLocaleString() + ("원"); // 총 가격 열 업데이트
            }
        }

        // 화면에 표시되는 총합 업데이트
        document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
        document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();
        
        // 배송비 계산 및 총 결제 가격 업데이트
        var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
        document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();
        
        var totalSettlePrice = totalSelectedPrice + deliveryCharge;
        document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
    }// updateTotalPrice() end

    // 수량 입력 변경 이벤트 리스너
    document.addEventListener("DOMContentLoaded", function() {
        var quantityInputs = document.querySelectorAll('.quantity-input');
        for (var input of quantityInputs) {
            input.addEventListener('change', updateTotalPrice);
        }
    });
 
    // 선택된 상품의 개수와 총 가격을 계산하여 표시하는 함수
    function calculateTotal() {
        var totalSelectedCount = 0;
        var totalSelectedPrice = 0;

        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                totalSelectedCount++;
                var row = checkbox.parentNode.parentNode;
                var totalPriceCell = row.cells[5];
                totalSelectedPrice += parseInt(totalPriceCell.textContent.replace('원', '').replace(',', ''));
            }
        }//for end

     	// 상품금액 표시
        document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
        document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString(); // 콤마(,) 표시 추가

        // 배송비 계산
        var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
        document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();
        
        // 합계 계산
        var totalSettlePrice = totalSelectedPrice + deliveryCharge;
        document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
    }//calculateTotal() end
    
 	// 문서 로드 시 장바구니에 상품이 없는 경우 메시지 표시
    document.addEventListener("DOMContentLoaded", function() {
        var cartItems = document.getElementsByName('selectedItems');
        if (cartItems.length === 0) {
            document.getElementById('noDataMessage').style.display = 'block';
        }
    });
 	
 	// 선택된 상품 삭제 함수
    function deleteSelectedItems() {
        var selectedItems = [];
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                selectedItems.push(checkbox.value);
            }
        }

        if (selectedItems.length === 0) {
            alert("삭제할 상품을 선택해주세요.");
            return;
        }

        if (confirm("선택한 상품을 삭제하시겠습니까?")) {
            var url = '/cart/delete?cartid=' + selectedItems.join(',');
            location.href = url;
        }
    }//deleteSelectedItems() end

    // 전체 상품 삭제 함수
    function deleteAllItems() {
        if (confirm("전체 상품을 삭제하시겠습니까?")) {
            var checkboxes = document.getElementsByName('selectedItems');
            for (var checkbox of checkboxes) {
                checkbox.checked = true;
            }
            var selectedItems = [];
            for (var checkbox of checkboxes) {
                selectedItems.push(checkbox.value);
            }
            var url = '/cart/delete?cartid=' + selectedItems.join(',');
            location.href = url;
        }
    }

	// 버튼에 기능을 첨부합니다
    document.addEventListener("DOMContentLoaded", function() {
        document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
        document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
    }); //deleteSelectedItems() end

    function openPopup(url) {
        var selectedItems = [];
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                selectedItems.push(checkbox.value);
            }
        }

        if (selectedItems.length === 0) {
            alert("상품을 선택해주세요.");
            return;
        }

        var queryString = selectedItems.join(',');
        var popupUrl = url + '?cartid=' + queryString;
        
        window.open(popupUrl, "popupWindow", "width=1200,height=800,scrollbars=yes");
    }// openPopup(url) end
</script>








<div class="shopping-buy">
    <a href="/goods/list" class="shop_go_link"><em>&lt; 쇼핑 계속하기</em></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <button type="button" class="buy-button" onclick="proceedToPayment()">구매하기</button>
</div>


// Proceed to payment function
function proceedToPayment() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("상품을 선택해주세요.");
        return;
    }

    var url = '/order/payment?goodsid=' + selectedItems.join(',');
    location.href = url;
}














<style>
        /* Reset CSS */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    padding: 20px;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1, h2 {
    font-size: 24px;
    margin-bottom: 20px;
}

.order-section,
.customer-section,
.shipping-section,
.payment-section,
.payment-method-section {
    border-top: 1px solid #ddd;
    padding-top: 20px;
    margin-top: 20px;
}

.order-details {
    margin-bottom: 20px;
}

.product-info {
    margin-bottom: 10px;
}

.product-name {
    font-weight: bold;
}

.product-options {
    color: #666;
}

.quantity,
.price,
.discount,
.total,
.shipping {
    margin-bottom: 10px;
}

.total-amount {
    text-align: right;
    font-weight: bold;
    font-size: 18px;
    margin-bottom: 20px;
}

form {
    margin-bottom: 20px;
}

form label {
    display: block;
    margin-bottom: 5px;
}

form input[type="text"],
form input[type="email"],
form input[type="tel"],
form textarea,
form input[type="radio"] {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
}

form input[type="radio"] {
    margin-right: 10px;
}

.checkout-button {
    text-align: center;
}

.checkout-button button {
    padding: 10px 20px;
    background-color: #4CAF50;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
}

.checkout-button button:hover {
    background-color: #45a049;
}

    </style> <!-- CSS 스타일 끝 -->


<div class="container">
        <h1>주문 및 결제</h1>

        <!-- 주문상세내역 -->
        <section class="order-section">
            <h2>주문상세내역</h2>
            <div class="order-details">
                <div class="product-info">
                    <p class="product-name">2024 스틸러스 원정 유니폼</p>
                    <p class="product-options">사이즈: L (100)</p>
                </div>
                <div class="quantity">
                    <p>수량: 1개</p>
                </div>
                <div class="price">
                    <p>상품금액: 99,000원</p>
                </div>
                <div class="discount">
                    <p>할인/적립: -</p>
                </div>
                <div class="total">
                    <p>합계금액: 99,000원</p>
                </div>
                <div class="shipping">
                    <p>배송비: 3,000원</p>
                </div>
            </div>
            <div class="total-amount">
                <p>총 결제 금액: 102,000원</p>
            </div>
        </section>

        <!-- 주문자 정보 -->
        <section class="customer-section">
            <h2>주문자 정보</h2>
            <form action="">
                <label for="name">이름</label>
                <input type="text" id="name" name="name" required>
                <label for="email">이메일</label>
                <input type="email" id="email" name="email" required>
                <label for="phone">전화번호</label>
                <input type="tel" id="phone" name="phone" required>
            </form>
        </section>

        <!-- 배송 정보 -->
        <section class="shipping-section">
            <h2>배송 정보</h2>
            <form action="">
                <label for="address">배송 주소</label>
                <input type="text" id="address" name="address" required>
                <label for="notes">배송 시 요청 사항</label>
                <textarea id="notes" name="notes" rows="4"></textarea>
            </form>
        </section>

        <!-- 결제 정보 -->
        <section class="payment-section">
            <h2>결제 정보</h2>
            <form action="">
                <label for="card-number">카드 번호</label>
                <input type="text" id="card-number" name="card-number" required>
                <label for="expiry-date">만료 일자</label>
                <input type="text" id="expiry-date" name="expiry-date" required>
                <label for="cvv">CVV</label>
                <input type="text" id="cvv" name="cvv" required>
            </form>
        </section>

        <!-- 결제 방법 선택 -->
        <section class="payment-method-section">
            <h2>결제 방법 선택</h2>
            <form action="">
                <input type="radio" id="credit-card" name="payment-method" value="credit-card" checked>
                <label for="credit-card">신용카드 결제</label><br>
                <input type="radio" id="bank-transfer" name="payment-method" value="bank-transfer">
                <label for="bank-transfer">계좌 이체</label><br>
                <input type="radio" id="paypal" name="payment-method" value="paypal">
                <label for="paypal">페이팔</label>
            </form>
        </section>

        <!-- 결제하기 버튼 -->
        <div class="checkout-button">
            <button type="button">결제하기</button>
        </div>
    </div>





// 구매하기 버튼 클릭 시 실행되는 함수
function purchaseButtonClicked() {
    // 여기에 로그인 상태 확인하는 로직을 추가할 수 있습니다.
    if (!isLoggedIn()) { // isLoggedIn()는 로그인 여부를 확인하는 함수라고 가정합니다.
        // 로그인이 되어 있지 않으면 로그인 화면으로 이동
        window.location.href = '/login'; // 로그인 페이지 URL로 변경해주세요.
    } else {
        // 로그인이 되어 있는 경우 구매하기 팝업 열기
        openPopup('/order/payment?goodsid=' + goodsDto.goodsid);
    }
}

// 구매하기 버튼 클릭 이벤트 리스너 등록
document.querySelector('button').addEventListener('click', purchaseButtonClicked);



<script>
// 로그인 상태 확인 함수 예시
function isLoggedIn() {
    // 여기에 서버에서 로그인 여부를 확인하는 로직을 추가하세요.
    // 예시로 true를 반환하는 것으로 가정합니다.
    return true; // 혹은 false
}

function writeopenPopup(url) {
    // 상품 쓰기 팝업
    if (isLoggedIn()) {
        var width = 1000;
        var height = 900;
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;
        window.open(url, "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
    } else {
        // 로그인이 되어있지 않으면 팝업을 열지 않음
        alert("로그인이 필요합니다.");
        return; // 팝업을 열지 않고 함수 종료
    }
}

function buyopenPopup(url) {
    // 구매하기 팝업
    if (isLoggedIn()) {
        var width = 1200;
        var height = 800;
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;
        window.open(url, "popupWindow", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
    } else {
        // 로그인이 되어있지 않으면 팝업을 열지 않음
        alert("로그인이 필요합니다.");
        return; // 팝업을 열지 않고 함수 종료
    }
}
</script>





package kr.co.matchday.order;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class OrderDAO {

    public OrderDAO() {
        System.out.println("-----OrderDAO() 객체 생성됨");
    }

    @Autowired
    private SqlSession sqlSession;
    
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }
    
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("order.listByUser", userid);
    }
}




package kr.co.matchday.order;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class OrderDAO {

    public OrderDAO() {
        System.out.println("-----OrderDAO() 객체 생성됨");
    }

    // MyBatis SqlSession 객체를 자동으로 주입
    @Autowired
    private SqlSession sqlSession;
    
    // 새로운 주문 정보를 데이터베이스에 삽입하는 메서드
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }
    
    // 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 메서드
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("order.listByUser", userid);
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="order">

    <!-- 새로운 주문 정보를 데이터베이스에 삽입하는 SQL 쿼리 -->
    <insert id="insert" parameterType="OrderDTO">
        INSERT INTO orders (orderid, userid, orderdate, totalamount)
        VALUES (#{orderid}, #{userid}, #{orderdate}, #{totalamount})
    </insert>

    <!-- 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 SQL 쿼리 -->
    <select id="listByUser" parameterType="String" resultType="OrderDTO">
        SELECT * FROM orders WHERE userid = #{userid}
    </select>
</mapper>









<!-- 주문 상세 내역 테이블 -->
<table class="table table-hover">
    <thead class="table-active">
        <tr>
            <th>상품 정보</th>
            <th>사이즈</th>
            <th>수량</th>
            <th>가격</th>
            <th>총 가격</th>
        </tr>
    </thead>
    <tbody>
        <c:forEach items="${goodsList}" var="goods">
            <tr>
                <td>
                    <div class="product-image">
                        <c:if test="${not empty goods.filename}">
                            <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                                <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}"
                                    alt="${goods.productname}"
                                    style="width: 100px; height: 100px; object-fit: cover;">
                            </a>
                        </c:if>
                    </div>
                    <br>
                    <span>${goods.productname}</span>
                </td>
                <td>${goods.size}</td>
                <td>
                    <button type="button" onclick="decrementQuantity(this)" class="수량-button">-</button>
                    <input type="text" class="quantity-input" value="${goods.quantity}" readonly>
                    <button type="button" onclick="incrementQuantity(this)" class="수량-button">+</button>
                </td>
                <td><fmt:formatNumber value="${goods.unitprice}" pattern="#,###원" /></td>
                <td><fmt:formatNumber value="${goods.totalprice}" pattern="#,###원" /></td>
            </tr>
        </c:forEach>
    </tbody>
</table>






<tr>
    <td>
        <div class="product-image">
            <c:if test="${not empty goods.filename}">
                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                </a>
            </c:if>
        </div>
        <br>
        <span>${goods.productname}</span>
    </td>
    <td>${goods.size}</td>
    <td>
        <button type="button" onclick="decrementQuantity(this)" class="수량-button">-</button> 
        <input type="text" class="quantity-input" value="1" readonly>
        <button type="button" onclick="incrementQuantity(this)" class="수량-button">+</button>
    </td>
    <td><fmt:formatNumber value="1" pattern="#,###원" /></td>
    <td><fmt:formatNumber value="1" pattern="#,###원" /></td>
</tr>













<c:forEach items="${goodsList}" var="goods">
    <c:if test="${goods.goodsid eq param.goodsid}">
        <tr>
            <td>
                <div class="product-image">
                    <c:if test="${not empty goods.filename}">
                        <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                            <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                        </a>
                    </c:if>
                </div>
                <br>
                <span>${goods.productname}</span>
            </td>
            <td>${goods.size}</td>
            <td>
                <button type="button" onclick="decrementQuantity(this)" class="수량-button">-</button> 
                <input type="text" class="quantity-input" value="1" readonly>
                <button type="button" onclick="incrementQuantity(this)" class="수량-button">+</button>
            </td>
            <td><fmt:formatNumber value="${goods.price}" pattern="#,###원" /></td>
            <td><fmt:formatNumber value="${goods.totalPrice}" pattern="#,###원" /></td>
        </tr>
    </c:if>
</c:forEach>





<insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
    INSERT INTO `order` (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, 
                         shippingstartdate, shippingenddate, shippingstatus, recipientname, shippingaddress, 
                         shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
    VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, 
            #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{shippingaddress}, 
            #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
</insert>






@GetMapping("/insert")
public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
    // 로그인된 사용자 정보 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    orderDto.setUserid(userid);

    // 주문 정보 삽입
    orderDao.insert(orderDto);

    // Redirect to payment page with order details
    return "redirect:/order/payment?goodsid=" + orderDto.getGoodsid() +
            "&quantity=" + orderDto.getQuantity() +
            "&price=" + orderDto.getPrice() +
            "&totalPrice=" + orderDto.getFinalpaymentamount();
}



@PostMapping("/payment")
@ResponseBody
public Map<String, Object> payment(@RequestParam Map<String, String> requestParams,
        Model model,
        HttpSession session) {

    Map<String, Object> response = new HashMap<>();
    System.out.println("payment 시작");

    // 요청 파라미터에서 필요한 값들 추출
    String imp_uid = requestParams.get("imp_uid");
    String merchant_uid = requestParams.get("merchant_uid");
    int paid_amount = Integer.parseInt(requestParams.get("paid_amount"));
    String orderid = requestParams.get("orderid");
    int totalPrice = Integer.parseInt(requestParams.get("totalPrice"));
    String recipientname = requestParams.get("recipientname");
    String recipientemail = requestParams.get("recipientemail");
    String recipientphone = requestParams.get("recipientphone");
    String shippingaddress = requestParams.get("shippingaddress");
    String shippingrequest = requestParams.get("shippingrequest");
    String collectionmethodcode = requestParams.get("collectionmethodcode");
    String couponId = requestParams.get("couponid"); // 쿠폰 ID 추가

    // 토큰 획득
    String token = getToken();
    if (token == null) {
        response.put("success", false);
        System.out.println("토큰을 가져오지 못했습니다.");
        return response;
    }

    // 아임포트 API를 통해 결제 정보 조회
    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);

    HttpEntity<String> entity = new HttpEntity<>(headers);
    ResponseEntity<String> paymentResponse = restTemplate.exchange(
            "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

    if (paymentResponse.getStatusCode() == HttpStatus.OK) {
        try {
            // 결제 정보를 JSON으로 파싱
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
            Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
            int amount = (Integer) responseJson.get("amount");

            if (amount == paid_amount) {
                System.out.println("결제 금액이 일치합니다.");

                // 세션에서 사용자 ID 가져오기
                String userId = (String) session.getAttribute("userID");
                if (userId == null) {
                    response.put("success", false);
                    response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                    System.out.println("세션에서 사용자 ID를 찾을 수 없습니다.");
                    return response;
                }

                String currentTimestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                // 결제가 완료된 후 쿠폰 사용 업데이트
                if (couponId != null && !couponId.equals("0")) {
                    int updateResult = orderDao.updateCouponUsage(couponId);
                    if (updateResult > 0) {
                        System.out.println("쿠폰 사용 업데이트 성공: " + couponId);
                    } else {
                        System.out.println("쿠폰 사용 업데이트 실패: " + couponId);
                    }
                }

                response.put("success", true);
            } else {
                response.put("success", false);
                response.put("message", "결제 금액이 일치하지 않습니다.");
                System.out.println("결제 금액이 일치하지 않습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }
    } else {
        response.put("success", false);
        response.put("message", "결제 정보를 가져오지 못했습니다.");
        System.out.println("결제 정보를 가져오지 못했습니다.");
    }

    return response;
}









<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Payment Page</title>
</head>
<body>
    <h2>Payment Details</h2>
    <p>Goods ID: ${goodsid}</p>
    <p>Quantity: ${quantity}</p>
    <p>Price: ${price}</p>
    <p>Total Price: ${totalPrice}</p>
    
    <!-- Add form elements for payment -->
    <form action="/order/payment" method="post">
        <!-- Add form fields here as needed -->
        <input type="hidden" name="goodsid" value="${goodsid}" />
        <input type="hidden" name="quantity" value="${quantity}" />
        <input type="hidden" name="price" value="${price}" />
        <input type="hidden" name="totalPrice" value="${totalPrice}" />
        
        <!-- Add more input fields for other payment details -->
        
        <button type="submit">Proceed to Payment</button>
    </form>
</body>
</html>


@PostMapping("/payment")
@ResponseBody
public Map<String, Object> payment(@RequestParam Map<String, String> requestParams,
                                   Model model,
                                   HttpSession session) {

    Map<String, Object> response = new HashMap<>();

    // 요청 파라미터를 추출
    String imp_uid = requestParams.get("imp_uid");
    String merchant_uid = requestParams.get("merchant_uid");
    int paid_amount = Integer.parseInt(requestParams.get("paid_amount"));
    String orderid = requestParams.get("orderid");
    int totalPrice = Integer.parseInt(requestParams.get("finalpaymentamount")); // 수정: totalPrice -> finalpaymentamount
    String recipientname = requestParams.get("recipientname");
    String recipientemail = requestParams.get("recipientemail");
    String recipientphone = requestParams.get("recipientphone");
    String shippingaddress = requestParams.get("shippingaddress");
    String shippingrequest = requestParams.get("shippingrequest");
    String collectionmethodcode = requestParams.get("collectionmethodcode");
    String couponId = requestParams.get("couponid"); // 쿠폰 ID 추가

    // 토큰 획득
    String token = getToken();
    if (token == null) {
        response.put("success", false);
        response.put("message", "토큰을 가져오지 못했습니다.");
        return response;
    }

    // 아임포트 API를 통해 결제 정보 조회
    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);

    HttpEntity<String> entity = new HttpEntity<>(headers);
    ResponseEntity<String> paymentResponse = restTemplate.exchange(
            "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

    if (paymentResponse.getStatusCode() == HttpStatus.OK) {
        try {
            // 결제 정보를 JSON으로 파싱
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
            Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
            int amount = (Integer) responseJson.get("amount");

            if (amount == paid_amount) {
                // 결제 금액 일치하는 경우 처리
                System.out.println("결제 금액이 일치합니다.");

                // 세션에서 사용자 ID 가져오기
                String userId = (String) session.getAttribute("userID");
                if (userId == null) {
                    response.put("success", false);
                    response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                    return response;
                }

                String currentTimestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                // 결제가 완료된 후 쿠폰 사용 업데이트
                if (couponId != null && !couponId.equals("0")) {
                    int updateResult = orderDao.updateCouponUsage(couponId);
                    if (updateResult > 0) {
                        System.out.println("쿠폰 사용 업데이트 성공: " + couponId);
                    } else {
                        System.out.println("쿠폰 사용 업데이트 실패: " + couponId);
                    }
                }

                // 성공 응답 설정
                response.put("success", true);
            } else {
                // 결제 금액 불일치
                response.put("success", false);
                response.put("message", "결제 금액이 일치하지 않습니다.");
            }
        } catch (Exception e) {
            // 예외 처리
            response.put("success", false);
            response.put("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }
    } else {
        // 결제 정보 가져오기 실패
        response.put("success", false);
        response.put("message", "결제 정보를 가져오지 못했습니다.");
    }

    return response;
}







package kr.co.matchday.order;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.co.matchday.coupon.CouponDTO;

@Repository
public class OrderDAO {

    @Autowired
    SqlSession sqlSession;

    public OrderDAO() {
        System.out.println("-----OrderDAO() 객체 생성됨");
    }

    // 새로운 주문 정보를 데이터베이스에 삽입하는 메서드
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }

    // 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 메서드
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("order.listByUser", userid);
    }

    // 사용자 ID로 사용자 정보를 가져오는 메서드
    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("order.getUserInfo", userID); // XML에서 namespace가 `order`이므로 변경
    }

    // 사용자 ID로 쿠폰 목록을 가져오는 메서드
    public List<CouponDTO> getCouponsByUserId(String userId) {
        Map<String, Object> params = new HashMap<>();
        params.put("userId", userId);
        params.put("applicableProduct", "order");
        params.put("usage", "Not Used");
        return sqlSession.selectList("order.getCouponsByUserId", params); // XML에서 namespace가 `order`이므로 변경
    }

    // 쿠폰 ID로 할인율을 가져오는 메서드
    public int getDiscountRateByCouponId(String couponId) {
        return sqlSession.selectOne("order.getDiscountRateByCouponId", couponId); // XML에서 namespace가 `order`이므로 변경
    }

    // 쿠폰의 사용 상태를 업데이트하는 메서드
    public int updateCouponUsage(String couponId) {
        System.out.println("쿠폰 사용 업데이트 시도: " + couponId);
        int result = sqlSession.update("order.updateCouponUsage", couponId); // XML에서 namespace가 `order`이므로 변경
        if (result > 0) {
            System.out.println("쿠폰 사용 업데이트 성공: " + couponId);
        } else {
            System.out.println("쿠폰 사용 업데이트 실패: " + couponId);
        }
        return result;
    }
}








<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="order">

    <!-- 굿즈 ID로 굿즈 정보 가져오기 -->
    <select id="getGoodsById" parameterType="kr.co.matchday.order.OrderDTO" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM goods WHERE goodsid = #{goodsid}
    </select>

    <!-- 사용자 ID로 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT *
        FROM users
        WHERE userid = #{userid}
    </select>

    <!-- 주문 정보 삽입 -->
    <insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
        INSERT INTO `order` (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, 
                             shippingstartdate, shippingenddate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress, 
                             shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
        VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, 
                #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress}, 
                #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
    </insert>

    <!-- 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 SQL 쿼리 -->
    <select id="listByUser" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE userid = #{userid}
    </select>

    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, c.coupontypeid, c.userid, c.usage,
               cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userId}
          AND cm.applicableproduct = #{applicableProduct}
          AND c.usage = #{usage}
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" parameterType="String" resultType="int">
        SELECT discountrate
        FROM couponmaster
        WHERE coupontypeid = (SELECT coupontypeid FROM coupon WHERE couponid = #{couponId})
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponId}
    </update>

</mapper>










import java.text.SimpleDateFormat;
import java.util.Date;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.example.service.OrderService;
import com.example.model.Order;

@Controller
public class OrderController {
    @Autowired
    private OrderService orderService; // OrderService 의존성 주입

    @RequestMapping(value = "/order/insert", method = RequestMethod.POST)
    public String insertOrder(@ModelAttribute Order order, HttpSession session, Model model) {
        // 세션에서 사용자 ID를 가져옴
        String userID = (String) session.getAttribute("userID");
        if (userID == null) { // 사용자 ID가 없으면 로그인 페이지로 리다이렉트
            return "redirect:/login";
        }

        // 주문 ID 생성
        String orderID = generateOrderID();
        order.setOrderID(orderID); // 주문 객체에 주문 ID 설정

        // 데이터베이스에 주문 삽입
        orderService.insertOrder(order);

        // 모델에 주문 정보 추가
        model.addAttribute("order", order);

        // 주문 확인 페이지로 리다이렉트
        return "redirect:/order/confirmation";
    }

    // 주문 ID 생성 메서드
    private String generateOrderID() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        return "ORDER_" + sdf.format(new Date()); // 현재 시간을 기반으로 주문 ID 생성
    }

    @RequestMapping("/order/confirmation")
    public String orderConfirmation() {
        return "orderConfirmation"; // 주문 확인 페이지 반환
    }
}







import java.util.List;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.GoodsDAO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;
    
    @Autowired
    private GoodsDAO goodsDao;
    
    @Autowired
    private CouponDAO couponDao;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          Model model,
                          HttpSession session) {

        // Retrieve goods details
        GoodsDTO goods = goodsDao.detail(goodsid);
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        // Retrieve user's coupons from the session (assuming it's already set in the 'list' method)
        String userid = (String) session.getAttribute("userID");
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        
        // 사용자의 주문 목록 조회
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        //굿즈 목록 조회
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        
        //쿠폰 리스트 조회
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        return "order/list";
    }

    // 다른 메서드들 생략...
}




<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>주문 결제</title>
</head>
<body>

<h1>주문 결제</h1>

<form action="/order/confirm" method="post">
    <!-- 굿즈 정보 -->
    <label for="goodsid">상품 ID:</label>
    <input type="text" id="goodsid" name="goodsid" value="${goods.goodsid}" readonly><br>
    <label for="size">사이즈:</label>
    <input type="text" id="size" name="size" value="${size}" readonly><br>
    <label for="quantity">수량:</label>
    <input type="text" id="quantity" name="quantity" value="${quantity}" readonly><br>
    <label for="price">단가:</label>
    <input type="text" id="price" name="price" value="${price}" readonly><br>
    <label for="totalPrice">총 가격:</label>
    <input type="text" id="totalPrice" name="totalPrice" value="${totalPrice}" readonly><br>

    <!-- 쿠폰 선택 -->
    <label for="couponid">쿠폰 선택</label>
    <select id="couponid" name="couponid">
        <option value="">쿠폰 선택</option>
        <c:forEach items="${couponList}" var="coupon">
            <option value="${coupon.couponid}">${coupon.couponName}</option>
        </c:forEach>
    </select>

    <br><br>
    <input type="submit" value="결제하기">
</form>

</body>
</html>

<!--<c:if test="${user.userid eq coupon.couponid}">
	        <select id="couponid" name="couponid">
	            <option value="${couponList.couponid}">${couponmasterList.coupontname}</option>
	            <option value="coupon2">쿠폰 2</option>
	            <option value="coupon3">쿠폰 3</option>
	        </select>
        </c:if>-->













import java.util.List;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.coupon.CouponMasterDTO; // 쿠폰 마스터 DTO 추가
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.GoodsDAO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;
    
    @Autowired
    private GoodsDAO goodsDao;
    
    @Autowired
    private CouponDAO couponDao;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          Model model,
                          HttpSession session) {

        // Retrieve goods details
        GoodsDTO goods = goodsDao.detail(goodsid);
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        // Retrieve user's coupons from the session (assuming it's already set in the 'list' method)
        String userid = (String) session.getAttribute("userID");
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        // Retrieve available coupon master list
        List<CouponMasterDTO> couponmasterList = couponDao.selectAvailableCoupons();
        model.addAttribute("couponmasterList", couponmasterList);

        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        
        // 사용자의 주문 목록 조회
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        //굿즈 목록 조회
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        
        //쿠폰 리스트 조회
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        return "order/list";
    }

    // 다른 메서드들 생략...
}





<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
<head>
    <title>주문 결제</title>
</head>
<body>

<h1>주문 결제</h1>

<form action="/order/confirm" method="post">
    <!-- 굿즈 정보 -->
    <label for="goodsid">상품 ID:</label>
    <input type="text" id="goodsid" name="goodsid" value="${goods.goodsid}" readonly><br>
    <label for="size">사이즈:</label>
    <input type="text" id="size" name="size" value="${size}" readonly><br>
    <label for="quantity">수량:</label>
    <input type="text" id="quantity" name="quantity" value="${quantity}" readonly><br>
    <label for="price">단가:</label>
    <input type="text" id="price" name="price" value="${price}" readonly><br>
    <label for="totalPrice">총 가격:</label>
    <input type="text" id="totalPrice" name="totalPrice" value="${totalPrice}" readonly><br>

    <!-- 쿠폰 선택 -->
    <label for="couponid">쿠폰 선택</label>
    <select id="couponid" name="couponid">
        <option value="">쿠폰 선택</option>
        <c:forEach items="${couponList}" var="coupon">
            <option value="${coupon.couponid}">${coupon.couponName}</option>
        </c:forEach>
    </select>

    <!-- 쿠폰 마스터 정보 -->
    <br><br>
    <label for="couponMasterInfo">사용 가능한 쿠폰 목록:</label><br>
    <c:forEach items="${couponmasterList}" var="couponMaster">
        <p>쿠폰 ID: ${couponMaster.couponid}</p>
        <p>쿠폰 이름: ${couponMaster.couponName}</p>
        <p>할인율: ${couponMaster.discountRate}</p>
        <p>사용 기간: ${couponMaster.validPeriod}</p>
        <br>
    </c:forEach>

    <br><br>
    <input type="submit" value="결제하기">
</form>

</body>
</html>

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private CouponDAO couponDao;

    // payment 메서드 내용 생략...

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 사용자의 주문 목록 조회
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        // 굿즈 목록 조회
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);

        // 쿠폰 리스트 조회 (applicableproduct가 'Goods'인 것만)
        List<CouponDTO> couponList = couponDao.selectApplicableCouponsByProductType("Goods");
        model.addAttribute("couponList", couponList);

        return "order/list";
    }

    // 다른 메서드들...
}



@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam Map<String, String> requestParams,
                      Model model,
                      HttpSession session) {

    // 굿즈 목록 조회
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    // 세션에서 사용자 ID 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        model.addAttribute("message", "로그인이 필요합니다.");
        return "/member/login"; // 로그인 페이지로 리다이렉트
    }

    // 사용자가 보유한 쿠폰 중 applicableproduct가 'Goods'인 것만 가져오기
    List<CouponDTO> userCoupons = couponDao.selectCouponsByUserAndProductType(userid, "Goods");
    model.addAttribute("couponList", userCoupons);

    // 사용 가능한 쿠폰 마스터 리스트 조회
    List<CouponMasterDTO> availableCoupons = couponDao.selectAvailableCoupons();
    model.addAttribute("couponmasterList", availableCoupons);

    return "order/payment";
}


@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private CouponDAO couponDao;

    // Other existing mappings and dependencies...

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          Model model,
                          HttpSession session) {

        // Retrieve logged-in user ID from session
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            model.addAttribute("message", "로그인이 필요합니다.");
            return "/member/login"; // Redirect to login page if not logged in
        }

        // Fetch user's coupons applicable to goods
        List<CouponDTO> userCoupons = couponDao.selectCouponsByUserAndapplicableproduct(userid, "Goods");
        model.addAttribute("couponList", userCoupons);

        // Fetch available coupon master list (for displaying discount rate)
        List<CouponMasterDTO> availableCoupons = couponDao.selectAvailableCoupons();
        model.addAttribute("couponmasterList", availableCoupons);

        // Other processing logic...

        return "order/payment";
    }
    
    // Other mappings and methods...
}









@Repository
public class CouponDAO {

    @Autowired
    private SqlSession sqlSession;

    // Other existing methods...

    // Fetch user's coupons applicable to a specific product type (e.g., Goods)
    public List<CouponDTO> selectCouponsByUserAndapplicableproduct(String userid, String applicableproduct) {
        Map<String, String> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableproduct", applicableproduct);
        return sqlSession.selectList("coupon.selectCouponsByUserAndProductType", params);
    }

    // Fetch all available coupon masters
    public List<CouponMasterDTO> selectAvailableCoupons() {
        return sqlSession.selectList("coupon.selectAvailableCoupons");
    }

    // Fetch coupon master by coupon type ID
    public CouponMasterDTO getCouponMasterById(String coupontypeid) {
        return sqlSession.selectOne("coupon.selectCouponMasterById", coupontypeid);
    }

    // Other existing methods...
}










<!-- admin.xml -->

<mapper namespace="admin">
    
    <!-- Existing mappings -->
    
    <!-- 쿠폰 사용자 및 제품 유형에 따른 쿠폰 목록 가져오기 -->
    <select id="selectCouponsByUserAndProductType" resultType="kr.co.matchday.admin.CouponDTO">
        SELECT c.couponid, c.couponname, c.coupontypeid, c.startdate, c.enddate
        FROM coupon c
        INNER JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userid} AND cm.applicableproduct = #{applicableproduct}
    </select>
    
    <!-- Existing mappings -->
    
</mapper>







package kr.co.matchday.order;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.admin.CouponMasterDTO;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;
    
    @Autowired
    private GoodsDAO goodsDao;
    
    @Autowired
    private CouponDAO couponDao;
    
    @Autowired
    private Environment env; // 환경변수를 관리하는 객체
    
    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }
    
    @GetMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        orderDto.setUserid(userid);
        
        // 주문 정보 삽입
        orderDao.insert(orderDto);
        
        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }
    
    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price, 
                          @RequestParam("totalPrice") String totalPrice,
                          Model model,
                          HttpSession session) {

        GoodsDTO goods = goodsDao.detail(goodsid);
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        
        String userid = (String) session.getAttribute("userID");
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        List<CouponMasterDTO> couponmasterList = couponDao.selectAvailableCoupons();
        model.addAttribute("couponmasterList", couponmasterList);

        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);
        
        return "order/list";
    }
    
    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            System.out.println("Request Body: " + requestBody);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            } else {
                System.out.println("Failed to get token, response: " + response.getBody());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
}







<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>결제 페이지</title>
    <link rel="stylesheet" href="<c:url value='/css/styles.css' />">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.iamport.kr/js/iamport.payment-1.1.7.js"></script>
    <script src="https://ssl.daumcdn.net/dmaps/map_js_init/postcode.v2.js"></script>
</head>
<body>
<div class="container">
    <h1>결제 페이지</h1>
    <form id="Orderfrm" method="post" action="<c:url value='/order/confirm' />">
        <section class="order-info">
            <h2>주문 정보</h2>
            <label for="recipientname">받는 사람</label>
            <input type="text" id="recipientname" name="recipientname" required>
            
            <label for="recipientphone">연락처</label>
            <input type="text" id="recipientphone" name="recipientphone" required>
            
            <label for="recipientemail">이메일</label>
            <input type="email" id="recipientemail" name="recipientemail" required>
            
            <label for="postcode">우편번호</label>
            <input type="text" id="postcode" name="postcode" readonly required>
            <button type="button" id="find-postcode">우편번호 찾기</button>
            
            <label for="shippingaddress">주소</label>
            <input type="text" id="shippingaddress" name="shippingaddress" readonly required>
            
            <label for="detailAddress">상세 주소</label>
            <input type="text" id="detailAddress" name="detailAddress" required>
            
            <label for="extraAddress">참고 항목</label>
            <input type="text" id="extraAddress" name="extraAddress" readonly>
        </section>

        <section class="payment-section">
            <h2>결제 정보</h2>
            <label for="paymentmethod">결제 수단</label>
            <select id="paymentmethod" name="paymentmethod" required>
                <option value="pay01">신용카드</option>
                <option value="pay02">무통장입금</option>
                <option value="pay03">휴대폰결제</option>
            </select>

            <label for="couponid">쿠폰 선택</label>
            <select id="couponid" name="couponid">
                <option value="">쿠폰 선택</option>
                <c:forEach items="${couponList}" var="coupon">
                    <c:set var="couponmaster" value="${couponDao.getCouponMasterById(coupon.coupontypeid)}" />
                    <option value="${coupon.couponid}" data-discount="${couponmaster.discountrate}">
                        ${coupon.couponname} ${couponmaster.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
                    </option>
                </c:forEach>
            </select>
            <input type="hidden" name="finalpaymentamount" id="finalpaymentamount" value="">
        </section>

        <button type="button" class="btn btn-primary" onclick="requestPay()">결제하기</button>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    generateOrderId(); // 주문서 페이지가 로드될 때 orderid 생성

    // Listen for coupon selection changes
    document.getElementById('couponid').addEventListener('change', function() {
        updateTotalAmount();
    });

    // Calculate and update total amount
    function updateTotalAmount() {
        const couponSelect = document.getElementById('couponid');
        const selectedOption = couponSelect.options[couponSelect.selectedIndex];
        const discountRate = selectedOption.getAttribute('data-discount');
        const totalPriceElement = document.querySelector('.total-amount p');

        let totalPrice = parseInt('<c:out value="${totalPrice}" />');
        if (discountRate) {
            const discount = (totalPrice * discountRate) / 100;
            totalPrice -= discount;
        }
        totalPriceElement.textContent = totalPrice + '원';
        document.getElementById('finalpaymentamount').value = totalPrice; // Update hidden input value
    }

    document.getElementById('find-postcode').addEventListener('click', function() {
        new daum.Postcode({
            oncomplete: function(data) {
                document.getElementById('postcode').value = data.zonecode;
                document.getElementById('shippingaddress').value = data.address;
                document.getElementById('extraAddress').value = data.buildingName;
                document.getElementById('detailAddress').focus();
            }
        }).open();
    });
});

function generateOrderId() {
    const timestamp = new Date().getTime();
    const orderId = 'order_' + timestamp;
    document.querySelector('input[name="orderid"]').value = orderId;
}

function requestPay() {
    const IMP = window.IMP;
    IMP.init('iamport'); // 가맹점 식별코드
    const finalAmount = document.getElementById('finalpaymentamount').value;

    IMP.request_pay({
        pg: 'html5_inicis', // PG사
        pay_method: document.getElementById('paymentmethod').value,
        merchant_uid: 'merchant_' + new Date().getTime(),
        name: '주문명: 결제 테스트',
        amount: finalAmount,
        buyer_email: document.getElementById('recipientemail').value,
        buyer_name: document.getElementById('recipientname').value,
        buyer_tel: document.getElementById('recipientphone').value,
        buyer_addr: document.getElementById('shippingaddress').value + ' ' + document.getElementById('detailAddress').value,
        buyer_postcode: document.getElementById('postcode').value
    }, function(rsp) {
        if (rsp.success) {
            // 결제 성공 시 처리
            document.getElementById('Orderfrm').submit();
        } else {
            alert('결제에 실패하였습니다. 에러 내용: ' + rsp.error_msg);
        }
    });
}
</script>
</body>
</html>





package kr.co.matchday.order;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.co.matchday.coupon.CouponDTO;

@Repository
public class OrderDAO {

    @Autowired
    SqlSession sqlSession;
    
    public OrderDAO() {
        System.out.println("-----OrderDAO() 객체 생성됨");
    }
    
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }
    
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("order.listByUser", userid);
    }
    
    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("order.getUserInfo", userID);
    }
    
    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "order");
        params.put("usage", "Not Used");
        return sqlSession.selectList("order.getCouponsByUserId", params);
    }
    
    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("order.getDiscountRateByCouponId", couponid);
    }
    
    public int updateCouponUsage(String couponId) {
        System.out.println("쿠폰 사용 업데이트 시도: " + couponId);
        int result = sqlSession.update("order.updateCouponUsage", couponId);
        if (result > 0) {
            System.out.println("쿠폰 사용 업데이트 성공: " + couponId);
        } else {
            System.out.println("쿠폰 사용 업데이트 실패: " + couponId);
        }
        return result;
    }
}





<script>
document.addEventListener('DOMContentLoaded', function() {
    generateOrderId(); // 주문서 페이지가 로드될 때 orderid 생성

    // Listen for coupon selection changes
    document.getElementById('couponid').addEventListener('change', function() {
        updateTotalAmount();
    });

    // Calculate and update total amount
    function updateTotalAmount() {
        const couponSelect = document.getElementById('couponid');
        const selectedOption = couponSelect.options[couponSelect.selectedIndex];
        const discountRate = selectedOption.getAttribute('data-discount');
        const totalPriceElement = document.querySelector('.total-amount p');

        let totalPrice = parseInt(${totalPrice}); // Replace with actual total price variable
        if (discountRate) {
            const discount = (totalPrice * discountRate) / 100;
            totalPrice -= discount;
        }

        totalPriceElement.innerHTML = `총 결제 금액: ${totalPrice.toLocaleString()}원`;
        document.getElementById('finalpaymentamount').value = totalPrice;
    }
});
</script>



@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price, 
                      @RequestParam("totalPrice") String totalPrice,
                      Model model,
                      HttpSession session) {

    GoodsDTO goods = goodsDao.detail(goodsid);
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    String userid = (String) session.getAttribute("userID");
    List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
    model.addAttribute("couponList", couponList);

    List<CouponMasterDTO> couponmasterList = couponDao.selectAvailableCoupons();
    model.addAttribute("couponmasterList", couponmasterList);

    // 쿠폰 ID로 할인율 가져오기
    String couponid = "some_coupon_id"; // 이 값을 실제로는 사용자 입력이나 다른 로직에서 가져와야 합니다.
    int discountRate = orderDao.getDiscountRateByCouponId(couponid);
    model.addAttribute("discountRate", discountRate);

    return "order/payment";
}







@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price, 
                      @RequestParam("totalPrice") String totalPrice,
                      Model model,
                      HttpSession session) {

    GoodsDTO goods = goodsDao.detail(goodsid);
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    String userid = (String) session.getAttribute("userID");
    if (userid != null) {
        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);
        
        // 쿠폰 마스터 리스트 조회 및 추가
        for (CouponDTO coupon : couponList) {
            CouponMasterDTO couponMaster = couponDao.getCouponMasterById(coupon.getCoupontypeid());
            coupon.setCouponMaster(couponMaster);
        }
    }

    return "order/payment";
}



@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price, 
                      @RequestParam("totalPrice") String totalPrice,
                      Model model,
                      HttpSession session) {

    GoodsDTO goods = goodsDao.detail(goodsid);
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    String userid = (String) session.getAttribute("userID");
    if (userid != null) {
        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        for (CouponDTO coupon : couponList) {
            CouponMasterDTO couponMaster = couponDao.getCouponMasterById(coupon.getCoupontypeid());
            coupon.setCouponMaster(couponMaster);
        }
        model.addAttribute("couponList", couponList);
    }

    return "order/payment";
}



package kr.co.matchday.order;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.admin.CouponMasterDTO;

@Repository
public class OrderDAO {

    public OrderDAO() {
        System.out.println("-----OrderDAO() 객체 생성됨");
    }
    
    @Autowired
    SqlSession sqlSession;
    
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }
    
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("order.listByUser", userid);
    }
    
    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("order.getUserInfo", userID);
    }
    
    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "Goods");
        params.put("usage", "Not Used");
        return sqlSession.selectList("order.getCouponsByUserId", params);
    }
    
    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("order.getDiscountRateByCouponId", couponid);
    }
    
    public int updateCouponUsage(String couponid) {
        System.out.println("쿠폰 사용 업데이트 시도: " + couponid);
        int result = sqlSession.update("order.updateCouponUsage", couponid);
        if (result > 0) {
            System.out.println("쿠폰 사용 업데이트 성공: " + couponid);
        } else {
            System.out.println("쿠폰 사용 업데이트 실패: " + couponid);
        }
        return result;
    }

    // 추가: 쿠폰 타입 ID로 쿠폰 마스터 정보를 가져오는 메서드
    public CouponMasterDTO getCouponMasterById(String coupontypeid) {
        return sqlSession.selectOne("coupon.getCouponMasterById", coupontypeid);
    }
}




package kr.co.matchday.order;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.admin.CouponMasterDTO;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }
    
    @Autowired
    private OrderDAO orderDao;
    
    @Autowired
    private GoodsDAO goodsDao;
    
    @Autowired
    private CouponDAO couponDao;
    
    @Autowired
    private Environment env;
    
    @GetMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }
        orderDto.setUserid(userid);
        orderDao.insert(orderDto);
        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }
    
    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price, 
                          @RequestParam("totalPrice") String totalPrice,
                          Model model,
                          HttpSession session) {

        GoodsDTO goods = goodsDao.detail(goodsid);
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        String userid = (String) session.getAttribute("userID");
        if (userid != null) {
            List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
            for (CouponDTO coupon : couponList) {
                CouponMasterDTO couponMaster = orderDao.getCouponMasterById(coupon.getCoupontypeid());
                coupon.setCouponMaster(couponMaster); // 쿠폰 마스터 설정
            }
            model.addAttribute("couponList", couponList);
        }

        return "order/payment";
    }






<!-- 할인 혜택 및 결제 정보 -->
<section class="discount-section">
    <h2>할인 혜택</h2>

    <!-- 쿠폰 선택 -->
    <label for="coupon">쿠폰 선택</label>
    <input type="hidden" name="applicableproduct" id="applicableproduct" value="Goods">
    <select id="couponid" name="couponid" class="form-select">
        <option value="">쿠폰 선택</option>
        <c:forEach items="${couponList}" var="coupon">
            <option value="${coupon.couponid}" data-discount="${coupon.couponMaster.discountrate}">
                ${coupon.couponname} ${coupon.couponMaster.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
            </option>
        </c:forEach>
    </select>

    <p>할인율: <span id="discountRate">0%</span></p>
</section>

<script>
    document.getElementById('couponid').addEventListener('change', function() {
        var discountRate = this.options[this.selectedIndex].getAttribute('data-discount');
        document.getElementById('discountRate').innerText = discountRate + '%';
    });
</script>






// OrderCont 클래스의 payment 메서드에서 쿠폰 할인율을 가져와서 모델에 추가하는 코드
@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam Map<String, String> requestParams,
                      Model model,
                      HttpSession session) {
    // 다른 코드들...

    // 쿠폰 ID로 할인율 가져오기
    String couponid = requestParams.get("couponid"); // 실제 쿠폰 ID를 가져오는 로직 필요
    int discountRate = orderDao.getDiscountRateByCouponId(couponid);
    model.addAttribute("discountRate", discountRate);

    // 사용자의 쿠폰 목록 가져오기
    String userid = (String) session.getAttribute("userID");
    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    // 다른 코드들...
}





<!-- order/payment.jsp 예시 -->

<!-- 쿠폰 선택 폼 -->
<form id="couponForm" action="/order/applyCoupon" method="post">
    <select name="couponId">
        <c:forEach items="${couponList}" var="coupon">
            <option value="${coupon.couponid}">${coupon.couponName} (${coupon.discountRate}%)</option>
        </c:forEach>
    </select>
    <button type="submit">쿠폰 적용</button>
</form>

<!-- 쿠폰 할인 적용 후 결제 금액 표시 -->
<script>
    $('#couponForm').submit(function(event) {
        event.preventDefault();
        var couponId = $('select[name="couponId"]').val();
        // Ajax를 사용하여 선택된 쿠폰에 따라 할인된 결제 금액을 가져오고 화면에 표시하는 로직 추가
        // 예시: $.post('/order/applyCoupon', { couponId: couponId }, function(data) { ... });
    });
</script>








@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CouponDAO couponDao;

    // 주문 삽입 처리
    @PostMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        orderDto.setUserid(userid);

        // 주문 정보 삽입
        orderDao.insert(orderDto);

        return "redirect:/order/payment?orderid=" + orderDto.getOrderid();
    }

    // 결제 페이지
    @GetMapping("/payment")
    public String payment(@RequestParam("orderid") String orderid,
                          Model model) {
        // 주문 정보 조회
        OrderDTO order = orderDao.findById(orderid); // findById 메서드는 OrderDAO에 추가해야 함
        if (order == null) {
            // 주문 정보가 없을 경우 처리
            return "redirect:/order/list"; // 혹은 다른 경로로 리디렉션
        }

        // 기타 필요한 처리 (결제 로직 등)

        model.addAttribute("order", order);
        return "order/payment";
    }

    // 주문 목록 조회
    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 사용자의 주문 목록 조회
        List<OrderDTO> orderList = orderDao.listByUser(userid);

        model.addAttribute("orderList", orderList);
        return "order/list";
    }

    // 기타 필요한 메서드들 추가 (예: 쿠폰 사용 업데이트 등)

}

@RequestMapping("/order")
public String showOrderPage(Model model, HttpSession session) {
    // 세션에서 userID를 가져옴
    String userID = (String) session.getAttribute("userID");

    // 사용자가 가지고 있는 쿠폰 리스트 가져오기
    List<CouponDTO> userCoupons = couponService.getUserCoupons(userID);

    // Goods에 해당하는 쿠폰 리스트 필터링 (coupontypeid가 Goods인 것들)
    List<CouponDTO> goodsCoupons = userCoupons.stream()
            .filter(coupon -> coupon.getApplicableProduct().equals("Goods"))
            .collect(Collectors.toList());

    // 각 쿠폰에 대해 쿠폰 마스터 정보 추가
    for (CouponDTO coupon : goodsCoupons) {
        CouponMasterDTO couponMaster = couponService.getCouponMasterById(coupon.getCouponTypeId());
        coupon.setCouponMaster(couponMaster); // 쿠폰 마스터 정보 설정
    }

    model.addAttribute("goodsCoupons", goodsCoupons); // View로 쿠폰 리스트 전달

    return "order/orderPage";
}

@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam(value = "couponid", required = false) String couponId, // 쿠폰 ID 추가
                      Model model,
                      HttpSession session) {

    // 사용자 정보 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }

    // 굿즈 정보 가져오기 (필요에 따라 굿즈 정보 조회 로직 추가)

    // 쿠폰 정보 가져오기
    CouponDTO selectedCoupon = null;
    if (couponId != null && !couponId.isEmpty()) {
        selectedCoupon = couponDao.getCouponById(couponId); // 쿠폰 ID로 쿠폰 정보 조회
    }

    // 쿠폰 할인율 계산
    int discountRate = 0;
    if (selectedCoupon != null) {
        discountRate = selectedCoupon.getCouponMaster().getDiscountrate(); // 쿠폰 마스터에서 할인율 가져오기
        // 쿠폰 사용 상태 업데이트
        orderDao.updateCouponUsage(couponId);
    }

    // 기타 필요한 결제 처리 로직 추가

    // View에 필요한 데이터 전달
    model.addAttribute("selectedCoupon", selectedCoupon);
    model.addAttribute("discountRate", discountRate);
    model.addAttribute("goodsid", goodsid);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    return "order/payment";
}

@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam(value = "couponid", required = false) String couponid,
                      Model model,
                      HttpSession session) {

    // Get logged-in user ID
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // Redirect to login page if not logged in
    }

    // Retrieve user information
    Map<String, Object> userInfo = orderDao.getUserInfo(userid);
    model.addAttribute("userInfo", userInfo); // Add user info to the model

    // Goods list retrieval (assuming goodsDao and goodsList are correctly defined)
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList); // Add goods list to the model

    // Add other attributes like size, quantity, price, totalPrice to the model
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    // Retrieve coupons available for the user
    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList); // Add coupon list to the model

    // Apply coupon discount if couponid is provided
    int discountRate = 0;
    if (couponid != null && !couponid.isEmpty()) {
        discountRate = orderDao.getDiscountRateByCouponId(couponid); // Get discount rate
        // Update coupon usage status
        orderDao.updateCouponUsage(couponid);
    }
    model.addAttribute("discountRate", discountRate); // Add discount rate to the model

    return "order/payment"; // Return payment





@Repository
public class OrderDAO {

    // ... 기존 코드 생략 ...

    // 사용자의 포인트 이력을 추가하는 메서드
    public void insertPointHistory(PointHistoryDTO pointHistoryDto) {
        sqlSession.insert("point.insertPointHistory", pointHistoryDto);
    }

    // ... 기존 코드 생략 ...
}



<!-- PointHistoryDTO를 이용해 포인트 이력 추가 -->
<insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
    INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, pointusedate)
    VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{pointusedate})
</insert>


@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam(value = "couponid", required = false) String couponid,
                      Model model,
                      HttpSession session) {

    // 사용자 정보 조회
    String userid = (String) session.getAttribute("userID");
    Map<String, Object> userInfo = orderDao.getUserInfo(userid);
    model.addAttribute("userInfo", userInfo);

    // 상품 정보 조회 및 모델에 추가
    GoodsDTO goods = goodsDao.detail(goodsid);
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    // 사용자에게 사용 가능한 쿠폰 조회 및 모델에 추가
    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    // 쿠폰 코드가 제공된 경우 쿠폰 할인 적용
    int discountRate = 0;
    if (couponid != null && !couponid.isEmpty()) {
        discountRate = orderDao.getDiscountRateByCouponId(couponid);
        orderDao.updateCouponUsage(couponid);
    }
    model.addAttribute("discountRate", discountRate);

    // 포인트 이력 추가
    PointHistoryDTO pointHistoryDto = new PointHistoryDTO();
    pointHistoryDto.setUserid(userid);
    pointHistoryDto.setPointcategoryid("1"); // 포인트 카테고리 ID 설정 (예시)
    pointHistoryDto.setPointtype("Use"); // Accumulate 또는 Use 설정
    pointHistoryDto.setPointamount(Integer.parseInt(totalPrice)); // 결제한 총 금액을 포인트로 사용
    pointHistoryDto.setPointsource("Order Payment"); // 포인트 출처 설정
    pointHistoryDto.setPointcreationdate(new Timestamp(System.currentTimeMillis()));

    orderDao.insertPointHistory(pointHistoryDto); // 포인트 이력 데이터베이스에 추가

    return "order/payment";
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="order">

    <!-- 굿즈 ID로 굿즈 정보 가져오기 -->
    <select id="getGoodsById" parameterType="kr.co.matchday.order.OrderDTO" resultType="kr.co.matchday.goods.GoodsDTO">
        SELECT * FROM goods WHERE goodsid = #{goodsid}
    </select>

    <!-- 사용자 ID로 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT *
        FROM users
        WHERE userid = #{userid}
    </select>

    <!-- 주문 정보 삽입 -->
    <insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
        INSERT INTO orders (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, 
                             shippingstartdate, shippingenddate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress, 
                             shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
        VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, 
                #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress}, 
                #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
    </insert>

    <!-- 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 SQL 쿼리 -->
    <select id="listByUser" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM orders WHERE userid = #{userid}
    </select>

    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, c.coupontypeid, c.userid, c.usage,
               cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userid}
          AND cm.applicableproduct = #{applicableProduct}
          AND c.usage = #{usage}
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" parameterType="String" resultType="int">
        SELECT cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.couponid = #{couponid}
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponid}
    </update>

    <!-- PointHistoryDTO를 이용해 포인트 이력 추가 -->
    <insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
        INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, pointusedate)
        VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{pointusedate})
    </insert>

</mapper>
@Repository
public class OrderDAO {

    @Autowired
    SqlSession sqlSession;

    // 새로운 주문 정보를 데이터베이스에 삽입하는 메서드
    public void insert(OrderDTO orderDto) {
        sqlSession.insert("order.insert", orderDto);
    }

    // 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 메서드
    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("order.listByUser", userid);
    }

    // 사용자 ID로 사용자 정보를 가져오는 메서드
    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("order.getUserInfo", userID);
    }

    // 사용자 ID로 쿠폰 목록을 가져오는 메서드
    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "Goods");
        params.put("usage", "Not Used");
        return sqlSession.selectList("order.getCouponsByUserId", params);
    }

    // 쿠폰 ID로 할인율을 가져오는 메서드
    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("order.getDiscountRateByCouponId", couponid);
    }

    // 쿠폰의 사용 상태를 업데이트하는 메서드
    public int updateCouponUsage(String couponid) {
        return sqlSession.update("order.updateCouponUsage", couponid);
    }

    // 사용자의 포인트 이력을 추가하는 메서드
    public void insertPointHistory(PointHistoryDTO pointHistoryDto) {
        sqlSession.insert("order.insertPointHistory", pointHistoryDto);
    }
}

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CouponDAO couponDao;

    @GetMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }
        orderDto.setUserid(userid);
        orderDao.insert(orderDto);
        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          Model model,
                          HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        Map<String, Object> userInfo = orderDao.getUserInfo(userid);
        model.addAttribute("userInfo", userInfo);
        // Payment logic
        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);
        // Additional logic
        return "order/list";
    }
}





<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="OrderMapper">

    <!-- OrderDTO를 이용해 주문 정보 삽입 -->
    <insert id="insertOrder" parameterType="kr.co.matchday.order.OrderDTO">
        INSERT INTO `order` (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount,
                             shippingstartdate, shippingenddate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress,
                             shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
        VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount},
                #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress},
                #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
    </insert>

    <!-- 주문 ID로 주문 정보 조회 -->
    <select id="findOrderById" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE orderid = #{orderid}
    </select>

    <!-- 사용자 ID로 해당 사용자의 주문 목록 조회 -->
    <select id="findOrdersByUserId" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE userid = #{userid}
    </select>

    <!-- PointHistoryDTO를 이용해 포인트 이력 추가 -->
    <insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
        INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, pointusedate)
        VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{pointusedate})
    </insert>

    <!-- 사용자 ID로 해당 사용자의 포인트 이력 조회 -->
    <select id="findPointHistoryByUserId" parameterType="String" resultType="kr.co.matchday.point.PointHistoryDTO">
        SELECT * FROM pointhistory WHERE userid = #{userid}
    </select>

</mapper>







package kr.co.matchday.order;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import kr.co.matchday.admin.CouponMasterDTO;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.point.PointHistoryDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CouponDAO couponDao;

    //@Autowired
    //private PointHistoryDAO pointHistoryDao; // PointHistory 관련 DAO 추가 필요

    //@RequestMapping(value = "/order/insert", method = RequestMethod.POST)
    @GetMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        orderDto.setUserid(userid);

        // 주문 정보 삽입
        orderDao.insert(orderDto);

        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }//insert end

    //@PostMapping("/payment")
    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          Model model,
                          HttpSession session) {

        // 사용자 정보 조회
        String userid = (String) session.getAttribute("userID");
        Map<String, Object> userInfo = orderDao.getUserInfo(userid);
        model.addAttribute("userInfo", userInfo); // 모델에 사용자 정보 추가

        // 굿즈 목록 조회
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        // 사용자에게 사용 가능한 쿠폰 조회
        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList); // 모델에 쿠폰 목록 추가

        // 쿠폰 코드가 제공된 경우 쿠폰 할인 적용
        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            discountRate = orderDao.getDiscountRateByCouponId(couponid); // 할인율 가져오기
            // 쿠폰 사용 상태 업데이트
            orderDao.updateCouponUsage(couponid);
        }
        model.addAttribute("discountRate", discountRate); // 모델에 할인율 추가

        // 사용자의 포인트 이력 조회
        List<PointHistoryDTO> pointHistoryList = orderDao.getPointByUserId(userid);
        model.addAttribute("pointHistoryList", pointHistoryList);

        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 사용자의 주문 목록 조회
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        // 굿즈 목록 조회
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);

        // 사용자의 받은 쿠폰 목록 조회
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        return "order/list";
    }

    // 사용자의 포인트 이력을 추가하는 메서드
    @PostMapping("/addPointHistory")
    public String addPointHistory(@RequestParam("userid") String userid,
                                  @RequestParam("pointcategoryid") String pointcategoryid,
                                  @RequestParam("pointtype") String pointtype,
                                  @RequestParam("pointamount") int pointamount,
                                  HttpSession session) {
        // 포인트 이력 DTO 생성 및 설정
        PointHistoryDTO pointHistoryDto = new PointHistoryDTO();
        pointHistoryDto.setUserid(userid);
        pointHistoryDto.setPointcategoryid(pointcategoryid);
        pointHistoryDto.setPointtype(pointtype);
        pointHistoryDto.setPointamount(pointamount);
        pointHistoryDto.setPointsource("Order Payment"); // 예시로 "Order Payment"로 설정
        pointHistoryDto.setPointcreationdate(new Timestamp(System.currentTimeMillis()));
        pointHistoryDto.setPointusedate(null); // 사용 날짜는 null로 설정 (사용 시에 설정)

        // 포인트 이력 추가
        orderDao.insertPointHistory(pointHistoryDto);

        return "redirect:/order/payment";
    }

    // 기타 필요한 메서드 추가 가능
}






<!-- 할인 혜택 -->
<section class="discount-section">
    <h2>할인 혜택</h2>

    <!-- 쿠폰 선택 -->
    <label for="couponid">쿠폰 선택</label>
    <input type="hidden" name="applicableproduct" id="applicableproduct" value="Goods">
    <select id="couponid" name="couponid" class="form-select">
        <option value="">쿠폰 선택</option>
        <c:forEach items="${couponList}" var="coupon">
            <option value="${coupon.couponid}" data-discount="${coupon.discountrate}">
                ${coupon.couponname} ${coupon.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
            </option>
        </c:forEach>
    </select>

    <!-- 보유 포인트 정보 -->
    <br>
    <label for="usedpoints">보유 포인트 사용</label>
    <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointhistory.pointamount}" value="0" class="form-control">
    <p>보유 포인트: ${pointhistory.pointamount}</p>
</section>

<!-- 총 결제 금액 -->
<div class="total-amount">
    <input name="finalpaymentamount" id="finalpaymentamount" value="총 결제 금액 : ${finalpaymentamount} ">
</div>








<!-- Displaying user's available points -->
<section>
    <h2>User Information</h2>
    <p>User ID: ${userInfo.userid}</p>
    <p>User Name: ${userInfo.username}</p>
    <!-- Displaying available points -->
    <p>Available Points: ${userInfo.userpoints}</p>
</section>

<!-- Form for entering points to use -->
<section>
    <h2>Use Points</h2>
    <!-- Form for entering points to use -->
    <form action="/order/payment" method="post">
        <!-- Hidden field to pass user ID -->
        <input type="hidden" id="userid" name="userid" value="${userInfo.userid}">
        
        <!-- Input field for entering points to use -->
        <label for="usedpoints">Use Points</label>
        <input type="number" id="usedpoints" name="usedpoints" min="0" max="${userInfo.userpoints}" value="0" class="form-control">
        
        <!-- Submit button to submit the form -->
        <button type="submit">Apply Points</button>
    </form>
</section>

@PostMapping("/payment")
public String handlePayment(@RequestParam Map<String, String> requestParams,
                            @ModelAttribute OrderDTO orderDto,
                            @RequestParam("usedpoints") int usedPoints,
                            HttpSession session,
                            Model model) {
    // Logic to handle the payment, including the points usage
    // You can access the user ID and other parameters from requestParams
    // Update the orderDto or perform any necessary operations here

    // Example: Updating the order DTO with used points
    orderDto.setUsedPoints(usedPoints);

    // Proceed with payment logic here...

    return "redirect:/order/payment"; // Redirect to payment page or confirmation page
}

<!-- 사용자 정보 및 포인트 사용 섹션 -->
<section>
    <h2>사용자 정보</h2>
    <p>사용자 ID: ${userInfo.userid}</p>
    <p>사용자 이름: ${userInfo.username}</p>
    <!-- 사용 가능한 포인트 표시 -->
    <p>보유 포인트: ${userInfo.pointamount}</p>
</section>

<!-- 포인트 사용 입력 폼 -->
<section>
    <h2>포인트 사용</h2>
    <form action="/order/payment" method="post">
        <!-- 사용자 ID를 전달하기 위한 숨은 필드 -->
        <input type="hidden" id="userid" name="userid" value="${userInfo.userid}">
        
        <!-- 포인트 사용 입력 필드 -->
        <label for="usedpoints">사용할 포인트</label>
        <input type="number" id="usedpoints" name="usedpoints" min="0" max="${userInfo.pointamount}" value="0" class="form-control">
        
        <!-- 폼 제출 버튼 -->
        <button type="submit">포인트 적용</button>
    </form>
</section>

@PostMapping("/payment")
public String handlePayment(@RequestParam Map<String, String> requestParams,
                            @ModelAttribute OrderDTO orderDto,
                            @RequestParam("usedpoints") int usedPoints,
                            HttpSession session,
                            Model model) {
    // 세션에서 사용자 ID 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }

    // 주문 처리 로직에서 포인트 사용 추가
    orderDto.setUserid(userid);
    orderDto.setUsedPoints(usedPoints); // 주문 DTO에 사용할 포인트 추가

    // 주문 DAO를 통해 주문 정보 등록
    orderDao.insert(orderDto);

    // 모델에 사용자 정보 다시 추가
    Map<String, Object> userInfo = orderDao.getUserInfo(userid);
    model.addAttribute("userInfo", userInfo);

    // 추가적으로 필요한 로직을 여기에 추가할 수 있습니다.

    return "order/payment"; // 결제 페이지로 리다이렉션
}




@Controller
@RequestMapping("/order")
public class OrderCont {

    // 다른 필드들...

    @PostMapping("/payment")
    public String handlePayment(@RequestParam Map<String, String> requestParams,
                                @ModelAttribute OrderDTO orderDto,
                                @RequestParam("usedpoints") int usedPoints,
                                HttpSession session,
                                Model model) {
        // 세션에서 사용자 ID 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 주문 DTO에 사용자 ID와 사용할 포인트 추가
        orderDto.setUserid(userid);
        orderDto.setUsedPoints(usedPoints); // 사용할 포인트 설정

        // 주문 처리 로직 호출
        orderDao.insert(orderDto);

        // 추가적으로 필요한 로직 수행

        // 모델에 사용자 정보 추가
        Map<String, Object> userInfo = orderDao.getUserInfo(userid);
        model.addAttribute("userInfo", userInfo);

        return "order/payment"; // 결제 페이지로 이동
    }

    // 다른 컨트롤러 메서드들...
}



// 사용자의 포인트 이력을 조회하는 메서드
public List<PointHistoryDTO> getPointByUserId(String userid) {
    return sqlSession.selectList("order.getPointByUserId", userid);
}






@PostMapping("/payment")
public String handlePayment(@RequestParam Map<String, String> requestParams,
                            @ModelAttribute OrderDTO orderDto,
                            @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedPoints,
                            HttpSession session,
                            Model model) {
    // 세션에서 사용자 ID 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }

    // 주문 DTO에 사용자 ID와 사용할 포인트 추가
    orderDto.setUserid(userid);
    orderDto.setUsedPoints(usedPoints); // 사용할 포인트 설정

    // 주문 처리 로직 호출
    orderDao.insert(orderDto);

    // 추가적으로 필요한 로직 수행

    // 모델에 사용자 정보 추가
    Map<String, Object> userInfo = orderDao.getUserInfo(userid);
    model.addAttribute("userInfo", userInfo);

    return "order/payment"; // 결제 페이지로 이동
}






<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="order">

    <!-- 굿즈 ID로 굿즈 정보 가져오기 -->
    <select id="getGoodsById" parameterType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE goodsid = #{goodsid}
    </select>

    <!-- 사용자 ID로 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT *
        FROM users
        WHERE userid = #{userid}
    </select>

    <!-- 주문 정보 삽입 -->
    <insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
        INSERT INTO `order` (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, 
                             shippingstartdate, shippingenddate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress, 
                             shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
        VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, 
                #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress}, 
                #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
    </insert>

    <!-- 특정 사용자의 주문 목록을 데이터베이스에서 조회하는 SQL 쿼리 -->
    <select id="listByUser" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE userid = #{userid}
    </select>

    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, c.coupontypeid, c.userid, c.usage,
               cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userid}
          AND cm.applicableproduct = #{applicableProduct}
          AND c.usage = #{usage}
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" parameterType="String" resultType="int">
        SELECT discountrate
        FROM couponmaster
        WHERE coupontypeid = (SELECT coupontypeid FROM coupon WHERE couponid = #{couponid})
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponid}
    </update>
    
    <!-- 사용자 ID로 해당 사용자의 포인트 이력 조회 -->
    <select id="getPointByUserId" parameterType="String" resultType="kr.co.matchday.point.PointHistoryDTO">
        SELECT * FROM pointhistory WHERE userid = #{userid}
    </select>

    <!-- PointHistoryDTO를 이용해 포인트 이력 추가 -->
    <insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
        INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, pointusedate)
        VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{pointusedate})
    </insert>

</mapper>






<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>포인트 이력 조회</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Your custom CSS styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            font-size: 24px;
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 8px;
            text-align: center;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>사용자 포인트 이력</h1>

    <!-- Point History Table -->
    <table class="table table-hover">
        <thead class="table-active">
            <tr>
                <th>날짜</th>
                <th>내용</th>
                <th>사용 포인트</th>
            </tr>
        </thead>
        <tbody>
            <c:forEach items="${pointHistoryList}" var="point">
                <tr>
                    <td><fmt:formatDate value="${point.date}" pattern="yyyy-MM-dd HH:mm:ss"/></td>
                    <td>${point.description}</td>
                    <td>${point.amount}</td>
                </tr>
            </c:forEach>
        </tbody>
    </table>

</div><!-- container end -->
</body>
</html>




<!-- 포인트 정보 표시 -->
<section>
    <h2>보유 포인트</h2>
    <p>보유 포인트: ${pointhistory.pointamount}</p>
</section>

<!-- 포인트 사용 입력 폼 -->
<section>
    <h2>포인트 사용</h2>
    <form action="/order/payment" method="post">
        <!-- 사용자 ID를 전달하기 위한 숨은 필드 -->
        <input type="hidden" id="userid" name="userid" value="${userInfo.userid}">
        
        <!-- 포인트 사용 입력 필드 -->
        <label for="usedpoints">사용할 포인트</label>
        <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointhistory.pointamount}" value="0" class="form-control">
        
        <!-- 폼 제출 버튼 -->
        <button type="submit">포인트 적용</button>
    </form>
</section>



// OrderDAO.java

// Import necessary classes
import kr.co.matchday.point.PointHistoryDTO;

@Repository
public class OrderDAO {

    // Existing methods...

    // Fetch point history by user ID
    public List<PointHistoryDTO> getPointByUserId(String userid) {
        return sqlSession.selectList("order.getPointByUserId", userid);
    }

    // Existing methods...
}










// OrderCont.java

// Import necessary classes
import kr.co.matchday.point.PointHistoryDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    // Existing autowired fields...

    // Method to fetch point history and display on payment page
    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @ModelAttribute OrderDTO orderDto,
                          // Other parameters...
                          Model model,
                          HttpSession session) {

        // Existing logic...

        // Fetch user's point history
        List<PointHistoryDTO> pointHistoryList = orderDao.getPointByUserId(userid);
        model.addAttribute("pointHistoryList", pointHistoryList);

        // Existing logic...

        return "order/payment";
    }

    // Existing methods...
}

<!-- 사용자 ID로 해당 사용자의 포인트 이력 조회 -->
<select id="getPointByUserId" parameterType="String" resultType="kr.co.matchday.point.PointHistoryDTO">
    SELECT * FROM pointhistory WHERE userid = #{userid}
</select>




<c:forEach var="pointHistory" items="${pointHistoryList}">
    <label for="point">보유 포인트 사용 
        <input type="number" id="pointamount" value="${pointHistory.pointamount}" readonly>
    </label>
    <form action="applyPoints" method="post">
        <input type="hidden" name="userid" value="${userid}">
        <input type="hidden" name="pointamount" value="${pointHistory.pointamount}">
        <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointHistory.pointamount}" value="0" class="form-control">
        <!-- 폼 제출 버튼 -->
        <button type="submit">포인트 적용</button>
    </form>
</c:forEach>











<%
    int totalPointAmount = 0;
    for (PointHistory pointHistory : (List<PointHistory>)request.getAttribute("pointHistoryList")) {
        totalPointAmount += pointHistory.getPointAmount();
    }
%>



<label for="point">보유 포인트 : <%= totalPointAmount %> point</label>
<input type="number" id="pointamount" value="<%= totalPointAmount %>" readonly>
사용할 포인트
<input type="number" id="usedpoints" name="usedpoints" min="0" max="<%= totalPointAmount %>" value="0" class="form-control">






<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>구매하기</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
    <script type="text/javascript">
        IMP.init('imp05021463'); // 아임포트 관리자 콘솔에서 발급받은 가맹점 식별코드
    </script>
    <style>
        /* ... (style 부분 생략) ... */
    </style>
</head>
<body>
<div class="container">
    <form id="Orderfrm" name="Orderfrm" method="post" action="/order/insert">
        <input type="hidden" name="userid" value="${sessionScope.userID}">
        <input type="hidden" name="orderid" id="orderid" value="">
        <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
        <input type="hidden" name="orderstatus" id="orderstatus" value="주문완료">
        <input type="hidden" name="paymentmethodcode" id="paymentmethodcode" value="pay01">
        <input type="hidden" name="receiptmethodcode" id="receiptmethodcode" value="receiving02">

        <!-- ... (기타 폼 요소 생략) ... -->

        <!-- 할인 혜택 -->
        <section class="discount-section">
            <h2>할인 혜택</h2>

            <!-- 쿠폰 선택 -->
            <label for="couponid">쿠폰 선택</label>
            <input type="hidden" name="applicableproduct" id="applicableproduct" value="Goods">
            <select id="couponid" name="couponid" class="form-select">
                <option value="">쿠폰 선택</option>
                <c:forEach items="${couponList}" var="coupon">
                    <option value="${coupon.couponid}" data-discount="${coupon.discountrate}">
                        ${coupon.couponname} ${coupon.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
                    </option>
                </c:forEach>
            </select>
            <br>

            **<%
                int totalPointAmount = 0;
                for (PointHistory pointHistory : (List<PointHistory>)request.getAttribute("pointHistoryList")) {
                    totalPointAmount += pointHistory.getPointAmount();
                }
            %>**

            **<label for="point">보유 포인트 : <%= totalPointAmount %> point</label>**
            **<input type="number" id="pointamount" value="<%= totalPointAmount %>" readonly>**
            사용할 포인트
            **<input type="number" id="usedpoints" name="usedpoints" min="0" max="<%= totalPointAmount %>" value="0" class="form-control">**
            <button type="button">포인트 사용</button>
            <button type="submit">포인트 사용</button>
        </section>

        <!-- 총 결제 금액 -->
        <div class="total-amount">
            <input name="finalpaymentamount" id="finalpaymentamount" value="총 결제 금액 : ${finalpaymentamount} ">
        </div>

        <div class="checkout-button">
            <button type="submit" id="pay-button">결제하기</button>
            <button type="button" onclick="closePopup()">결제취소</button>
        </div>
    </form>
</div>

<script>
    // ... (스크립트 부분 생략) ...
</script>
</body>
</html>





// 서블릿 또는 컨트롤러 메서드에서
List<PointHistory> pointHistoryList = getPointHistoryListFromDatabase(); // 데이터베이스에서 포인트 히스토리 목록 가져오기
int totalPointAmount = 0;
for (PointHistory pointHistory : pointHistoryList) {
    totalPointAmount += pointHistory.getPointAmount();
}
request.setAttribute("totalPointAmount", totalPointAmount);
request.setAttribute("pointHistoryList", pointHistoryList);


<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>구매하기</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
    <script type="text/javascript">
        IMP.init('imp05021463'); // 아임포트 관리자 콘솔에서 발급받은 가맹점 식별코드
    </script>
    <style>
        /* ... (style 부분 생략) ... */
    </style>
</head>
<body>
<div class="container">
    <form id="Orderfrm" name="Orderfrm" method="post" action="/order/insert">
        <input type="hidden" name="userid" value="${sessionScope.userID}">
        <input type="hidden" name="orderid" id="orderid" value="">
        <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
        <input type="hidden" name="orderstatus" id="orderstatus" value="주문완료">
        <input type="hidden" name="paymentmethodcode" id="paymentmethodcode" value="pay01">
        <input type="hidden" name="receiptmethodcode" id="receiptmethodcode" value="receiving02">

        <!-- ... (기타 폼 요소 생략) ... -->

        <!-- 할인 혜택 -->
        <section class="discount-section">
            <h2>할인 혜택</h2>

            <!-- 쿠폰 선택 -->
            <label for="couponid">쿠폰 선택</label>
            <input type="hidden" name="applicableproduct" id="applicableproduct" value="Goods">
            <select id="couponid" name="couponid" class="form-select">
                <option value="">쿠폰 선택</option>
                <c:forEach items="${couponList}" var="coupon">
                    <option value="${coupon.couponid}" data-discount="${coupon.discountrate}">
                        ${coupon.couponname} ${coupon.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
                    </option>
                </c:forEach>
            </select>
            <br>

            <label for="point">보유 포인트 : ${totalPointAmount} point</label>
            <input type="number" id="pointamount" value="${totalPointAmount}" readonly>
            사용할 포인트
            <input type="number" id="usedpoints" name="usedpoints" min="0" max="${totalPointAmount}" value="0" class="form-control">
            <button type="button">포인트 사용</button>
        </section>

        <!-- 총 결제 금액 -->
        <div class="total-amount">
            <input name="finalpaymentamount" id="finalpaymentamount" value="총 결제 금액 : ${finalpaymentamount} ">
        </div>

        <div class="checkout-button">
            <button type="submit" id="pay-button">결제하기</button>
            <button type="button" onclick="closePopup()">결제취소</button>
        </div>
    </form>
</div>

<script>
    // ... (스크립트 부분 생략) ...
</script>
</body>
</html>

















document.addEventListener('DOMContentLoaded', function() {
    generateOrderId(); // 주문서 페이지가 로드될 때 orderid 생성

    // 쿠폰 선택 이벤트
    document.getElementById('couponid').addEventListener('change', updateTotalAmount);

    // 포인트 입력 이벤트
    document.getElementById('usedpoints').addEventListener('input', updateTotalAmount);

    // 결제 버튼 클릭 이벤트
    document.getElementById('pay-button').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 제출 동작 방지
        processPayment();
    });

    // 우편번호 찾기 이벤트
    document.getElementById('find-postcode').addEventListener('click', findPostcode);
});

// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice});
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }

    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    var finalAmount = totalPrice * (1 - couponDiscount / 100) - usedPoints;

    document.getElementById('finalpaymentamount').value = finalAmount.toLocaleString() + '원';
}

// 주소 찾기 API 호출 함수
function findPostcode() {
    new daum.Postcode({
        oncomplete: function(data) {
            var addr = ''; // 주소 변수
            var extraAddr = ''; // 참고항목 변수

            if (data.userSelectedType === 'R') {
                addr = data.roadAddress;
            } else {
                addr = data.jibunAddress;
            }

            if (data.userSelectedType === 'R') {
                if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {
                    extraAddr += data.bname;
                }
                if (data.buildingName !== '' && data.apartment === 'Y') {
                    extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                }
                if (extraAddr !== '') {
                    extraAddr = ' (' + extraAddr + ')';
                }
                $('#extraAddress').val(extraAddr);
            } else {
                $('#extraAddress').val('');
            }

            $('#postcode').val(data.zonecode); // 우편번호 설정
            $('#shippingaddress').val(addr); // 주소 설정
            $('#detailAddress').focus(); // 상세주소 입력 필드로 포커스 이동
        }
    }).open();
}

// 결제 처리 함수
function processPayment() {
    var finalAmount = parseFloat(document.getElementById('finalpaymentamount').value.replace(/[^0-9.-]+/g,""));

    IMP.request_pay({
        pg: 'html5_inicis',
        pay_method: 'card',
        merchant_uid: 'merchant_' + new Date().getTime(),
        name: '상품 주문 결제',
        amount: finalAmount,
        buyer_email: $('#recipientemail').val(),
        buyer_name: $('#recipientname').val(),
        buyer_tel: $('#recipientphone').val(),
        m_redirect_url: 'http://yourdomain.com/complete'
    }, function(rsp) {
        if (rsp.success) {
            var formData = {
                imp_uid: rsp.imp_uid,
                merchant_uid: rsp.merchant_uid,
                paid_amount: rsp.paid_amount,
                orderid: $('#orderid').val(),
                finalpaymentamount: finalAmount,
                recipientname: $('#recipientname').val(),
                recipientemail: $('#recipientemail').val(),
                recipientphone: $('#recipientphone').val(),
                shippingaddress: $('#shippingaddress').val() + ' ' + $('#detailAddress').val(),
                shippingrequest: $('#shippingrequest').val(),
                couponid: $('#couponid').val(),
                usedpoints: $('#usedpoints').val()
            };

            $.ajax({
                type: 'POST',
                url: '/order/payment',
                data: formData,
                traditional: true,
                success: function(data) {
                    if (data.success) {
                        window.location.href = '/order/confirmation?orderid=' + data.orderid;
                    } else {
                        alert('결제 검증에 실패했습니다.');
                    }
                }
            });
        } else {
            alert('결제에 실패하였습니다. 오류 내용 :' + rsp.error_msg);
        }
    });
}

function closePopup() {
    alert("결제가 취소되었습니다.");
    window.close();
}











<div class="total-amount">
    <p>총 결제 금액: <input type="text" id="finalpaymentamount" value="0원" readonly /></p>
</div>

<!-- 주문상세내역 -->
<section class="order-section">
    <h2>주문상세내역</h2>
    <div class="order-details">
        <!-- 장바구니 상품리스트 시작 -->
        <div class="row">
            <div class="col-sm-12">
                <table class="table table-hover">
                    <thead class="table-active">
                        <tr>
                            <th class="text-center">상품 정보</th>
                            <th class="text-center">사이즈</th>
                            <th class="text-center">수량</th>
                            <th class="text-center">가격</th>
                            <th class="text-center">총 가격</th>
                        </tr>
                    </thead>
                    <tbody class="text-center">
                        <c:forEach items="${goodsList}" var="goods">
                            <c:if test="${goods.goodsid eq param.goodsid}">
                                <tr>
                                    <td>
                                        <div class="product-image">
                                            <c:if test="${not empty goods.filename}">
                                                <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                                            </c:if>
                                        </div>
                                        <br>
                                        <span class="productname-text">${goods.productname}</span>
                                    </td>
                                    <td class="size-text">${size}</td>
                                    <td class="quantity-text">${quantity}</td>
                                    <td class="price-text"><fmt:formatNumber value="${price}" pattern="#,###원" /></td>
                                    <td class="totalprice-text"><fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></td>
                                </tr>
                            </c:if>
                        </c:forEach>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<!-- 할인 혜택 -->
<section class="discount-section">
    <h2>할인 혜택</h2>
    <!-- 쿠폰 선택 -->
    <label for="couponid">쿠폰 선택</label>
    <select id="couponid" name="couponid" class="form-select">
        <option value="">쿠폰 선택</option>
        <c:forEach items="${couponList}" var="coupon">
            <option value="${coupon.couponid}" data-discount="${coupon.discountrate}">
                ${coupon.couponname} ${coupon.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
            </option>
        </c:forEach>
    </select>

    <br>

    <!-- 포인트 정보 -->
    <c:forEach var="pointHistory" items="${pointHistoryList}">
        <label for="point">보유 포인트 : ${pointHistory.pointamount} point</label>
        <input type="number" id="pointamount" value="${pointHistory.pointamount}" readonly />
        <label for="usedpoints">사용할 포인트</label>
        <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointHistory.pointamount}" value="0" class="form-control" />
    </c:forEach>
</section>

<!-- 총 결제 금액 -->
<div class="total-amount">
    <p id="finalpaymentamount">총 결제 금액: <span>${totalPrice}</span></p>
</div>





      <!-- 포인트 정보 -->
    <c:forEach var="pointHistory" items="${pointHistoryList}">
        <label for="point">보유 포인트 : ${pointHistory.pointamount} point</label>
        <input type="number" id="pointamount" value="${pointHistory.pointamount}" readonly />
        <label for="usedpoints">사용할 포인트</label>
        <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointHistory.pointamount}" value="0" class="form-control" />
    </c:forEach>


// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 최종 결제 금액 업데이트
    document.getElementById('finaltotalprice').innerText = finalTotalPrice.toLocaleString() + '원';
}





// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 최종 결제 금액 업데이트
    document.getElementById('finaltotalprice').innerText = finalTotalPrice.toLocaleString() + '원';
}


// 결제 처리 함수
document.getElementById('pay-button').addEventListener('click', function(event) {
    event.preventDefault(); // 기본 제출 동작 방지

    // 최종 결제 금액 업데이트
    updateTotalAmount();

    var finalTotalPrice = parseFloat(document.getElementById('finaltotalprice').innerText.replace(/[^0-9.-]+/g,""));

    IMP.request_pay({
        pg: 'html5_inicis',
        pay_method: 'card',
        merchant_uid: 'merchant_' + new Date().getTime(),
        name: '상품 주문 결제',
        amount: finalTotalPrice,
        buyer_email: document.getElementById('recipientemail').value,
        buyer_name: document.getElementById('recipientname').value,
        buyer_tel: document.getElementById('recipientphone').value,
        m_redirect_url: 'http://yourdomain.com/complete'
    }, function(rsp) {
        if (rsp.success) {
            var formData = {
                imp_uid: rsp.imp_uid,
                merchant_uid: rsp.merchant_uid,
                paid_amount: rsp.paid_amount,
                orderid: document.getElementById('orderid').value,
                finalpaymentamount: finalTotalPrice,
                recipientname: document.getElementById('recipientname').value,
                recipientemail: document.getElementById('recipientemail').value,
                recipientphone: document.getElementById('recipientphone').value,
                shippingaddress: document.getElementById('shippingaddress').value + ' ' + document.getElementById('detailAddress').value,
                shippingrequest: document.getElementById('shippingrequest').value,
                couponid: document.getElementById('couponid').value,
                usedpoints: document.getElementById('usedpoints').value
            };

            $.ajax({
                type: 'POST',
                url: '/order/payment',
                data: formData,
                traditional: true,
                success: function(data) {
                    if (data.success) {
                        window.location.href = '/order/confirmation?orderid=' + data.orderid;
                    } else {
                        alert('결제 검증에 실패했습니다.');
                    }
                }
            });
        } else {
            alert('결제에 실패하였습니다. 오류 내용 :' + rsp.error_msg);
        }
    });
});


<div class="total-amount">
    배송비 : <span id="shipping-fee">3500원</span> (100,000원 이상 구매 시 무료)
    <br>
    <p id="finaltotalprice">최종 결제 금액 : ${finaltotalprice}</p>
</div>








<div>
    <!-- ... other form elements ... -->
    
    <label for="couponid">쿠폰:</label>
    <select id="couponid" name="couponid" onchange="updateTotalAmount()">
        <option value="">쿠폰 선택</option>
        <!-- 쿠폰 옵션들 추가 -->
    </select>

    <label for="usedpoints">사용할 포인트:</label>
    <input type="number" id="usedpoints" name="usedpoints" value="0" oninput="updateTotalAmount()" />

    <div class="total-amount">
        상품 총 금액: <span id="total-price">${totalPrice}</span>원
        <br>
        배송비: <span id="shipping-fee">3500</span>원
        <br>
        <p id="final-total-price">최종 결제 금액: ${totalPrice + shippingFee}</p>
    </div>
    
    <button id="pay-button">결제하기</button>
</div>






// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString();

    // 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}

// 초기 총 결제 금액 업데이트
document.addEventListener('DOMContentLoaded', updateTotalAmount);


















<div>
    <!-- ... other form elements ... -->
    
    <label for="couponid">쿠폰:</label>
    <select id="couponid" name="couponid" onchange="updateTotalAmount()">
        <option value="">쿠폰 선택</option>
        <!-- 쿠폰 옵션들 추가 -->
    </select>

    <label for="usedpoints">사용할 포인트:</label>
    <input type="number" id="usedpoints" name="usedpoints" value="0" oninput="updateTotalAmount()" />

    <div class="total-amount">
        상품 총 금액: <span id="total-price">${totalPrice}</span>원
        <br>
        배송비: <span id="shipping-fee">3500</span>원
        <br>
        <p id="final-total-price">최종 결제 금액: ${totalPrice + shippingFee}</p>
    </div>
    
    <button id="pay-button">결제하기</button>
</div>

















// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString();

    // 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}

// 초기 총 결제 금액 업데이트
document.addEventListener('DOMContentLoaded', updateTotalAmount);


<!-- PointHistoryDTO를 이용해 포인트 이력 추가 -->
<insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
    INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, pointusedate)
    VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{pointusedate})
</insert>


<!-- payment.jsp -->

<!-- Existing HTML and JSP code -->

<c:forEach var="pointHistory" items="${pointHistoryList}">
    <p>Point Amount: ${pointHistory.pointamount}</p>
    <p>Point Source: ${pointHistory.pointsource}</p>
    <p>Point Creation Date: ${pointHistory.pointcreationdate}</p>
    <!-- Add more fields as needed -->
</c:forEach>

<!-- Existing HTML and JSP code -->




<c:forEach var="pointHistory" items="${pointHistoryList}">
    <label for="pointamount">보유 포인트: ${pointHistory.pointamount} point</label>
    사용할 포인트
    <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointHistory.pointamount}" value="0" class="form-control" oninput="updateTotalAmount()">
</c:forEach>
<button type="button" onclick="usePoints()">포인트 사용</button>






// 포인트 사용 버튼 클릭 시 호출되는 함수
function usePoints() {
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0; // 입력된 포인트
    var maxPoints = parseFloat(document.getElementById('usedpoints').getAttribute('max')); // 최대 사용 가능 포인트

    if (usedPoints > maxPoints) {
        alert('최대 사용 가능 포인트를 초과하였습니다.');
        return;
    }

    var totalPrice = parseFloat(document.getElementById('total-price').innerText); // 상품 총 금액
    var shippingFee = parseFloat(document.getElementById('shipping-fee').innerText); // 배송비
    var finalTotalPrice = totalPrice + shippingFee; // 초기 최종 결제 금액

    // 포인트 사용 금액이 상품 총 금액보다 클 경우, 상품 총 금액만큼만 할인
    if (usedPoints > totalPrice) {
        finalTotalPrice -= totalPrice;
    } else {
        finalTotalPrice -= usedPoints;
    }

    // 배송비가 추가된 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}






@Repository
public class OrderDAO {

    // 기타 메서드 생략...

    // 쿠폰 정보 가져오기
    public CouponDTO getCouponById(String couponId) {
        return sqlSession.selectOne("order.getCouponById", couponId);
    }

    // 쿠폰 사용 상태 업데이트
    public void updateCouponUsage(String couponId) {
        sqlSession.update("order.updateCouponUsage", couponId);
    }
}



<insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
    INSERT INTO `order` (orderid, userid, goodsid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, 
                         shippingstartdate, shippingenddate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress, 
                         shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode)
    VALUES (#{orderid}, #{userid}, #{goodsid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, 
            #{shippingstartdate}, #{shippingenddate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress}, 
            #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode})
</insert>

















<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>구매하기</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
    <style>
        /* Your CSS styles here */
    </style>
</head>
<body>
<div class="container">
    <form id="Orderfrm" name="Orderfrm" method="post" action="/order/insert">
        <input type="hidden" name="userid" value="${sessionScope.userID}">
        <input type="hidden" name="orderid" id="orderid" value="">
        <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
        <input type="hidden" name="orderstatus" id="orderstatus" value="주문완료">
        <input type="hidden" name="paymentmethodcode" id="paymentmethodcode" value="pay01">
        <input type="hidden" name="receiptmethodcode" id="receiptmethodcode" value="receiving02">

        <div class="order_tit">
            <h1>주문 및 결제</h1>
            <ol>
                <li class="page_on"><span>01</span>장바구니<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="장바구니진행 중"></span></li>
                <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="주문서작성/결제대기"></span></li>
                <li><span>03</span> 주문완료</li>
            </ol>
        </div>

        <!-- 주문상세내역 -->
        <section class="order-section">
            <h2>주문상세내역</h2>
            <div class="order-details">
                <!-- 장바구니 상품리스트 시작 -->
                <div class="row">
                    <div class="col-sm-12">
                        <table class="table table-hover">
                            <thead class="table-active">
                                <tr>
                                    <th class="text-center">상품 정보</th>
                                    <th class="text-center">사이즈</th>
                                    <th class="text-center">수량</th>
                                    <th class="text-center">가격</th>
                                    <th class="text-center">총 가격</th>
                                </tr>
                            </thead>
                            <tbody class="text-center">
                                <c:forEach items="${goodsList}" var="goods">
                                    <c:if test="${goods.goodsid eq param.goodsid}">
                                        <tr>
                                            <td>
                                                <div class="product-image">
                                                    <c:if test="${not empty goods.filename}">
                                                        <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                                                    </c:if>
                                                </div>
                                                <br>
                                                <span class="productname-text">${goods.productname}</span>
                                            </td>
                                            <td class="size-text">${goods.size}</td>
                                            <td class="quantity-text">${goods.quantity}</td>
                                            <td class="price-text"><fmt:formatNumber value="${goods.price}" pattern="#,###원" /></td>
                                            <td class="totalprice-text"><fmt:formatNumber value="${goods.totalPrice}" pattern="#,###원" /></td>
                                        </tr>
                                    </c:if>
                                </c:forEach>
                            </tbody>
                        </table>
                    </div> <!-- col end -->
                </div> <!-- row end -->
            </div> <!-- order-details end -->
            <div class="total-amount">
                <p>총 결제 금액: <fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></p>
            </div>
        </section>
        <!-- 주문상세내역 end -->

        <!-- 주문자 정보 -->
        <section class="customer-section">
            <h2>주문자 정보</h2>
            <label for="name">이름</label>
            <input type="text" id="recipientname" name="recipientname" class="form-control" required>
            <label for="email">이메일</label>
            <input type="email" id="recipientemail" name="recipientemail" class="form-control" required>
            <label for="phone">전화번호</label>
            <input type="tel" id="recipientphone" name="recipientphone" class="form-control" required>
        </section>

        <!-- 배송 정보 -->
        <section class="delivery-section">
            <h2>배송 정보</h2>
            <label for="postcode" class="form-label">우편번호</label>
            <input type="text" class="form-control" id="postcode" readonly>
            <button type="button" class="btn btn-primary mt-2" id="find-postcode">우편번호 찾기</button>
            <label for="shippingaddress" class="form-label">배송 주소</label>
            <input type="text" class="form-control" id="shippingaddress" name="shippingaddress" readonly>
            <label for="detailAddress" class="form-label">상세주소</label>
            <input type="text" class="form-control" id="detailAddress" required>
            <label for="shippingrequest">배송 시 요청 사항</label>
            <select id="shippingrequest" class="form-select">
                <option value="부재 시 경비실에 맡겨주세요">부재 시 경비실에 맡겨주세요</option>
                <option value="부재 시 택배함에 넣어주세요">부재 시 택배함에 넣어주세요</option>
                <option value="부재 시 집 앞에 놔주세요">부재 시 집 앞에 놔주세요</option>
                <option value="배송 전 연락 바랍니다">배송 전 연락 바랍니다</option>
                <option value="파손의 위험이 있는 상품입니다. 배송 시 주의해 주세요">파손의 위험이 있는 상품입니다. 배송 시 주의해 주세요</option>
                <option value="빠른 배송 부탁 드립니다">빠른 배송 부탁 드립니다</option>
                <option value="">직접 입력</option>
            </select>
            <textarea name="" id="notes" rows="5" maxlength="50" placeholder="최대 50까지 입력 가능합니다." style="display: none;"></textarea>
        </section>

        <!-- 할인 혜택 -->
        <section class="discount-section">
            <h2>할인 혜택</h2>
            <!-- 쿠폰 선택 -->
            <label for="couponSelect">쿠폰 선택</label>
            <select name="couponSelect" id="couponSelect">
                <option value="">쿠폰을 선택해주세요.</option>
            </select>
            <p>선택한 쿠폰 내용 : <span id="selectCoupon"></span></p>
            <p>할인된 금액 : <span id="couponPrice">0</span>원</p>
        </section>

        <!-- 결제수단 -->
        <section class="payment-method-section">
            <h2>결제수단</h2>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" id="creditCard" value="creditCard" checked>
                <label class="form-check-label" for="creditCard">신용카드</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" id="mobilePayment" value="mobilePayment">
                <label class="form-check-label" for="mobilePayment">휴대폰 결제</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" id="kakaoPay" value="kakaoPay">
                <label class="form-check-label" for="kakaoPay">카카오페이</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" id="bankTransfer" value="bankTransfer">
                <label class="form-check-label" for="bankTransfer">무통장 입금</label>
            </div>
        </section>

        <!-- 개인정보처리방침 동의 -->
        <section class="privacy-section">
            <h2>개인정보처리방침 동의</h2>
            <p>
                <input type="checkbox" id="privacyAgree" name="privacyAgree" required>
                <label for="privacyAgree">개인정보처리방침에 동의합니다.</label>
            </p>
        </section>

        <!-- 결제 버튼 -->
        <div class="order-btn text-center mt-4">
            <button type="button" class="btn btn-primary" id="paymentButton">결제하기</button>
            <button type="button" class="btn btn-secondary" id="cancelButton">결제취소</button>
        </div>
    </form>
</div>

<script type="text/javascript">
    $(document).ready(function() {
        // 우편번호 찾기 버튼 클릭 이벤트
        $('#find-postcode').on('click', function() {
            daum.postcode.load(function() {
                new daum.Postcode({
                    oncomplete: function(data) {
                        $('#postcode').val(data.zonecode);
                        $('#shippingaddress').val(data.address);
                    }
                }).open();
            });
        });

        // 결제하기 버튼 클릭 이벤트
        $('#paymentButton').on('click', function() {
            var amount = parseInt('${totalPrice}'.replace(/[^0-9]/g, ''));
            var IMP = window.IMP;
            IMP.init('imp00000000'); // 가맹점 식별코드

            IMP.request_pay({
                pg: 'inicis',
                pay_method: 'card',
                merchant_uid: 'merchant_' + new Date().getTime(),
                name: '주문명:결제테스트',
                amount: amount,
                buyer_email: '${sessionScope.userEmail}',
                buyer_name: '${sessionScope.userName}',
                buyer_tel: '${sessionScope.userPhone}',
                buyer_addr: '${sessionScope.userAddr}',
                buyer_postcode: '${sessionScope.userPostcode}'
            }, function(response) {
                if (response.success) {
                    var orderid = response.merchant_uid;
                    $('#orderid').val(orderid);
                    $('#Orderfrm').submit();
                } else {
                    alert('결제에 실패하였습니다.\n에러 내용: ' + response.error_msg);
                }
            });
        });

        // 결제취소 버튼 클릭 이벤트
        $('#cancelButton').on('click', function() {
            alert('결제를 취소하셨습니다.');
            window.location.href = '/';
        });
    });
</script>
</body>
</html>









function usePoints() {
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0; // 입력된 포인트
    var maxPoints = parseFloat(document.getElementById('usedpoints').getAttribute('max')); // 최대 사용 가능 포인트

    var finalTotalPrice = parseFloat(document.getElementById('final-total-price').innerText.replace(/[^0-9.-]+/g,"")); // 최종 결제 금액

    if (usedPoints > maxPoints) {
        alert('최대 사용 가능 포인트를 초과하였습니다.');
        document.getElementById('usedpoints').value = maxPoints; // 최대 사용 가능 포인트로 설정
        usedPoints = maxPoints;
    }

    if (usedPoints > finalTotalPrice) {
        alert('최종 결제 금액을 초과하여 포인트를 사용할 수 없습니다.');
        document.getElementById('usedpoints').value = finalTotalPrice; // 최종 결제 금액으로 설정
        usedPoints = finalTotalPrice;
    }

    updateTotalAmount(); // 총 결제 금액 업데이트
}








function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    
    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString();

    // 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}




// 포인트 사용 버튼 클릭 시 호출되는 함수
function usePoints() {
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0; // 입력된 포인트
    var maxPoints = parseFloat(document.getElementById('usedpoints').getAttribute('max')); // 최대 사용 가능 포인트

    if (usedPoints > maxPoints) {
        alert('최대 사용 가능 포인트를 초과하였습니다.');
        document.getElementById('usedpoints').value = maxPoints; // 최대 포인트로 설정
        usedPoints = maxPoints; // 사용할 포인트를 최대 포인트로 변경
    }

    var totalPrice = parseFloat(document.getElementById('total-price').innerText); // 상품 총 금액
    var shippingFee = parseFloat(document.getElementById('shipping-fee').innerText); // 배송비
    var finalTotalPrice = totalPrice + shippingFee; // 초기 최종 결제 금액

    // 포인트 사용 금액이 상품 총 금액보다 클 경우, 상품 총 금액만큼만 할인
    if (usedPoints > totalPrice) {
        finalTotalPrice -= totalPrice;
    } else {
        finalTotalPrice -= usedPoints;
    }

    // 배송비가 추가된 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}








// 포인트 사용 버튼 클릭 시 호출되는 함수
function usePoints() {
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0; // 입력된 포인트
    var maxPoints = parseFloat(document.getElementById('usedpoints').getAttribute('max')); // 최대 사용 가능 포인트

    var finalTotalPrice = parseFloat(document.getElementById('final-total-price').innerText.replace(/[^0-9.-]+/g,"")); // 최종 결제 금액

    if (usedPoints < 0 || isNaN(usedPoints)) {
        alert('잘못된 포인트 입력입니다.');
        document.getElementById('usedpoints').value = 0;
        return;
    }

    if (usedPoints > maxPoints) {
        alert('최대 사용 가능 포인트를 초과하였습니다.');
        document.getElementById('usedpoints').value = maxPoints; // 최대 사용 가능 포인트로 설정
        usedPoints = maxPoints;
    }

    if (usedPoints > finalTotalPrice) {
        alert('최종 결제 금액을 초과하여 포인트를 사용할 수 없습니다.');
        document.getElementById('usedpoints').value = finalTotalPrice; // 최종 결제 금액으로 설정
        usedPoints = finalTotalPrice;
    }

    updateTotalAmount(); // 총 결제 금액 업데이트
}

// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;

    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString();

    // 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}

// 초기 총 결제 금액 업데이트
document.addEventListener('DOMContentLoaded', updateTotalAmount);





<div class="total-amount">
    <br>
    배송비 : <span id="shipping-fee">3500원</span>원 (100,000원 이상 구매 시 무료)
    <br>
    <p id="final-total-price">최종 결제 금액: 0원</p>
</div>




// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString();

    // 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}








// 결제 처리 함수
function processPayment() {
    // 최종 결제 금액 업데이트
    updateTotalAmount();

    var finalTotalPrice = parseFloat(document.getElementById('final-total-price').innerText.replace(/[^0-9.-]+/g, ""));

    IMP.request_pay({
        pg: 'html5_inicis',
        pay_method: 'card',
        merchant_uid: 'merchant_' + new Date().getTime(),
        name: '상품 주문 결제',
        amount: finalTotalPrice,
        buyer_email: $('#recipientemail').val(),
        buyer_name: $('#recipientname').val(),
        buyer_tel: $('#recipientphone').val(),
        m_redirect_url: 'http://yourdomain.com/complete'
    }, function(rsp) {
        if (rsp.success) {
            var formData = {
                imp_uid: rsp.imp_uid,
                merchant_uid: rsp.merchant_uid,
                paid_amount: rsp.paid_amount,
                orderid: '${order.orderid}',
                finalpaymentamount: ${'finalpaymentamount'}.val(),
                recipientname: $('#recipientname').val(),
                recipientemail: $('#recipientemail').val(),
                recipientphone: $('#recipientphone').val(),
                shippingaddress: $('#shippingaddress').val() + ' ' + $('#detailAddress').val(),
                shippingrequest: $('#shippingrequest').val(),
                couponid: $('#couponid').val(),
                usedpoints: $('#usedpoints').val()
            };

            $.ajax({
                type: 'POST',
                url: '/order/payment',
                data: formData,
                traditional: true,
                success: function(data) {
                    if (data.success) {
                        window.location.href = '/order/confirmation?orderid=' + data.orderid;
                    } else {
                        alert('결제 검증에 실패했습니다.');
                    }
                }
            });
        } else {
            alert('결제에 실패하였습니다. 오류 내용 :' + rsp.error_msg);
        }
    });
}



<p id="final-total-price">최종 결제 금액: 0</p>
var finalTotalPrice = parseFloat(document.getElementById('final-total-price').innerText.replace(/[^0-9.-]+/g,""));













<script>

// 페이지 로드될 때 실행되는 함수
document.addEventListener('DOMContentLoaded', function() {
    generateOrderId(); // 주문서 페이지가 로드될 때 orderid 생성
    
    // 쿠폰 선택 이벤트
    document.getElementById('couponid').addEventListener('change', updateTotalAmount);

    // 포인트 입력 이벤트
    document.getElementById('usedpoints').addEventListener('input', updateTotalAmount);

    // 결제 버튼 클릭 이벤트
    document.getElementById('pay-button').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 제출 동작 방지
        processPayment();
    });

    // 우편번호 찾기 이벤트
    document.getElementById('find-postcode').addEventListener('click', findPostcode);
});

//총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString();

    // 최종 결제 금액 업데이트
    document.getElementById('final-total-price').innerText = '최종 결제 금액: ' + finalTotalPrice.toLocaleString() + '원';
}

// 초기 총 결제 금액 업데이트
document.addEventListener('DOMContentLoaded', updateTotalAmount);

//결제 처리 함수
function processPayment() {
    updateTotalAmount(); // 최종 결제 금액 업데이트

    var finalTotalPrice = parseFloat(document.getElementById('final-total-price').innerText.replace(/[^0-9.-]+/g,""));

    // 여기에 실제 결제 처리 로직을 구현하세요 (IMP.request_pay 등)
}

// 주소 찾기 API 호출 함수
document.getElementById('find-postcode').addEventListener('click', function() {
    // 주소 찾기 로직
});

// 다른 함수들도 마찬가지로 이 위치에서 정의합니다.

</script>



var finalTotalPriceElement = document.getElementById('finaltotalprice');
var finalTotalPrice = 0;

if (finalTotalPriceElement !== null) {
    var totalPriceText = finalTotalPriceElement.innerText.trim();
    var extractedPrice = totalPriceText.match(/[0-9.-]+/g);

    if (extractedPrice !== null) {
        finalTotalPrice = parseFloat(extractedPrice.join(''));
    }
}

console.log(finalTotalPrice);




























<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>구매하기</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
    <script>
        IMP.init('imp05021463'); // Replace with your actual IAMPORT key
    </script>
    <style>
        /* Your CSS styles here */
    </style>
</head>
<body>
<div class="container">
    <form id="Orderfrm" name="Orderfrm" method="post" action="/order/insert">
        <input type="hidden" name="userid" value="${sessionScope.userID}">
        <input type="hidden" name="orderid" id="orderid" value="">
        <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
        <input type="hidden" name="orderstatus" id="orderstatus" value="주문완료">
        <input type="hidden" name="paymentmethodcode" id="paymentmethodcode" value="pay01">
        <input type="hidden" name="receiptmethodcode" id="receiptmethodcode" value="receiving02">

        <!-- 주문 및 결제 타이틀 및 진행상태 -->
        <div class="order_tit">
            <h1>주문 및 결제</h1>
            <ol>
                <li class="page_on"><span>01</span>장바구니<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="장바구니진행 중"></span></li>
                <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="주문서작성/결제대기"></span></li>
                <li><span>03</span> 주문완료</li>
            </ol>
        </div>

        <!-- 주문상세내역 -->
        <section class="order-section">
            <h2>주문상세내역</h2>
            <div class="order-details">
                <!-- 장바구니 상품리스트 -->
                <div class="row">
                    <div class="col-sm-12">
                        <table class="table table-hover">
                            <thead class="table-active">
                            <tr>
                                <th class="text-center">상품 정보</th>
                                <th class="text-center">사이즈</th>
                                <th class="text-center">수량</th>
                                <th class="text-center">가격</th>
                                <th class="text-center">총 가격</th>
                            </tr>
                            </thead>
                            <tbody class="text-center">
                            <c:forEach items="${goodsList}" var="goods">
                                <c:if test="${goods.goodsid eq param.goodsid}">
                                    <tr>
                                        <td>
                                            <div class="product-image">
                                                <c:if test="${not empty products.filename}">
                                                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                                                </c:if>
                                            </div>
                                            <br>
                                            <span class="productname-text">${goods.productname}</span>
                                        </td>
                                        <td class="size-text">${size}</td>
                                        <td class="quantity-text">${quantity}</td>
                                        <td class="price-text"><fmt:formatNumber value="${price}" pattern="#,###원" /></td>
                                        <td class="totalprice-text"><fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></td>
                                    </tr>
                                </c:if>
                            </c:forEach>
                            </tbody>
                        </table>
                    </div>
                    <!-- col end -->
                </div>
                <!-- row end -->
            </div>
            <!-- order-details end -->
            <div class="total-amount">
                <p>총 쇼핑 금액: <fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></p>
            </div>
        </section>
        <!-- 주문상세내역 end -->

        <!-- 주문자 정보 -->
        <section class="customer-section">
            <h2>주문자 정보</h2>
            <label for="name">이름</label>
            <input type="text" id="recipientname" name="recipientname" class="form-control" required>
            <label for="email">이메일</label>
            <input type="email" id="recipientemail" name="recipientemail" class="form-control" required>
            <label for="phone">전화번호</label>
            <input type="tel" id="recipientphone" name="recipientphone" class="form-control" required>
        </section>
        <!-- 배송 정보 -->
        <section class="delivery-section">
            <h2>배송 정보</h2>
            <label for="postcode" class="form-label">우편번호</label>
            <input type="text" class="form-control" id="postcode" readonly>
            <button type="button" class="btn btn-primary mt-2" id="find-postcode">우편번호 찾기</button>
            <label for="shippingaddress" class="form-label">배송 주소</label>
            <input type="text" class="form-control" id="shippingaddress" name="shippingaddress" readonly>
            <label for="detailAddress" class="form-label">상세주소</label>
            <input type="text" class="form-control" id="detailAddress" required>
            <label for="shippingrequest">배송 요청 사항</label>
            <select id="shippingrequest" class="form-select">
                <option value="배송 요청 사항 선택해주세요">배송 요청 사항 선택해주세요</option>
                <!-- Add your options here -->
            </select>
            <textarea rows="5" maxlength="50" placeholder="최대 50까지 입력 가능합니다."></textarea>
        </section>
        <!-- delivery-section end -->

        <!-- 할인혜택 -->
        <section class="discount-section">
            <h2>할인혜택</h2>
            <!-- 쿠폰 선택 -->
            <label for="couponid">쿠폰 선택</label>
            <select id="couponid" name="couponid" class="form-select" onchange="updateTotalAmount()">
                <option value="">쿠폰 선택</option>
                <c:forEach items="${couponList}" var="coupon">
                    <option value="${coupon.couponid}" data-discount="${coupon.discountrate}">
                        ${coupon.couponname} ${coupon.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
                    </option>
                </c:forEach>
            </select>
            <br>
            <!-- 포인트 정보 -->
            <c:forEach var="pointHistory" items="${pointHistoryList}">
                <label for="point">보유 포인트 : ${pointHistory.pointamount}포인트</label>
                사용 포인트 <input type="number" id="usedpoints" name="usedpoints" min="0" max="${pointHistory.pointamount}" value="0" class="form-control" oninput="updateTotalAmount()">
            </c:forEach>
        </section>
        <!-- discount-section end -->

        <div class="total-amount">
            <br>
            배송비 : <span id="shipping-fee">3500원</span> (100,000원 이상 구매 시 무료) <br>
            <p id="final-total-price">최종 결제 금액: 0원</p>
        </div>

        <!-- 결제수단 -->
        <section class="payment-section">
            <h2>결제수단</h2>
            <label for="paymentmethod">결제 수단</label>
            <select id="paymentmethod" name="paymentmethod" class="form-select">
                <option value="신용카드">신용카드</option>
                <option value="계좌이체">계좌이체</option>
                <option value="휴대폰소액결제">휴대폰소액결제</option>
            </select>
        </section>
        <!-- payment-section end -->

        <!-- 결제하기 버튼 -->
        <section class="payment-button-section">
            <button type="button" class="btn btn-primary" onclick="requestPay()">결제하기</button>
        </section>
        <!-- payment-button-section end -->
    </form>
</div>

<script>
    // JavaScript functions and logic here

    // Function to handle the payment request
    function requestPay() {
        var form = document.getElementById('Orderfrm');
        IMP.request_pay({
            pg: 'html5_inicis', // Payment Gateway: HTML5 Inicis
            pay_method: document.getElementById('paymentmethod').value, // Pay method
            merchant_uid: 'merchant_' + new Date().getTime(), // Merchant unique key
            name: '주문명:결제테스트', // Product name
            amount: 0, // Payment amount
            buyer_name: document.getElementById('recipientname').value, // Buyer name
            buyer_tel: document.getElementById('recipientphone').value, // Buyer phone number
            buyer_email: document.getElementById('recipientemail').value, // Buyer email
            buyer_addr: document.getElementById('shippingaddress').value + ' ' + document.getElementById('detailAddress').value, // Buyer address
            buyer_postcode: document.getElementById('postcode').value // Buyer postcode
        }, function (rsp) {
            if (rsp.success) {
                var msg = '결제가 완료되었습니다.';
                msg += '결제 금액 : ' + rsp.paid_amount;
                form.submit();
            } else {
                var msg = '결제에 실패하였습니다.';
                msg += '에러 내용 : ' + rsp.error_msg;
                alert(msg);
            }
        });
    }

    // Function to update the total amount based on discounts and points
    function updateTotalAmount() {
        // Implement your logic to update the total amount based on discounts and points
    }

    // Function to handle postcode search
    document.getElementById('find-postcode').addEventListener('click', function () {
        daum.postcode.load(function () {
            new daum.Postcode({
                oncomplete: function (data) {
                    document.getElementById('postcode').value = data.zonecode;
                    document.getElementById('shippingaddress').value = data.address;
                }
            }).open();
        });
    });
</script>
</body>
</html>










// 총 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString(); // 배송비에 천 단위 구분자 적용

    // 최종 결제 금액 업데이트
    var formattedFinalTotalPrice = finalTotalPrice.toLocaleString() + '원'; // 천 단위 구분자와 원 추가
    document.getElementById('finaltotalprice').innerText = '최종 결제 금액: ' + formattedFinalTotalPrice;
}





<script>
document.addEventListener('DOMContentLoaded', function() {
    // 페이지가 로드될 때 한 번 실행될 함수
    generateOrderId(); // 주문서 페이지가 로드될 때 orderid 생성
    updateTotalAmount(); // 초기 총 결제 금액 업데이트

    // 쿠폰 선택 이벤트
    document.getElementById('couponid').addEventListener('change', updateTotalAmount);

    // 포인트 입력 이벤트
    document.getElementById('usedpoints').addEventListener('input', updateTotalAmount);

    // 결제 버튼 클릭 이벤트
    document.getElementById('pay-button').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 제출 동작 방지
        // processPayment();
    });

    // 우편번호 찾기 이벤트
    document.getElementById('find-postcode').addEventListener('click', findPostcode);
});

// 최종 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString(); // 배송비에 천 단위 구분자 적용

    // 최종 결제 금액 업데이트
    var formattedFinalTotalPrice = finalTotalPrice.toLocaleString() + '원'; // 천 단위 구분자와 원 추가
    document.getElementById('finaltotalprice').innerText = '최종 결제 금액: ' + formattedFinalTotalPrice;
}
</script>




















document.addEventListener('DOMContentLoaded', function() {
    generateOrderId(); // 주문서 페이지가 로드될 때 orderid 생성

    // 쿠폰 선택 이벤트
    document.getElementById('couponid').addEventListener('change', updateTotalAmount);

    // 포인트 입력 이벤트
    document.getElementById('usedpoints').addEventListener('input', updateTotalAmount);

    // 결제 버튼 클릭 이벤트
    document.getElementById('pay-button').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 제출 동작 방지
        processPayment();
    });

    // 우편번호 찾기 이벤트
    document.getElementById('find-postcode').addEventListener('click', findPostcode);
});

// 주문서 페이지 로드 시 실행되는 함수
function generateOrderId() {
    var prefix = 'order'; // order라는 prefix를 사용
    var num;
    var existingIds = []; // 기존 orderid 리스트 (실제 사용 데이터를 가져와야 함)

    // 기존 orderid들을 배열에 추가 (실제로는 서버에서 기존 데이터를 가져와야 함)
    // 이 예제에서는 sessionScope.userID로 이미 로그인한 사용자의 주문 목록을 가져온다고 가정
    <c:forEach items="${orderList}" var="order">
        existingIds.push('${order.orderid}');
    </c:forEach>

    // 중복되지 않는 orderid 생성
    do {
        num = generateRandomNumber(); // 랜덤 숫자 생성 함수 호출
        var newId = prefix + num.toString().padStart(3, '0'); // 3자리 숫자로 포맷
    } while (existingIds.includes(newId)); // 생성된 아이디가 기존 아이디들과 중복되는지 확인

    // 생성된 orderid를 hidden input 필드에 설정
    document.getElementById('orderid').value = newId;
}

// 랜덤 숫자 생성 함수
function generateRandomNumber() {
    return Math.floor(Math.random() * 999) + 1; // 1부터 999 사이의 랜덤 숫자 생성
}

// 최종 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    // 최종 결제 금액 보다 사용 포인트가 더 클 경우, 최종 결제 금액으로 설정
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }

    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString(); // 배송비에 천 단위 구분자 적용

    // 최종 결제 금액 업데이트
    var formattedFinalTotalPrice = finalTotalPrice.toLocaleString() + '원'; // 천 단위 구분자와 원 추가
    document.getElementById('finaltotalprice').innerText = '최종 결제 금액: ' + formattedFinalTotalPrice;
}

// 주소 찾기 API 호출 함수
function findPostcode() {
    new daum.Postcode({
        oncomplete: function(data) {
            var addr = ''; // 주소 변수
            var extraAddr = ''; // 참고항목 변수

            // 도로명 주소를 선택했을 경우
            if (data.userSelectedType === 'R') {
                addr = data.roadAddress;
            } else { // 지번 주소를 선택했을 경우
                addr = data.jibunAddress;
            }

            // 참고항목 설정
            if (data.userSelectedType === 'R') {
                if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {
                    extraAddr += data.bname;
                }
                if (data.buildingName !== '' && data.apartment === 'Y') {
                    extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                }
                if (extraAddr !== '') {
                    extraAddr = ' (' + extraAddr + ')';
                }
                $('#extraAddress').val(extraAddr);
            } else {
                $('#extraAddress').val('');
            }

            $('#postcode').val(data.zonecode); // 우편번호 설정
            $('#shippingaddress').val(addr); // 주소 설정
            $('#detailAddress').focus(); // 상세주소 입력 필드로 포커스 이동
        }
    }).open();
}

// 결제 처리 함수
function processPayment() {
    // 최종 결제 금액 업데이트
    updateTotalAmount();

    var finalTotalPrice = parseFloat(document.getElementById('finaltotalprice').innerText.replace(/[^0-9.-]+/g, ""));

    /*var couponId = $('#coupon-select').val(); // 쿠폰 ID 가져오기 */

    IMP.request_pay({
        pg: 'html5_inicis',
        pay_method: 'card',
        merchant_uid: 'merchant_' + new Date().getTime(),
        name: '상품 주문 결제',
        amount: finalTotalPrice,
        buyer_email: $('#recipientemail').val(),
        buyer_name: $('#recipientname').val(),
        buyer_tel: $('#recipientphone').val(),
        m_redirect_url: 'http://yourdomain.com/complete'
    }, function(rsp) {
        if (rsp.success) {
            var formData = {
                imp_uid: rsp.imp_uid,
                merchant_uid: rsp.merchant_uid,
                paid_amount: rsp.paid_amount,
                orderid: '${order.orderid}',
                finalpaymentamount: ${'finalpaymentamount'}.val(),
                recipientname: $('#recipientname').val(),
                recipientemail: $('#recipientemail').val(),
                recipientphone: $('#recipientphone').val(),
                shippingaddress: $('#shippingaddress').val() + ' ' + $('#detailAddress').val(),
                shippingrequest: $('#shippingrequest').val(),
                couponid: $('#couponid').val(),
                usedpoints: $('#usedpoints').val()
            };

            $.ajax({
                type: 'POST',
                url: '/order/payment',
                data: formData,
                dataType: 'json',
                success: function(response) {
                    alert('결제가 완료되었습니다.');
                    window.location.href = '/order/complete';
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    alert('결제 실패: ' + jqXHR.responseText);
                }
            });
        } else {
            alert('결제 오류: ' + rsp.error_msg);
        }
    });
}









// 최종 결제 금액 업데이트 함수
function updateTotalAmount() {
    var totalPrice = parseFloat(${totalPrice}); // 상품 총 금액
    var finalTotalPrice = totalPrice;

    // 쿠폰 할인 적용
    var couponSelect = document.getElementById('couponid');
    var couponDiscount = 0;
    if (couponSelect.value) {
        couponDiscount = parseFloat(couponSelect.options[couponSelect.selectedIndex].getAttribute('data-discount')) || 0;
    }
    finalTotalPrice *= (1 - couponDiscount / 100);

    // 사용 포인트 적용
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0;
    if (usedPoints > finalTotalPrice) {
        document.getElementById('usedpoints').value = finalTotalPrice;
        usedPoints = finalTotalPrice;
    }
    finalTotalPrice -= usedPoints;

    // 배송비 적용
    var shippingFee = (finalTotalPrice >= 100000) ? 0 : 3500;
    finalTotalPrice += shippingFee;

    // 배송비 업데이트
    document.getElementById('shipping-fee').innerText = shippingFee.toLocaleString(); // 배송비에 천 단위 구분자 적용

    // 최종 결제 금액 업데이트
    var formattedFinalTotalPrice = finalTotalPrice.toLocaleString() + '원'; // 천 단위 구분자와 원 추가
    document.getElementById('finaltotalprice').innerText = '최종 결제 금액: ' + formattedFinalTotalPrice;
}























package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.admin.CouponMasterDTO;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.point.PointHistoryDTO;
import kr.co.matchday.tickets.TicketsDTO;
import kr.co.matchday.tickets.TicketsDetailDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CouponDAO couponDao;

    @Autowired
    private Environment env; // 환경변수를 관리하는 객체

    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }//end

    @GetMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        // 로그인된 사용자 정보 가져오기
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }
        orderDto.setUserid(userid);
        
        // 주문 정보 삽입
        orderDao.insert(orderDto);

        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }

    @PostMapping("/payment")
    @ResponseBody
    public Map<String, Object> payment(@RequestBody Map<String, Object> paymentData, HttpSession session) {
        Map<String, Object> response = new HashMap<>();
        String imp_uid = (String) paymentData.get("imp_uid");
        String merchant_uid = (String) paymentData.get("merchant_uid");
        int paid_amount = (Integer) paymentData.get("paid_amount");
        String orderid = (String) paymentData.get("orderid");
        int finalpaymentamount = (Integer) paymentData.get("finalpaymentamount");
        String recipientname = (String) paymentData.get("recipientname");
        String recipientemail = (String) paymentData.get("recipientemail");
        String recipientphone = (String) paymentData.get("recipientphone");
        String shippingaddress = (String) paymentData.get("shippingaddress");
        String shippingrequest = (String) paymentData.get("shippingrequest");
        String couponId = (String) paymentData.get("couponid");
        int usedpoints = (Integer) paymentData.get("usedpoints");

        // 토큰 획득
        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        // 아임포트 API를 통해 결제 정보 조회
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
                "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                // 결제 정보를 JSON으로 파싱
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    System.out.println("결제 금액이 일치합니다.");

                    // 세션에서 사용자 ID 가져오기
                    String userid = (String) session.getAttribute("userID");
                    if (userid == null) {
                        response.put("success", false);
                        response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                        return response;
                    }

                    // 결제가 완료된 후 쿠폰 사용 업데이트
                    if (couponId != null && !couponId.equals("0")) {
                        int updateResult = orderDao.updateCouponUsage(couponId);
                        if (updateResult > 0) {
                            System.out.println("쿠폰 사용 업데이트 성공: " + couponId);
                        } else {
                            System.out.println("쿠폰 사용 업데이트 실패: " + couponId);
                        }
                    }

                    response.put("success", true);
                    response.put("orderid", orderid);
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 검증 중 오류 발생.");
                e.printStackTrace();
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 정보를 가져오지 못했습니다.");
        }

        return response;
    }

    // 토큰을 가져오는 메서드
    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            } else {
                System.out.println("Failed to get token, response: " + response.getBody());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    // 기타 메서드 (insert, list, addPointHistory) 생략
}















package kr.co.matchday.order;

import java.sql.Timestamp;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.coupon.CouponDAO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.point.PointHistoryDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CouponDAO couponDao;

    @Autowired
    private Environment env; // 환경변수를 관리하는 객체

    @PostMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }
        orderDto.setUserid(userid);

        orderDao.insert(orderDto);

        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }

    @PostMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedPoints,
                          Model model, HttpSession session) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }
        Map<String, Object> userInfo = orderDao.getUserInfo(userid);
        model.addAttribute("userInfo", userInfo);

        GoodsDTO goods = goodsDao.detail(goodsid);
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            discountRate = orderDao.getDiscountRateByCouponId(couponid);
            orderDao.updateCouponUsage(couponid);
        }
        model.addAttribute("discountRate", discountRate);

        List<PointHistoryDTO> pointHistoryList = orderDao.getPointByUserId(userid);
        model.addAttribute("pointHistoryList", pointHistoryList);

        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);

        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        return "order/list";
    }

    @PostMapping("/addPointHistory")
    public String addPointHistory(@RequestParam("userid") String userid,
                                  @RequestParam("pointcategoryid") String pointcategoryid,
                                  @RequestParam("pointtype") String pointtype,
                                  @RequestParam("pointamount") int pointamount,
                                  HttpSession session) {
        PointHistoryDTO pointHistoryDto = new PointHistoryDTO();
        pointHistoryDto.setUserid(userid);
        pointHistoryDto.setPointcategoryid(pointcategoryid);
        pointHistoryDto.setPointtype(pointtype);
        pointHistoryDto.setPointamount(pointamount);
        pointHistoryDto.setPointsource("Order Payment");
        pointHistoryDto.setPointcreationdate(new Timestamp(System.currentTimeMillis()));

        orderDao.insertPointHistory(pointHistoryDto);

        return "redirect:/order/payment";
    }
}






<form id="Orderfrm" name="Orderfrm" method="post" action="/order/payment">
    <input type="hidden" name="goodsid" value="goods606">
    <input type="hidden" name="size" value="S">
    <input type="hidden" name="price" value="100">
    <input type="hidden" name="quantity" value="2">
    <input type="hidden" name="totalPrice" value="200">
    <button type="submit">결제</button>
</form>






@PostMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @ModelAttribute OrderDTO orderDto,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price, 
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam Map<String, String> requestParams,
                      @RequestParam(value = "couponid", required = false) String couponid,
                      @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedPoints,
                      Model model,
                      HttpSession session) {

    // 사용자 정보 조회
    String userid = (String) session.getAttribute("userID");
    Map<String, Object> userInfo = orderDao.getUserInfo(userid);
    model.addAttribute("userInfo", userInfo);
    
    // 상품 정보 조회
    GoodsDTO goods = goodsDao.detail(goodsid);
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);        

    // 사용 가능한 쿠폰 목록 조회
    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    // 선택된 쿠폰의 할인율 적용
    int discountRate = 0;
    if (couponid != null && !couponid.isEmpty()) {
        discountRate = orderDao.getDiscountRateByCouponId(couponid); // 쿠폰의 할인율 가져오기
        // 쿠폰 사용 상태 업데이트
        orderDao.updateCouponUsage(couponid);
    }
    model.addAttribute("discountRate", discountRate); 

    // 사용자의 포인트 이력 조회
    List<PointHistoryDTO> pointHistoryList = orderDao.getPointByUserId(userid);
    model.addAttribute("pointHistoryList", pointHistoryList);

    return "order/payment"; // 결제 화면으로 이동
}






@Controller
public class OrderController {

    @GetMapping("/order/payment")
    public String getOrderPayment(@RequestParam("goodsid") String goodsId,
                                  @RequestParam("size") String size,
                                  @RequestParam("price") int price,
                                  @RequestParam("quantity") int quantity,
                                  @RequestParam("totalPrice") int totalPrice,
                                  Model model) {
        // 로직 처리
        model.addAttribute("goodsId", goodsId);
        model.addAttribute("size", size);
        model.addAttribute("price", price);
        model.addAttribute("quantity", quantity);
        model.addAttribute("totalPrice", totalPrice);
        return "orderPayment";
    }

    // 다른 핸들러 메서드들
}

\




function buyopenPopup(url) {
    var selectSize = document.getElementById('size');
    var quantity = parseInt(document.getElementById('quantity-input').value);
    var price = ${goodsDto.price};
    var totalPrice = quantity * price;

    // 선택한 사이즈 재고 체크
    var sizeStock = parseInt(selectSize.options[selectSize.selectedIndex].getAttribute("stock"));
    
    // 선택한 사이즈 체크
    var selectedSize = selectSize.options[selectSize.selectedIndex].value;

    if (selectedSize == "NO") {
        alert("사이즈를 선택하세요");
        return;
    } else {
        // 입력한 구매 수량
        var buyStock = parseInt(document.getElementById('quantity-input').value);

        if (sizeStock === 0) {
            alert("품절된 상품입니다.");
            return;
        } else if (buyStock > sizeStock) {
            alert("구매 수량이 재고 수량을 초과했습니다.");
            return;
        }
    }

    if (isLoggedIn()) {
        var form = document.createElement("form");
        form.method = "POST";
        form.action = url;
        form.target = "popupWindow";

        var inputSize = document.createElement("input");
        inputSize.type = "hidden";
        inputSize.name = "size";
        inputSize.value = selectedSize;
        form.appendChild(inputSize);

        var inputPrice = document.createElement("input");
        inputPrice.type = "hidden";
        inputPrice.name = "price";
        inputPrice.value = price;
        form.appendChild(inputPrice);

        var inputQuantity = document.createElement("input");
        inputQuantity.type = "hidden";
        inputQuantity.name = "quantity";
        inputQuantity.value = quantity;
        form.appendChild(inputQuantity);

        var inputTotalPrice = document.createElement("input");
        inputTotalPrice.type = "hidden";
        inputTotalPrice.name = "totalPrice";
        inputTotalPrice.value = totalPrice;
        form.appendChild(inputTotalPrice);

        document.body.appendChild(form);
        var width = 1200;
        var height = 800;
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;
        var features = "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes";
        window.open("", "popupWindow", features);
        form.submit();
    } else {
        // 로그인이 되어있지 않으면 팝업을 열지 않음
        alert("로그인이 필요합니다.");
        return; // 팝업을 열지 않고 함수 종료
    }
}


























...
<script>
document.addEventListener('DOMContentLoaded', function() {
    // 결제 버튼 클릭 이벤트
    document.getElementById('pay-button').addEventListener('click', function(event) {
        event.preventDefault(); // 기본 제출 동작 방지

        // 총 결제 금액 업데이트
        updateTotalAmount();

        var finalTotalPrice = parseFloat(document.getElementById('finaltotalprice').innerText.replace(/[^0-9.-]+/g,""));

        // IMP.request_pay() 함수를 통한 결제 요청
        IMP.request_pay({
            pg: 'html5_inicis',
            pay_method: 'card',
            merchant_uid: 'merchant_' + new Date().getTime(),
            name: '상품 주문 결제',
            amount: finalTotalPrice, 
            buyer_email: $('#recipientemail').val(),
            buyer_name: $('#recipientname').val(),
            buyer_tel: $('#recipientphone').val(),
            m_redirect_url: 'http://yourdomain.com/complete' // 성공 시 이동할 URL 설정
        }, function(rsp) {
            if (rsp.success) {
                // 결제 성공 시 처리
                var formData = {
                    imp_uid: rsp.imp_uid,
                    merchant_uid: rsp.merchant_uid,
                    paid_amount: rsp.paid_amount,
                    orderid: document.getElementById('orderid').value, // 주문 번호
                    finalpaymentamount: finalTotalPrice, // 최종 결제 금액
                    recipientname: $('#recipientname').val(),
                    recipientemail: $('#recipientemail').val(),
                    recipientphone: $('#recipientphone').val(),
                    shippingaddress: $('#shippingaddress').val() + ' ' + $('#detailAddress').val(),
                    shippingrequest: $('#shippingrequest').val(),
                    couponid: $('#couponid').val(),
                    usedpoints: $('#usedpoints').val()
                };

                // AJAX를 사용한 서버로의 결제 데이터 전송
                $.ajax({
                    type: 'POST',
                    url: '/order/payment',
                    data: formData,
                    traditional: true,
                    success: function(data) {
                        if (data.success) {
                            // 결제 완료 후 화면 이동
                            window.location.href = '/order/confirmation?orderid=' + data.orderid;
                        } else {
                            alert('결제 검증에 실패했습니다.');
                        }
                    },
                    error: function(xhr, status, error) {
                        alert('결제 과정 중 오류가 발생했습니다.');
                    }
                });
            } else {
                // 결제 실패 시 처리
                alert('결제에 실패하였습니다. 오류 내용 :' + rsp.error_msg);
            }
        });
    });
});
</script>
...



@PostMapping("/payment")
public String payment(
        @RequestParam("goodsid") String goodsid,
        @RequestParam("size") String size,
        @RequestParam("quantity") String quantity,
        @RequestParam("price") String price,
        @RequestParam("totalPrice") String totalPrice,
        @RequestParam Map<String, String> requestParams,
        @RequestParam(value = "couponid", required = false) String couponid,
        @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedPoints,
        Model model,
        HttpSession session) {

    // 메서드 내용
}


<select id="getLastAttendance" resultType="kr.co.matchday.point.AttendanceDTO">
    SELECT * FROM attendance 
    WHERE user_id = #{userid}
    ORDER BY attendance_date DESC
    LIMIT 1
</select>



<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="point">
	
	<!-- 회원가입 후 첫 로그인 포인트 지급 -->
	<select id="isFirstLogin" resultType="int">
        SELECT COUNT(*) FROM pointhistory
        WHERE userid = #{userid} AND pointsource = '회원가입 축하 포인트'
    </select>

	<insert id="addPointHistory">
        INSERT INTO pointhistory (userid, pointtype, pointsource, pointamount, pointcreationdate)
        VALUES (#{userid}, #{pointtype}, #{pointsource}, #{pointamount}, NOW())
    </insert>
	
	
	<select id="getLastAttendance" resultType="kr.co.matchday.point.AttendanceDTO">
        SELECT userid, last_attendance
        FROM attendance
        WHERE userid = #{userid}
        ORDER BY last_attendance DESC
        LIMIT 1
    </select>

    <update id="updateLastAttendance">
        INSERT INTO attendance (userid, last_attendance)
        VALUES (#{userid}, #{last_attendance})
        ON DUPLICATE KEY UPDATE last_attendance = #{last_attendance}
    </update>
</mapper>






package kr.co.matchday.point;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class AttendanceDAO {

    @Autowired
    SqlSession sqlSession;
    
    public AttendanceDTO getLastAttendance(String userid) {
        return sqlSession.selectOne("point.getLastAttendance", userid);
    }

    public void updateLastAttendance(AttendanceDTO attendance) {
        sqlSession.update("point.updateLastAttendance", attendance);
    }
}
















@Controller
@RequestMapping("/order")
public class OrderCont {

    // Autowire necessary dependencies
    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CouponDAO couponDao;

    @Autowired
    private MypageDAO mypageDao; // Inject MypageDAO

    @Autowired
    private Environment env; // Environment object for managing environment variables

    // Constructor
    public OrderCont() {
        System.out.println("-----OrderCont() 객체 생성됨");
    }

    @PostMapping("/insert")
    public String insert(@ModelAttribute OrderDTO orderDto, HttpSession session) {
        // Get logged-in user information
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // Redirect to login page if user is not logged in
        }
        orderDto.setUserid(userid);

        // Insert order information into the database
        orderDao.insert(orderDto);

        // Redirect to payment page with goods id
        return "redirect:/order/payment?goodsid=" + orderDto.getOrderid();
    }

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          Model model,
                          HttpSession session) {

        // Get logged-in user information
        String userid = (String) session.getAttribute("userID");
        Map<String, Object> userInfo = orderDao.getUserInfo(userid);
        model.addAttribute("userInfo", userInfo);

        // Get goods details
        GoodsDTO goods = goodsDao.detail(goodsid);
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        // Get user's available coupons
        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        // Apply coupon discount if coupon id is provided
        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            discountRate = orderDao.getDiscountRateByCouponId(couponid);
            // Update coupon usage status
            orderDao.updateCouponUsage(couponid);
        }
        model.addAttribute("discountRate", discountRate);

        // Get total points of the user
        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto != null) {
            int totalpoints = mypageDto.getTotalpoints();
            model.addAttribute("totalpoints", totalpoints);
        }










@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private MypageDAO mypageDao;

    // 주문 결제 페이지로 이동
    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @ModelAttribute OrderDTO orderDto,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") String quantity,
                          @RequestParam("price") String price,
                          @RequestParam("totalPrice") String totalPrice,
                          Model model,
                          HttpSession session) {

        // 사용자 정보 조회
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // 로그인 페이지로 리디렉션
        }

        // 사용자의 총 포인트 조회
        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto != null) {
            int totalpoints = mypageDto.getTotalpoints();
            model.addAttribute("totalpoints", totalpoints);
        } else {
            model.addAttribute("totalpoints", 0); // 기본값 설정
        }

        // 기타 필요한 모델 속성 추가
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);

        return "order/payment";
    }
}


<mapper namespace="mypage">

    <!-- 사용자의 총 포인트 계산 -->
    <select id="getTotalPoints" resultType="int" parameterType="String">
        SELECT
            COALESCE(SUM(CASE WHEN pointtype = '적립' THEN pointamount ELSE 0 END), 0) -
            COALESCE(SUM(CASE WHEN pointtype = '사용' THEN pointamount ELSE 0 END), 0) AS totalpoints
        FROM
            pointhistory
        WHERE
            userid = #{userid}
    </select>

    <!-- 다른 쿼리들은 이미 정의되어 있는 상태이므로 추가하지 않습니다. -->

</mapper>





// 포인트 사용 버튼 클릭 시 호출되는 함수
function usePoints() {
    var usedPoints = parseFloat(document.getElementById('usedpoints').value) || 0; // 입력된 포인트
    var maxPoints = parseFloat(document.getElementById('usedpoints').getAttribute('max')); // 최대 사용 가능 포인트

    var finalTotalPrice = parseFloat(document.getElementById('finaltotalprice').innerText.replace(/[^0-9.-]+/g,"")); // 최종 결제 금액

    if (usedPoints < 0 || isNaN(usedPoints)) {
        alert('잘못된 포인트 입력입니다.');
        document.getElementById('usedpoints').value = 0;
        return;
    }

    if (usedPoints > maxPoints) {
        alert('최대 사용 가능 포인트를 초과하였습니다.');
        document.getElementById('usedpoints').value = maxPoints; // 최대 사용 가능 포인트로 설정
        usedPoints = maxPoints;
    }

    if (usedPoints > finalTotalPrice) {
        alert('최종 결제 금액을 초과하여 포인트를 사용할 수 없습니다.');
        document.getElementById('usedpoints').value = finalTotalPrice; // 최종 결제 금액으로 설정
        usedPoints = finalTotalPrice;
    }

    updateTotalAmount(); // 총 결제 금액 업데이트
}







@Repository
public class MypageDAO {

    @Autowired
    SqlSession sqlSession;

    // 사용자의 총 포인트 조회
    public int getTotalPoints(String userid) {
        return sqlSession.selectOne("mypage.getTotalPoints", userid);
    }

    // 다른 메서드들은 이미 정의되어 있는 상태이므로 추가하지 않습니다.
}















<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>구매하기</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
    <script type="text/javascript">
        IMP.init('imp05021463'); // 아임포트 관리자 콘솔에서 발급받은 가맹점 식별코드
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1, h2 {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .order_tit {
            border-bottom: 0.5px solid #000;
            margin-bottom: 30px;
        }

        .order_tit h2 {
            font-size: 30px;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .order_tit ol {
            list-style: none;
            display: flex;
            justify-content: right;
        }

        .order_tit ol li {
            display: flex;
            align-items: center;
            margin-right: 30px;
            font-size: 20px;
            color: #666;
        }

        .order_tit ol li.page_on span {
            font-weight: bold;
            color: #333;
        }

        .order_tit ol li img {
            margin-left: 5px;
            vertical-align: middle;
        }

        .text-center {
            text-align: center;
        }

        .productname-text,
        .size-text,
        .quantity-text,
        .price-text,
        .totalprice-text {
            vertical-align: middle;
            font-size: 25px;
        }

        .order-section,
        .customer-section,
        .delivery-section,
        .discount-section {
            border-bottom: 1px solid #ddd;
            padding-top: 15px;
            margin-top: 15px;
        }

        .order-details {
            margin-bottom: 20px;
        }

        .quantity,
        .price,
        .discount,
        .total,
        .shipping {
            margin-bottom: 10px;
        }

        .total-amount {
            text-align: right;
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 20px;
        }

        form {
            margin-bottom: 20px;
        }

        form label {
            display: block;
            margin-bottom: 5px;
        }

        form input[type="text"],
        form input[type="email"],
        form input[type="tel"],
        form textarea,
        form input[type="radio"] {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        form input[type="radio"] {
            margin-right: 10px;
        }

        .form-label {
            font-weight: bold;
        }

        .form-control[readonly] {
            background-color: #e9ecef;
        }

        .checkout-button {
            text-align: center;
        }

        .checkout-button button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
    </style>
</head>
<body>
<div class="container">
    <form>
        <input type="hidden" name="userid" value="${sessionScope.userID}">
        <input type="hidden" name="orderid" id="orderid" value="">
        <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
        <input type="hidden" name="orderstatus" id="orderstatus" value="주문완료">
        <input type="hidden" name="paymentmethodcode" id="paymentmethodcode" value="pay01">
        <input type="hidden" name="receiptmethodcode" id="receiptmethodcode" value="receiving02">
        <input type="hidden" name="quantity" value="${quantity}">
        <input type="hidden" name="price" value="${price}">
    </form>

    <div class="order_tit">
        <h1>주문 및 결제</h1>
        <ol>
            <li class="page_on"><span>01</span>장바구니<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="장바구니진행 중"></span></li>
            <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="주문서작성/결제대기"></span></li>
            <li><span>03</span> 주문완료</li>
        </ol>
    </div>

    <!-- 주문상세내역 -->
    <section class="order-section">
        <h2>주문상세내역</h2>
        <form>
            <div class="order-details">
                <div class="row">
                    <div class="col-sm-12">
                        <table class="table table-hover">
                            <thead class="table-active">
                                <tr>
                                    <th class="text-center">상품 정보</th>
                                    <th class="text-center">사이즈</th>
                                    <th class="text-center">수량</th>
                                    <th class="text-center">가격</th>
                                    <th class="text-center">총 가격</th>
                                </tr>
                            </thead>
                            <tbody class="text-center">
                                <c:forEach items="${goodsList}" var="goods">
                                    <c:if test="${goods.goodsid eq param.goodsid}">
                                        <tr>
                                            <td>
                                                <div class="product-image">
                                                    <c:if test="${not empty goods.filename}">
                                                        <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                                                    </c:if>
                                                </div>
                                                <br>
                                                <span class="productname-text">${goods.productname}</span>
                                            </td>
                                            <td class="size-text">${size}</td>
                                            <td class="quantity-text">${quantity}</td>
                                            <td class="price-text"><fmt:formatNumber value="${price}" pattern="#,###원" /></td>
                                            <td class="totalprice-text"><fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></td>
                                        </tr>
                                    </c:if>
                                </c:forEach>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </form>
        <div class="total-amount">
            <p>총 결제 금액: <fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></p>
        </div>
    </section>
    <!-- 주문상세내역 end -->

    <!-- 주문자 정보 -->
    <section class="customer-section">
        <h2>주문자 정보</h2>
        <form id="order-form">
            <div class="mb-3">
                <label for="recipientname" class="form-label">주문자 이름</label>
                <input type="text" class="form-control" id="recipientname" name="recipientname" value="${memberDTO.name}" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">이메일</label>
                <input type="email" class="form-control" id="email" name="email" value="${memberDTO.email}" required>
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">휴대폰 번호</label>
                <input type="tel" class="form-control" id="phone" name="phone" value="${memberDTO.phone}" required>
            </div>
        </form>
    </section>
    <!-- 주문자 정보 end -->

    <!-- 배송지 정보 -->
    <section class="delivery-section">
        <h2>배송지 정보</h2>
        <form id="delivery-form">
            <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input" id="same-as-orderer">
                <label class="form-check-label" for="same-as-orderer">주문자 정보와 동일</label>
            </div>
            <div class="mb-3">
                <label for="receivername" class="form-label">수령인 이름</label>
                <input type="text" class="form-control" id="receivername" name="receivername" value="${memberDTO.name}" required>
            </div>
            <div class="mb-3">
                <label for="receiverphone" class="form-label">휴대폰 번호</label>
                <input type="tel" class="form-control" id="receiverphone" name="receiverphone" value="${memberDTO.phone}" required>
            </div>
            <div class="mb-3">
                <label for="postcode" class="form-label">우편번호</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="postcode" name="postcode" value="${memberDTO.zipcode}" required readonly>
                    <button type="button" class="btn btn-secondary" onclick="execDaumPostcode()">우편번호 찾기</button>
                </div>
            </div>
            <div class="mb-3">
                <label for="address" class="form-label">주소</label>
                <input type="text" class="form-control" id="address" name="address" value="${memberDTO.address}" required readonly>
            </div>
            <div class="mb-3">
                <label for="detailaddress" class="form-label">상세 주소</label>
                <input type="text" class="form-control" id="detailaddress" name="detailaddress" value="${memberDTO.address2}" required>
            </div>
        </form>
    </section>
    <!-- 배송지 정보 end -->

    <!-- 할인 정보 -->
    <section class="discount-section">
        <h2>할인 정보</h2>
        <form id="discount-form">
            <div class="mb-3">
                <label for="coupon" class="form-label">쿠폰 코드</label>
                <input type="text" class="form-control" id="coupon" name="coupon">
            </div>
            <div class="mb-3">
                <label for="points" class="form-label">포인트 사용</label>
                <input type="number" class="form-control" id="points" name="points" value="0" min="0">
            </div>
        </form>
    </section>
    <!-- 할인 정보 end -->

    <!-- 결제 정보 -->
    <section class="checkout-button">
        <button type="button" id="checkoutButton">결제하기</button>
    </section>
    <!-- 결제 정보 end -->
</div>




<script>
    function execDaumPostcode() {
        new daum.Postcode({
            oncomplete: function (data) {
                document.getElementById('postcode').value = data.zonecode;
                document.getElementById('address').value = data.address;
                document.getElementById('detailaddress').focus();
            }
        }).open();
    }

    $('#same-as-orderer').change(function () {
        if ($(this).is(':checked')) {
            $('#receivername').val($('#recipientname').val());
            $('#receiverphone').val($('#phone').val());
        } else {
            $('#receivername').val('');
            $('#receiverphone').val('');
        }
    });

    function validateForm() {
        var valid = true;
        $('#order-form input').each(function() {
            if ($(this).prop('required') && $(this).val() === '') {
                valid = false;
                alert($(this).attr('name') + ' 필드를 채워주세요.');
                return false;
            }
        });

        if (!valid) return false;

        $('#delivery-form input').each(function() {
            if ($(this).prop('required') && $(this).val() === '') {
                valid = false;
                alert($(this).attr('name') + ' 필드를 채워주세요.');
                return false;
            }
        });

        return valid;
    }

    $('#checkoutButton').click(function () {
        if (!validateForm()) {
            return;
        }

        var amount = ${totalPrice}; // 서버에서 전달된 총 결제 금액을 사용
        var points = parseInt($('#points').val(), 10);
        if (points > 0) {
            amount -= points; // 포인트 차감
        }

        var couponCode = $('#coupon').val();
        if (couponCode) {
            // 쿠폰 코드에 따라 금액 차감 로직 추가
            // amount -= 쿠폰 할인 금액;
        }

        IMP.request_pay({
            pg: "html5_inicis.INIpayTest",
            pay_method: "card",
            merchant_uid: "merchant_" + new Date().getTime(),
            name: "주문명:결제테스트",
            amount: amount,
            buyer_email: $('#email').val(),
            buyer_name: $('#recipientname').val(),
            buyer_tel: $('#phone').val(),
            buyer_addr: $('#address').val() + ' ' + $('#detailaddress').val(),
            buyer_postcode: $('#postcode').val()
        }, function (rsp) {
            if (rsp.success) {
                $.post('/verifyIamportPayment', {
                    imp_uid: rsp.imp_uid
                }).done(function (data) {
                    if (data.status === 'success') {
                        alert('결제가 완료되었습니다.');
                        $('#orderid').val(rsp.merchant_uid);
                        $('#orderstatus').val('주문완료');
                        // 여기에 서버로 주문 데이터를 전송하는 로직 추가
                    } else {
                        alert('결제 검증에 실패하였습니다. 관리자에게 문의하세요.');
                    }
                });
            } else {
                alert('결제에 실패하였습니다. 에러 내용: ' + rsp.error_msg);
            }
        });
    });
</script>
</body>
</html>





















$(document).ready(function() {

    // ...

    // Update total amount considering discounts and delivery fee
    function updateTotalAmount() {
        var subtotalAmount = parseInt('${totalPrice}', 10);
        var deliveryFee = parseInt($('#delivery-fee').text().replace(/[^0-9]/g, ''), 10);
        var discount = parseInt($('#discount').text().replace(/[^0-9]/g, ''), 10);
        var points = parseInt($('#usedpoints').val() || '0', 10);

        var totalAmount = subtotalAmount + deliveryFee - discount - points;
        $('#total-amount').text(totalAmount.toLocaleString() + '원');
        return totalAmount;
    }

    function updateDeliveryFee() {
        var deliveryFee = 0; // 기본 배송비는 0원
        var subtotalAmount = parseInt('${totalPrice}', 10);
        
        // 총 결제 금액이 100,000원 미만일 때만 배송비 추가
        if (subtotalAmount < 100000) {
            deliveryFee = 3500;
        }

        $('#delivery-fee').text(deliveryFee.toLocaleString() + '원');
        updateTotalAmount();
    }

    function updateDiscount() {
        var selectedCoupon = $('#couponid').find(':selected');
        var discountRate = selectedCoupon.data('discount') || 0;
        var subtotalAmount = parseInt('${totalPrice}', 10);
        var discountAmount = Math.floor(subtotalAmount * (discountRate / 100));

        $('#discount').text(discountAmount.toLocaleString() + '원');
        updateTotalAmount();
    }

    $('#couponid').change(function() {
        updateDiscount();
    });

    $('#usedpoints').change(function() {
        updateTotalAmount();
    });

    updateDeliveryFee();
    updateTotalAmount();
    updateDiscount();

    //결제 처리 함수
    $('#pay-button').click(function() {
        var totalAmount = updateTotalAmount(); // 최종 결제 금액 업데이트
        var couponId = $('#couponid').val();
        var couponName = $('#couponid').find(':selected').text();
        var deliveryFee = $('#delivery-fee').text().replace(/[^0-9]/g, '');
        var totalDiscount = $('#discount').text().replace(/[^0-9]/g, '');
        var points = $('#usedpoints').val();

        IMP.request_pay({
            pg: 'html5_inicis',
            pay_method: 'card',
            merchant_uid: 'merchant_' + new Date().getTime(),
            name: '상품 주문 결제',
            amount: totalAmount,
            buyer_email: $('#recipientemail').val(),
            buyer_name: $('#recipientname').val(),
            buyer_tel: $('#recipientphone').val(),
            m_redirect_url: 'http://yourdomain.com/complete' // 성공 시 이동할 URL 설정
        }, function(rsp) {
            if (rsp.success) {
                var formData = {
                    imp_uid: rsp.imp_uid,
                    merchant_uid: rsp.merchant_uid,
                    paid_amount: rsp.paid_amount,
                    orderid: '${order.orderid}',
                    totalPrice: totalPrice,
                    collectionmethodcode: $('input[name="deliveryOption"]:checked').val(),
                    recipientname: $('#recipientname').val(),
                    recipientemail: $('#recipientemail').val(),
                    recipientphone: $('#recipientphone').val(),
                    shippingaddress: $('#shippingaddress').val() + ' ' + $('#detailAddress').val(),
                    shippingrequest: $('#shippingrequest').val(),
                    couponid: couponId,
                    couponName: couponName,
                    deliveryFee: deliveryFee,
                    totalDiscount: totalDiscount,
                    usedpoints: points,
                    totalPaymentAmount: totalAmount
                };

                $.ajax({
                    type: 'POST',
                    url: '/order/payment',
                    data: formData,
                    traditional: true,
                    success: function(data) {
                        if (data.success) {
                            window.opener.location.href = data.redirectUrl;
                            window.close();
                        } else {
                            alert('결제 검증에 실패했습니다.');
                        }
                    }
                });
            } else {
                alert('결제에 실패하였습니다. 오류 내용 :' + rsp.error_msg);
            }
        });
    });

    $('#cancel-button').click(function() {
        var impUid = prompt("취소할 결제의 imp_uid를 입력하세요:");
        if (impUid) {
            $.ajax({
                url: '/order/cancelPayment',
                type: 'DELETE',
                data: { imp_uid: impUid },
                success: function(response) {
                    if (response.success) {
                        alert("결제가 취소되었습니다.");
                    } else {
                        alert("결제 취소에 실패했습니다: " + response.message);
                    }
                },
                error: function(error) {
                    alert("결제 취소 요청 중 오류가 발생했습니다.");
                }
            });
        }
    });

});









import org.zkoss.bind.annotation.*;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zk.ui.select.annotation.WireVariable;
import org.zkoss.zul.Messagebox;

import java.util.HashMap;
import java.util.Map;

public class OrderController {

    @WireVariable
    private OrderService orderService; // OrderService는 실제 주문 처리 로직을 포함하는 서비스 클래스입니다.

    // ZK 컴포넌트와 바인딩될 필드
    @Wire("#recipientname")
    private Textbox recipientNameBox;
    @Wire("#shippingaddress")
    private Textbox shippingAddressBox;
    @Wire("#shippingrequest")
    private Textbox shippingRequestBox;
    @Wire("#deliveryOptionRadioGroup")
    private Radiogroup deliveryOptionRadioGroup;
    @Wire("#couponid")
    private Combobox couponIdCombobox;

    // 결제 버튼 클릭 이벤트 핸들러
    @Command
    @NotifyChange({"recipientName", "shippingAddress", "shippingRequest", "deliveryOptionCode", "couponId"})
    public void handlePayment() {
        // 최종 결제 금액 업데이트 (updateTotalAmount() 함수의 구현을 여기에 삽입)
        int totalAmount = updateTotalAmount();

        // 사용자 입력 데이터 수집
        String recipientName = recipientNameBox.getValue();
        String shippingAddress = shippingAddressBox.getValue() + " " + detailAddressBox.getValue();
        String shippingRequest = shippingRequestBox.getValue();
        String deliveryOptionCode = deliveryOptionRadioGroup.getSelectedItem().getValue();
        String couponId = couponIdCombobox.getSelectedItem().getValue();

        // 결제 처리 및 주문 데이터 전송
        Map<String, Object> formData = new HashMap<>();
        formData.put("totalAmount", totalAmount);
        formData.put("recipientName", recipientName);
        formData.put("shippingAddress", shippingAddress);
        formData.put("shippingRequest", shippingRequest);
        formData.put("deliveryOptionCode", deliveryOptionCode);
        formData.put("couponId", couponId);

        // 실제 결제 로직 및 데이터 처리
        try {
            // 주문 서비스를 사용하여 결제 처리 및 데이터 처리 (orderService는 주문 서비스의 인스턴스)
            boolean paymentSuccess = orderService.processPayment(formData);

            if (paymentSuccess) {
                // 결제 성공 시 처리 (예: 메시지 박스로 확인 메시지 출력)
                Messagebox.show("결제가 성공적으로 완료되었습니다.");
                Executions.sendRedirect("/order/confirmation.zul"); // 성공 시 이동할 페이지
            } else {
                // 결제 실패 시 처리
                Messagebox.show("결제 검증에 실패했습니다.");
            }
        } catch (Exception e) {
            // 예외 처리
            Messagebox.show("결제 처리 중 오류가 발생했습니다: " + e.getMessage());
        }
    }

    // 결제 금액 업데이트 메서드 (실제 구현은 애플리케이션에 맞게 수정)
    private int updateTotalAmount() {
        // 여기에 실제 구현 코드를 삽입하십시오.
        return 0; // 예시: 임시로 0을 반환하고 있습니다.
    }














@PostMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @ModelAttribute OrderDTO orderDto,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam Map<String, String> requestParams,
                      @RequestParam(value = "couponid", required = false) String couponid,
                      @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                      Model model,
                      HttpSession session) {
    // 사용자 정보 조회
    String userid = (String) session.getAttribute("userID");
    Map<String, Object> userInfo = orderDao.getUserInfo(userid);
    model.addAttribute("userInfo", userInfo);

    GoodsDTO goods = goodsDao.detail(goodsid);
    List<GoodsDTO> goodsList = goodsDao.list();
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    // 사용자에게 사용 가능한 쿠폰 조회
    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    // 쿠폰 코드가 제공된 경우 쿠폰 할인 적용
    int discountRate = 0;
    if (couponid != null && !couponid.isEmpty()) {
        discountRate = orderDao.getDiscountRateByCouponId(couponid); // 할인율 가져오기
        // 쿠폰 사용 상태 업데이트
        orderDao.updateCouponUsage(couponid);
    }
    model.addAttribute("discountRate", discountRate);

    // 사용자의 총 포인트 조회
    MypageDTO mypageDto = mypageDao.getUserById(userid);
    if (mypageDto != null) {
        int totalpoints = mypageDto.getTotalpoints();
        model.addAttribute("totalpoints", totalpoints);
    } else {
        model.addAttribute("totalpoints", 0); // 기본값 설정
    }

    List<MypageDTO> MypageList = orderDao.getTotalPointUserId(userid);
    model.addAttribute("MypageList", MypageList);

    // 토큰 획득
    String token = getToken();
    if (token == null) {
        model.addAttribute("paymentSuccess", false);
        model.addAttribute("message", "토큰을 가져오지 못했습니다.");
        return "order/paymentResult"; // 결제 결과 페이지로 이동
    }

    // 아임포트 API를 통해 결제 정보 조회
    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);

    HttpEntity<String> entity = new HttpEntity<>(headers);
    ResponseEntity<String> paymentResponse = restTemplate.exchange(
            "https://api.iamport.kr/payments/" + requestParams.get("imp_uid"), HttpMethod.GET, entity, String.class);

    if (paymentResponse.getStatusCode() == HttpStatus.OK) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
            Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
            int amount = (Integer) responseJson.get("amount");

            if (amount == Integer.parseInt(requestParams.get("paid_amount"))) {
                // 결제가 완료된 후의 처리 로직 추가

                // 예시로 주문 ID를 response에 추가
                model.addAttribute("orderid", orderDto.getOrderid());
                model.addAttribute("paymentSuccess", true);
            } else {
                model.addAttribute("paymentSuccess", false);
                model.addAttribute("message", "결제 금액이 일치하지 않습니다.");
            }
        } catch (Exception e) {
            model.addAttribute("paymentSuccess", false);
            model.addAttribute("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }
    } else {
        model.addAttribute("paymentSuccess", false);
        model.addAttribute("message", "결제 정보를 가져오지 못했습니다.");
    }

    return "order/paymentResult"; // 결제 결과 페이지로 이동
}



function updateTotalAmount() {
    var totalPrice = parseInt(${totalPrice}, 10); // 서버에서 전달된 총 결제 금액을 사용
    var points = parseInt($('#points').val(), 10) || 0;
    var discount = 0; // 쿠폰이나 기타 할인 금액은 여기서 계산
    var deliveryFee = parseInt($('#delivery-fee').text().replace(/[^0-9]/g, ''), 10) || 0;

    var finalAmount = totalPrice - points - discount + deliveryFee;
    $('#total-amount').text(finalAmount.toLocaleString() + '원');
}

function updateDeliveryFee() {
    var totalAmount = parseInt(${totalPrice}, 10); // 서버에서 전달된 총 결제 금액을 사용
    var deliveryFee = totalAmount >= 100000 ? 0 : 3500;

    $('#delivery-fee').text(deliveryFee.toLocaleString() + '원');
    $('#delivery-address').toggle(deliveryFee === 3500);
    
    updateTotalAmount();
}

// 이벤트 핸들러 등록
$(document).ready(function () {
    $('input[name="deliveryOption"]').change(updateDeliveryFee);
    $('#points').on('input', updateTotalAmount); // 포인트 입력 시 업데이트
    updateDeliveryFee(); // 페이지 로드 시 초기화
});




















@GetMapping("/payment")
public String payment(@RequestParam("goodsid") String goodsid,
                      @ModelAttribute OrderDTO orderDto,
                      @RequestParam("size") String size,
                      @RequestParam("quantity") String quantity,
                      @RequestParam("price") String price,
                      @RequestParam("totalPrice") String totalPrice,
                      @RequestParam(value = "couponid", required = false) String couponid,
                      @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                      Model model,
                      HttpSession session) {

    // 사용자 정보 조회
    String userid = (String) session.getAttribute("userID");
    MypageDTO mypageDto = mypageDao.getUserById(userid);
    if (mypageDto != null) {
        int totalpoints = mypageDto.getTotalpoints();
        model.addAttribute("totalpoints", totalpoints);
    }

    // 사용자의 총 포인트 조회
    int userTotalPoints = mypageDao.getTotalPoints(userid);
    model.addAttribute("userTotalPoints", userTotalPoints);

    // 여기에 포인트를 활용하여 할인 등의 로직을 추가할 수 있습니다.

    // 기타 필요한 모델 속성 추가
    model.addAttribute("goodsid", goodsid);
    model.addAttribute("size", size);
    model.addAttribute("quantity", quantity);
    model.addAttribute("price", price);
    model.addAttribute("totalPrice", totalPrice);

    return "order/payment";
}


        return "order/payment";
    }

    @GetMapping("/list")
    public String list(HttpSession session, Model model) {
        // Get logged-in user information
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login"; // Redirect to login page if user is not logged in
        }

        // Get user's order list
        List<OrderDTO> orderList = orderDao.list(userid);
        model.addAttribute("orderList", orderList);

        // Get goods list
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);

        // Get user's received coupons list
        List<CouponDTO> couponList = couponDao.selectReceivedCoupons(userid);
        model.addAttribute("couponList", couponList);

        return "order/list";
    }

    // Method to add point history for the user
    @PostMapping("/addPointHistory")
    public String addPointHistory(@RequestParam("userid") String userid,
                                  @RequestParam("pointcategoryid") String pointcategoryid,
                                  @RequestParam("pointtype") String pointtype,
                                  @RequestParam("pointamount") int pointamount,
                                  HttpSession session) {
        PointHistoryDTO pointHistoryDto = new PointHistoryDTO();
        pointHistoryDto.setUserid(userid);
        pointHistoryDto.setPointcategoryid(pointcategoryid);
        pointHistoryDto.setPointtype(pointtype);
        pointHistoryDto.setPointamount(pointamount);
        pointHistoryDto.setPointsource("Order Payment");
        pointHistoryDto.setPointcreationdate(new Timestamp(System.currentTimeMillis()));
        pointHistoryDto.setPointusedate(null);

        // Insert point history for the user
        orderDao.insertPointHistory(pointHistoryDto);

        return "redirect:/order/payment";
    }

    // Method to fetch Iamport API token
    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            } else {
                System.out.println("Failed to get token, response: " + response.getBody());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

}







function buyopenPopup(url) {
    if (isLoggedIn()) {
        var form = document.createElement("form");
        form.method = "POST";
        form.action = url;
        form.target = "popupWindow";

        var width = 1000;
        var height = 900;
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;

        var features = "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes";

        document.body.appendChild(form);
        window.open("", "popupWindow", features);

        form.submit();
    } else {
        // 로그인이 되어있지 않으면 팝업을 열지 않음
        alert("로그인이 필요합니다.");
        return; // 팝업을 열지 않고 함수 종료
    }
}










<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title>상품 후기 쓰기</title>
  <!-- 부트스트랩 CSS -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons CDN 추가 -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/jquery-3.7.1.min.js"></script>
  <link href="/css/styles.css" rel="stylesheet" type="text/css">
  <!-- Summernote CSS -->
  <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">
  <!-- Summernote JS -->
  <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>
  <script src="/js/script.js"></script>
  <!-- Summernote 한국어 설정 -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.18/lang/summernote-ko-KR.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f2f2f2;
            padding: 20px;
        }
        .board_write_popup {
            max-width: 100%;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
        }
        .ly_tit {
            margin-bottom: 20px;
            text-align: center;
        }
        .ly_cont {
            margin-bottom: 20px;
        }
        
        /* 이미지 및 상품명 센터 정렬 */
        .top_item_photo_info {
            text-align: center;
            margin-bottom: 20px;
        }

        /* 상품명 스타일 */
        .productname {
            font-size: 24px;
            font-weight: bold;
            margin-top: 10px;
            margin-bottom: 10px;
        } 
    
        .board_write_box {
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .board_write_table {
            width: 100%;
            margin-bottom: 0;
        }
        .board_write_table th {
            width: 100%;
            text-align: left;
            vertical-align: top;
        }
        .board_write_table td {
            width: 100%;
            padding-left: 10px;
        }
        .write_editor textarea {
            width: 100%;
            min-width: 100%;
            height: 150px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }
        .btn_center_box {
            text-align: center;
        }
        .btn_ly_cancel, .btn_ly_write_ok {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            text-decoration: none;
            color: #fff;
            background-color: #007bff;
            border: 1px solid #007bff;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn_ly_cancel:hover, .btn_ly_write_ok:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

        /* Responsive adjustments */
        @media (min-width: 768px) {
            .board_write_table th, .board_write_table td {
                width: auto;
            }
        }

        @media (max-width: 767px) {
            .board_write_table th, .board_write_table td {
                display: block;
                width: 100%;
                text-align: left;
            }
            .write_editor textarea {
                height: 200px;
            }
        }
    </style>
</head>
<body class="body-board body-popup-goods-board-write pc">
    <div class="container">
        <div class="board_write_popup">
            <div class="ly_tit">
                <h2>상품 후기 쓰기</h2>
            </div>

            <div class="ly_cont">
                <form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
                    <input type="hidden" name="reviewid" id="reviewid" value="">
                    <div class="top_item_photo_info">
                        <c:forEach items="${goodsList}" var="goods">
                        <c:if test="${goods.goodsid eq param.goodsid}">
                            <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" width="300" alt="${param.goodsid} 상품 이미지" title="${param.goodsid} 상품 이미지" class="middle">
                            <br> 
                            <h5 class="productname">${goods.productname}</h5>
                        </c:if>
                        </c:forEach>    
                    </div>

                    <div class="board_write_box">
                        <table class="board_write_table">
                







@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session, @RequestParam("upfiles") MultipartFile[] files) {
    // 로그인된 사용자 정보 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }

    // 기타 필요한 정보 설정
    reviewDto.setUserid(userid);
    // 필요한 경우 matchid와 goodsid 설정

    // 리뷰 날짜 설정
    reviewDto.setReviewdate(new Date());
    
    // grantedpoints 설정 (필요한 로직에 따라 설정)
    reviewDto.setGrantedpoints(0); // 예시로 0으로 설정, 실제 로직에 따라 수정

    reviewDao.insert(reviewDto);

    // 파일 업로드 처리
    if (files != null && files.length > 0) {
        for (MultipartFile file : files) {
            if (!file.isEmpty()) {
                try {
                    // 실제 서버에 파일 저장하는 로직 추가
                    String filePath = "/storage/review/" + file.getOriginalFilename();
                    File dest = new File(filePath);
                    file.transferTo(dest);
                    // 리뷰ID와 함께 DB에 파일 정보 저장하는 로직 추가 필요
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    return "redirect:/review/list";
}




@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session, @RequestParam("file") MultipartFile file) {
    // 로그인된 사용자 정보 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }

    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 날짜 설정
    reviewDto.setReviewdate(reviewDto.getReviewdate());
    
    // grantedpoints 설정 (필요한 로직에 따라 설정)
    reviewDto.setGrantedpoints(0);
    
    reviewDao.insert(reviewDto);

    // 파일 업로드 처리
    if (file != null && !file.isEmpty()) {
        try {
            // 실제 서버에 파일 저장하는 로직 추가 (예: 파일명 중복 처리 필요)
            String filePath = "/storage/review/" + file.getOriginalFilename(); // 실제 저장할 경로 설정
            File dest = new File(filePath);
            file.transferTo(dest);
            // 리뷰ID와 함께 DB에 파일 정보 저장하는 로직 추가 필요
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    return "redirect:/review/list";
}


if (file != null) {
    System.out.println("Received file: " + file.getOriginalFilename());
} else {
    System.out.println("No file received.");
}















@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session, @RequestParam("img") MultipartFile img, HttpServletRequest req) {
    // Existing logic...
    
    // 첨부된 파일 처리
    ServletContext application = req.getServletContext();
    String basePath = application.getRealPath("/storage/review");
    
    String filename = "-";
    long filesize = 0;
    
    if (img.getSize() > 0 && img != null && !img.isEmpty()) {
        filesize = img.getSize();
        
        try {
            String originalFilename = img.getOriginalFilename();
            filename = originalFilename;
            
            File file = new File(basePath, originalFilename);
            int i = 1;
            while (file.exists()) {
                int lastDot = originalFilename.lastIndexOf(".");
                filename = originalFilename.substring(0, lastDot) + "_" + i + originalFilename.substring(lastDot);
                file = new File(basePath, filename);
                i++;
            }
            
            img.transferTo(file);
            
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    reviewDto.setFilename(filename);
    reviewDto.setFilesize(filesize);
    
    reviewDao.insert(reviewDto);
    
    // Existing logic...
}





var addUploadBtn = document.getElementById('addUploadBtn');
var uploadSection = document.getElementById('uploadSection');
var uploadCount = 1;

addUploadBtn.addEventListener('click', function() {
    var newInput = document.createElement('input');
    newInput.type = 'file';
    newInput.id = 'img' + uploadCount;
    newInput.name = 'img';
    newInput.className = 'form-control';
    newInput.title = '찾아보기';

    var span = document.createElement('span');
    span.className = 'btn_gray_list';
    var deleteBtn = document.createElement('button');
    deleteBtn.type = 'button';
    deleteBtn.className = 'btn btn-outline-secondary btn_gray_big';
    deleteBtn.innerHTML = '<span>- 삭제</span>';
    deleteBtn.addEventListener('click', function() {
        this.parentNode.previousSibling.remove(); // 파일 입력란 제거
        this.parentNode.remove(); // 삭제 버튼 제거
    });

    span.appendChild(deleteBtn);

    uploadSection.appendChild(newInput);
    uploadSection.appendChild(span);

    uploadCount++;
});















@PostMapping("/insert")
public String insert(@ModelAttribute ReviewDTO reviewDto, HttpSession session, @RequestParam("img") List<MultipartFile> imgs, HttpServletRequest req) {
    // 로그인된 사용자 정보 가져오기
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login"; // 로그인 페이지로 리디렉션
    }
    
    // 기타 필요한 정보 설정 (userid, matchid, goodsid)
    reviewDto.setUserid(userid);
    reviewDto.setMatchid(reviewDto.getMatchid()); // 매치 ID 설정 필요
    reviewDto.setGoodsid(reviewDto.getGoodsid()); // 굿즈 ID 설정 필요
    
    // 리뷰 날짜 설정
    reviewDto.setReviewdate(new Date());
    
    // grantedpoints 설정 (필요한 로직에 따라 설정)
    reviewDto.setGrantedpoints(0);
    
    reviewDao.insert(reviewDto);
    
    // 첨부된 파일 처리
    // -> 실제 파일 /storage 폴더에 저장
    ServletContext application = req.getServletContext();
    String basePath = application.getRealPath("/storage/review");
    
    // 업로드 파일은 /storage폴더에 저장
    // 파일 처리를 위한 변수 초기화
    String filenames = "-";
    long totalFilesize = 0;
    
    // 다중 파일 업로드 처리
    for (MultipartFile img : imgs) {
        if (img.getSize() > 0 && !img.isEmpty()) { // 파일이 존재한다면
            long filesize = img.getSize();
            totalFilesize += filesize;
            
            try {
                String originalFilename = img.getOriginalFilename();
                String filename = originalFilename;
                
                File file = new File(basePath, filename);
                int i = 1;
                while (file.exists()) {
                    int lastDot = originalFilename.lastIndexOf(".");
                    filename = originalFilename.substring(0, lastDot) + "_" + i + originalFilename.substring(lastDot);
                    file = new File(basePath, filename);
                    i++;
                }
                
                img.transferTo(file);
                
                // 파일명을 filenames에 추가
                if (filenames.equals("-")) {
                    filenames = filename;
                } else {
                    filenames += "," + filename;
                }
                
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }
    
    reviewDto.setFilename(filenames);
    reviewDto.setFilesize(totalFilesize);
    
    // 리뷰 정보 업데이트 (파일명 및 파일 크기)
    reviewDao.update(reviewDto);
    
    return "<script>window.opener.location.reload(); window.close();</script>";
}













var formData = new FormData();
var fileInputs = document.querySelectorAll('input[type="file"]');
fileInputs.forEach(function(input) {
    for (var i = 0; i < input.files.length; i++) {
        formData.append('files[]', input.files[i]);
    }
});

// 이후 formData를 서버로 전송












<form name="reviewfrm" id="reviewfrm" action="/review/insert" method="post" enctype="multipart/form-data">
    <input type="hidden" name="goodsid" id="goodsid" value="${param.goodsid}">
    <input type="hidden" name="reviewid" id="reviewid" value="">
    ...
    <input type="file" id="img" name="file" class="file" title="찾아보기">
    ...
    <input type="submit" value="등록" onclick="return validateForm()" class="btn btn-primary btn_ly_write_ok">
</form>






// CouponDAO.java
public List<CouponDTO> selectCouponsByUserAndProductType(String userid, String productType) {
    Map<String, String> params = new HashMap<>();
    params.put("userid", userid);
    params.put("applicableproduct", productType);
    return sqlSession.selectList("coupon.selectCouponsByUserAndProductType", params);
}



<button onclick="openPopup('/order/payment?goodsid=${goodsDto.goodsid}')">구매하기</button>


function openPopup(url) { //구매하기 팝업
    	
        window.open(url, "popupWindow", "width=1200,height=800,scrollbars=yes");
    }// openPopup(url) end
    
    
    <fmt:formatDate value="${review.reviewdate}" pattern="yyyy년 MM월 dd일 (E) HH:mm"/>