<script>
    // 초기 로드 시 총 상품 금액 계산
    document.addEventListener('DOMContentLoaded', function() {
        updateTotalPrice();
    });

    // 총 가격 업데이트 함수
    function updateTotalPrice() {
        var quantity = parseInt(document.getElementById('quantity-input').value);
        var price = ${goodsDto.price};
        var totalPrice = quantity * price;
        var deliveryfee = 3000; // 기본 배송비 3000원

        // 100,000원 이상 구매 시 무료
        if (totalPrice >= 100000) {
            deliveryfee = 0;
        }

        // 업데이트된 값들을 화면에 표시합니다
        document.getElementById('order-quantity').innerText = quantity + '개';
        document.getElementById('deliveryfee').innerText = deliveryfee.toLocaleString() + '원';
        document.getElementById('total-price').innerText = totalPrice.toLocaleString() + '원';

        // 숨겨진 입력 필드를 업데이트합니다
        document.getElementById('form-quantity').value = quantity;
        document.getElementById('form-unitprice').value = price;
        document.getElementById('form-deliveryfee').value = deliveryfee;        
        document.getElementById('form-totalprice').value = totalPrice;
    }

    function updateQuantity(change) {
        var input = document.getElementById('quantity-input');
        var currentValue = parseInt(input.value);
        var newValue = currentValue + change;

        if (newValue < 1) {
            newValue = 1; // 최소 수량은 1로 설정
        }

        input.value = newValue;
        updateTotalPrice(); // 총 가격 업데이트
    }
</script>





















package kr.co.matchday.mypage;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MypageDAO {

    @Autowired
    private SqlSession sqlSession;

    public MypageDTO getUserById(String userId) {
        return sqlSession.selectOne("kr.co.matchday.mypage.MypageDAO.getUserById", userId);
    }

    public void updateUserPoints(String userId, int points) {
        MypageDTO mypageDTO = new MypageDTO();
        mypageDTO.setUserid(userId);
        mypageDTO.setTotalpoints(points);
        sqlSession.update("kr.co.matchday.mypage.MypageDAO.updateUserPoints", mypageDTO);
    }
}




















package kr.co.matchday.order;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.tickets.TicketsDetailDTO;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Repository
public class OrderDAO {

    @Autowired
    private SqlSession sqlSession;

    @Autowired
    private MypageDAO mypageDao;  // 추가된 부분

    public void insert(OrderDTO orderDto) {
        System.out.println("Preparing to insert order: " + orderDto.toString());
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insert", orderDto);
        System.out.println("Order inserted in database.");

        // 주문 상세 정보 삽입 
        for (OrderdetailDTO orderDetail : orderDto.getOrderDetails()) {
            orderDetail.setOrderid(orderDto.getOrderid());
            insertOrderDetail(orderDetail);
        }

        // 포인트 차감 로직 추가
        if (orderDto.getUsedpoints() > 0) {
            MypageDTO user = mypageDao.getUserById(orderDto.getUserid());
            int updatedPoints = user.getTotalpoints() - orderDto.getUsedpoints();
            mypageDao.updateUserPoints(orderDto.getUserid(), updatedPoints);
        }
    }

    public void insertOrderDetail(OrderdetailDTO orderDetailDto) {
        System.out.println("Preparing to insert order detail: " + orderDetailDto.toString());
        sqlSession.insert("kr.co.matchday.order.OrderDAO.insertOrderDetail", orderDetailDto);
        System.out.println("Order detail inserted in database.");
    }

    public List<OrderDTO> list(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.listByUser", userid);
    }

    public Map<String, Object> getUserInfo(String userID) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getUserInfo", userID);
    }

    public List<CouponDTO> getCouponsByUserId(String userid) {
        Map<String, Object> params = new HashMap<>();
        params.put("userid", userid);
        params.put("applicableProduct", "Goods");
        params.put("usage", "Not Used");
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getCouponsByUserId", params);
    }

    public int getDiscountRateByCouponId(String couponid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getDiscountRateByCouponId", couponid);
    }

    public int updateCouponUsage(String couponid) {
        return sqlSession.update("kr.co.matchday.order.OrderDAO.updateCouponUsage", couponid);
    }

    public String getMaxOrderId(String date) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getMaxOrderId", date);
    }

    public List<OrderDTO> getOrderByUserId(String userid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderByUserId", userid);
    }

    public OrderDTO getOrderById(String orderid) {
        return sqlSession.selectOne("kr.co.matchday.order.OrderDAO.getOrderById", orderid);
    }

    public List<OrderdetailDTO> getOrderDetailByOrderId(String orderid) {
        return sqlSession.selectList("kr.co.matchday.order.OrderDAO.getOrderDetailByOrderId", orderid);
    }
}




















package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;
    
    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();
        
        System.out.println("HERE !! ");
        System.out.println(requestParams);
        System.out.println(requestParams.get("goodsid"));
        
        
        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientphone = requestParams.get("recipientphone");
        String recipientpostcode = requestParams.get("recipientpostcode");
        String recipientaddress1 = requestParams.get("recipientaddress1");
        String recipientaddress2 = requestParams.get("recipientaddress2");
        String deliverymessage = requestParams.get("deliverymessage");
        String paymentmethod = requestParams.get("paymentmethod");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);
        String couponid = requestParams.get("couponid");
        String goodsid = requestParams.get("goodsid");
        int quantity = parseInteger(requestParams.get("quantity"), 0);
        String size = requestParams.get("size");
        int deliveryfee = parseInteger(requestParams.get("deliveryfee"), 0);
        
        System.out.println("usedpoints = " + usedpoints);
        
        if (imp_uid == null || merchant_uid == null || paid_amount <= 0) {
            response.put("status", "error");
            response.put("message", "잘못된 요청입니다.");
            return response;
        }

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            response.put("status", "error");
            response.put("message", "로그인이 필요합니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));

        JSONObject json = new JSONObject();
        json.put("imp_key", env.getProperty("iamport.key"));
        json.put("imp_secret", env.getProperty("iamport.secret"));

        HttpEntity<String> entity = new HttpEntity<>(json.toString(), headers);
        ResponseEntity<Map> tokenResponse = restTemplate.exchange(
            "https://api.iamport.kr/users/getToken", HttpMethod.POST, entity, Map.class);

        if (tokenResponse.getStatusCode() == HttpStatus.OK) {
            Map<String, Object> tokenResponseBody = tokenResponse.getBody();
            if (tokenResponseBody != null && (boolean) tokenResponseBody.get("response") != null) {
                Map<String, Object> tokenData = (Map<String, Object>) tokenResponseBody.get("response");
                String accessToken = (String) tokenData.get("access_token");

                headers.set("Authorization", accessToken);
                HttpEntity<String> paymentEntity = new HttpEntity<>(headers);

                ResponseEntity<Map> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, paymentEntity, Map.class);

                if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                    Map<String, Object> paymentResponseBody = paymentResponse.getBody();
                    if (paymentResponseBody != null && (boolean) paymentResponseBody.get("response") != null) {
                        Map<String, Object> paymentData = (Map<String, Object>) paymentResponseBody.get("response");
                        int amount = (int) paymentData.get("amount");

                        if (amount == paid_amount) {
                            String orderId = generateOrderId();
                            OrderDTO orderDto = new OrderDTO();
                            orderDto.setOrderid(orderId);
                            orderDto.setUserid(userid);
                            orderDto.setOrderdate(new Timestamp(System.currentTimeMillis()));
                            orderDto.setTotalprice(paid_amount);
                            orderDto.setRecipientname(recipientname);
                            orderDto.setRecipientphone(recipientphone);
                            orderDto.setRecipientpostcode(recipientpostcode);
                            orderDto.setRecipientaddress1(recipientaddress1);
                            orderDto.setRecipientaddress2(recipientaddress2);
                            orderDto.setDeliverymessage(deliverymessage);
                            orderDto.setPaymentmethod(paymentmethod);
                            orderDto.setUsedpoints(usedpoints);
                            orderDto.setDeliveryfee(deliveryfee);
                            orderDto.setFinalpaymentamount(finalpaymentamount);

                            OrderdetailDTO orderDetailDto = new OrderdetailDTO();
                            orderDetailDto.setOrderid(orderId);
                            orderDetailDto.setGoodsid(goodsid);
                            orderDetailDto.setQuantity(quantity);
                            orderDetailDto.setSize(size);

                            orderDto.setOrderDetails(Arrays.asList(orderDetailDto));
                            orderDao.insert(orderDto);

                            // 쿠폰 사용 업데이트
                            if (couponid != null && !couponid.isEmpty()) {
                                orderDao.updateCouponUsage(couponid);
                            }

                            response.put("status", "success");
                            response.put("order_id", orderId);
                            return response;
                        }
                    }
                }
            }
        }

        response.put("status", "error");
        response.put("message", "결제 검증에 실패했습니다.");
        return response;
    }

    private String generateOrderId() {
        String prefix = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(prefix);

        if (maxOrderId == null) {
            return prefix + "0001";
        } else {
            int nextOrderId = Integer.parseInt(maxOrderId.substring(8)) + 1;
            return prefix + String.format("%04d", nextOrderId);
        }
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    @GetMapping("/orderList")
    public ModelAndView orderList(HttpSession session) {
        ModelAndView mav = new ModelAndView("order/orderList");
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            mav.setViewName("redirect:/member/login");
            return mav;
        }

        List<OrderDTO> orderList = orderDao.list(userid);
        mav.addObject("orderList", orderList);
        return mav;
    }
}

























<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="../header.jsp" %>
<style>
    .mypage-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        padding: 30px 10px;
    }
    .mypage-sidebar {
        width: 200px; /* 사이드바 너비 */
        padding: 20px;
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 20px;
    }
    .mypage-form {
        flex: 1;
        padding: 30px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }
    .mypage-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        color: #333;
    }
    .table-container {
        margin-top: 20px;
    }
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }
    .table th, .table td {
        border: 1px solid #ccc;
        padding: 12px; /* 셀 안의 여백 */
        text-align: center;
        vertical-align: middle;
    }
    .table th {
        font-size: 16px;
        background-color: #f0f0f0;
        font-weight: bold;
    }
    .table td {
        font-size: 19px; /* 글자 크기 증가 */
    }
    .badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .badge-success {
        background-color: #28a745;
        color: #fff;
    }
    .badge-danger {
        background-color: #dc3545;
        color: #fff;
    }
</style>
<div class="mypage-container">
    <!-- 사이드바 -->
    <div class="mypage-sidebar">
        <ul class="list-group">
            <li class="list-group-item"><a href="/member/mypage">회원 정보</a></li>
            <li class="list-group-item"><a href="/member/mypage/point">포인트 내역</a></li>
            <li class="list-group-item"><a href="/member/mypage/coupon">쿠폰함</a></li>
            <li class="list-group-item"><a href="/cart/list">장바구니</a></li>
            <li class="list-group-item"><a href="/tickets/reservationList">나의 예매내역</a></li>
            <li class="list-group-item active"><a href="/order/orderList">나의 주문내역</a></li>
            <li class="list-group-item"><a href="/membershipticket/membershippaymentlist">멤버쉽 구매내역</a></li>
        </ul>
    </div>
    <!-- 주문내역 내용 -->
    <div class="mypage-form">
        <h2 class="mypage-title">나의 주문내역</h2>
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>주문일</th>
                        <th>주문번호</th>
                        <th>굿즈ID</th>
                        <th>구매한 상품</th>
                        <th>사이즈</th>
                        <th>수량</th>
                        <th>결제 금액</th>
                        <th>취소가능일</th>
                        <th>현재상태</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${order}" var="order">
                        <c:forEach items="${order.orderDetails}" var="orderDetail">
                            <tr>
                                <td>${order.orderdate}</td>
                                <td><a href="/order/orderDetail?orderid=${order.orderid}" class="link-primary">${order.orderid}</a></td>
                                <td>${orderDetail.goodsid}</td>
                                <td>
                                    <c:forEach items="${goodsList}" var="goods">
                                        <c:if test="${orderDetail.goodsid eq goods.goodsid}">
                                            <c:if test="${not empty goods.filename}">
                                                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                                                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                                </a>
                                            </c:if>
                                            <br>
                                            <span>${goods.productname}</span>
                                        </c:if>
                                    </c:forEach>
                                </td>
                                <td>${orderDetail.size}</td>
                                <td>${orderDetail.quantity}개</td>
                                <td><fmt:formatNumber value="${orderDetail.price * orderDetail.quantity}" pattern="#,###원"/></td>
                                <td><fmt:formatDate value="${order.cancelDeadline}" pattern="yyyy-MM-dd HH:mm:ss"/></td>
                                <td>
                                    <span class="badge ${order.orderstatus == 'Completed' ? 'badge-success' : 'badge-danger'}">
                                        ${order.orderstatus == 'Pending' ? '결제완료' : '결제취소'}
                                    </span>
                                </td>
                            </tr>
                        </c:forEach>
                    </c:forEach>
                </tbody>
            </table>
        </div>
    </div>
</div>
<%@ include file="../footer.jsp" %>




<!-- 사용자 ID로 주문 목록 조회 (주문일 기준 내림차순 정렬) -->
<select id="getOrderByUserId" parameterType="string" resultMap="orderResultMap">
    SELECT o.*, od.*, g.*
    FROM `order` o
    JOIN orderdetail od ON o.orderid = od.orderid
    JOIN goods g ON od.goodsid = g.goodsid
    WHERE o.userid = #{userid}
    ORDER BY o.orderdate DESC
</select>

<resultMap id="orderResultMap" type="kr.co.matchday.order.OrderDTO">
    <id property="orderid" column="orderid"/>
    <!-- 나머지 OrderDTO 속성 매핑 -->
    <collection property="orderDetails" ofType="kr.co.matchday.order.OrderdetailDTO">
        <id property="orderid" column="orderid"/>
        <result property="goodsid" column="goodsid"/>
        <result property="size" column="size"/>
        <!-- 나머지 OrderdetailDTO 속성 매핑 -->
    </collection>
</resultMap>




@GetMapping("/orderList")
public ModelAndView orderList(@RequestParam(value = "orderid", required = false) String orderid, HttpSession session, Model model) {
    String userId = (String) session.getAttribute("userID");
    if (userId == null) {
        return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
    }

    List<OrderDTO> orderList = orderDao.getOrderByUserId(userId);

    // 주문 날짜를 Date 객체로 변환하고 취소 마감시간을 설정하는 로직
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    for (OrderDTO orderDto : orderList) {
        Date orderDate = null;
        try {
            // 주문 날짜를 Date 객체로 변환
            orderDate = formatter.parse(orderDto.getOrderdate());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        // 취소 마감시간 설정 (임의로 3일 후로 설정)
        Calendar cal = Calendar.getInstance();
        if (orderDate != null) {
            cal.setTime(orderDate);
            cal.add(Calendar.DATE, 3);
            orderDto.setCancelDeadline(cal.getTime());
        }
    }

    ModelAndView mav = new ModelAndView("order/orderList");
    mav.addObject("orderList", orderList); // orderList를 모델에 추가

    // orderid가 제공된 경우에만 주문 상세 정보를 조회
    if (orderid != null && !orderid.isEmpty()) {
        List<OrderdetailDTO> orderDetailList = orderDao.getOrderDetailByOrderId(orderid);
        model.addAttribute("orderDetailList", orderDetailList);
    }

    return mav;
}
@GetMapping("/orderList")
public ModelAndView orderList(@RequestParam(value = "orderid", required = false) String orderid, HttpSession session) {
    String userId = (String) session.getAttribute("userID");
    if (userId == null) {
        return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
    }

    List<OrderDTO> orderList = orderDao.getOrderByUserId(userId);
    List<OrderdetailDTO> orderDetailList = new ArrayList<>();

    // 모든 주문에 대한 상세 정보를 조회
    if (orderid != null && !orderid.isEmpty()) {
        orderDetailList = orderDao.getOrderDetailByOrderId(orderid);
    } else {
        // 전체 주문에 대한 상세 정보를 조회
        for (OrderDTO order : orderList) {
            List<OrderdetailDTO> details = orderDao.getOrderDetailByOrderId(order.getOrderid());
            order.setOrderDetails(details);
        }
    }

    ModelAndView mav = new ModelAndView("order/orderList");
    mav.addObject("orderList", orderList);
    mav.addObject("orderDetailList", orderDetailList); // 상세 정보를 추가
    return mav;
}
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
<%@ include file="../header.jsp" %>
<style>
    .mypage-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        padding: 30px 10px;
    }
    .mypage-sidebar {
        width: 200px;
        padding: 20px;
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 20px;
    }
    .mypage-form {
        flex: 1;
        padding: 30px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }
    .mypage-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        font-weight: bold;
        color: #333;
    }
    .table-container {
        margin-top: 20px;
    }
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }
    .table th, .table td {
        border: 1px solid #ccc;
        padding: 12px;
        text-align: center;
        vertical-align: middle;
    }
    .table th {
        font-size: 16px;
        background-color: #f0f0f0;
        font-weight: bold;
    }
    .table td {
        font-size: 19px;
    }
    .badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }
    .badge-success {
        background-color: #28a745;
        color: #fff;
    }
    .badge-danger {
        background-color: #dc3545;
        color: #fff;
    }
</style>
<div class="mypage-container">
    <!-- 사이드바 -->
    <div class="mypage-sidebar">
        <ul class="list-group">
            <li class="list-group-item"><a href="/member/mypage">회원 정보</a></li>
            <li class="list-group-item"><a href="/member/mypage/point">포인트 내역</a></li>
            <li class="list-group-item"><a href="/member/mypage/coupon">쿠폰함</a></li>
            <li class="list-group-item"><a href="/cart/list">장바구니</a></li>
            <li class="list-group-item"><a href="/tickets/reservationList">나의 예매내역</a></li>
            <li class="list-group-item active"><a href="/order/orderList">나의 주문내역</a></li>
            <li class="list-group-item"><a href="/membershipticket/membershippaymentlist">멤버쉽 구매내역</a></li>
        </ul>
    </div>
    <!-- 주문내역 내용 -->
    <div class="mypage-form">
        <h2 class="mypage-title">나의 주문내역</h2>
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>주문일</th>
                        <th>주문번호</th>
                        <th>굿즈ID</th>
                        <th>구매한 상품</th>
                        <th>사이즈</th>
                        <th>수량</th>
                        <th>결제 금액</th>
                        <th>취소가능일</th>
                        <th>현재상태</th>
                    </tr>
                </thead>
                <tbody>
                    <c:forEach items="${orderList}" var="order">
                        <c:forEach items="${order.orderDetails}" var="orderDetail">
                            <tr>
                                <td><fmt:formatDate value="${order.orderdate}" pattern="yyyy-MM-dd"/></td>
                                <td><a href="/order/orderDetail?orderid=${order.orderid}" class="link-primary">${order.orderid}</a></td>
                                <td>${orderDetail.goodsid}</td>
                                <td>
                                    <c:forEach items="${goodsList}" var="goods">
                                        <c:if test="${orderDetail.goodsid eq goods.goodsid}">
                                            <c:if test="${not empty goods.filename}">
                                                <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                                                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                                </a>
                                            </c:if>
                                            <br>
                                            <span>${goods.productname}</span>
                                        </c:if>
                                    </c:forEach>
                                </td>
                                <td>${orderDetail.size}</td>
                                <td>${orderDetail.quantity}개</td>
                                <td><fmt:formatNumber value="${orderDetail.totalamount}" pattern="#,###원"/></td>
                                <td><fmt:formatDate value="${orderDetail.canceldate}" pattern="yyyy-MM-dd"/></td>
                                <td>
                                    <span class="badge ${orderDetail.iscanceled ? 'badge-danger' : 'badge-success'}">
                                        ${orderDetail.iscanceled ? '취소' : '정상'}
                                    </span>
                                </td>
                            </tr>
                        </c:forEach>
                    </c:forEach>
                </tbody>
            </table>
        </div>
    </div>
</div>
<%@ include file="../footer.jsp" %>






package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;
    
    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientemail = requestParams.get("recipientemail");
        String recipientphone = requestParams.get("recipientphone");
        String shippingaddress = requestParams.get("shippingaddress");
        String shippingrequest = requestParams.get("shippingrequest");
        String paymentmethodcode = requestParams.get("paymentmethodcode");
        String couponid = requestParams.get("couponid");
        int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
        int discountprice = parseInteger(requestParams.get("discountprice"), 0);
        String userId = (String) session.getAttribute("userID");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

        List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
        List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
        List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
        List<String> prices = Arrays.asList(requestParams.get("price").split(","));
        List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

        String allcartid = requestParams.get("cartid");
        List<String> cartidList = new ArrayList<>();
        if (allcartid != null && !allcartid.isEmpty()) {
            cartidList = Arrays.asList(allcartid.split(","));
        }

        if (userId == null) {
            response.put("success", false);
            response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
            return response;
        }

        if (goodsidList.isEmpty()) {
            response.put("success", false);
            response.put("message", "상품 ID가 유효하지 않습니다.");
            return response;
        }

        if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
            response.put("success", false);
            response.put("message", "결제 방법 코드가 유효하지 않습니다.");
            return response;
        }

        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
                "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        String redirectUrl = "/order/orderDetail?orderid=";
        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setOrderdate(currentDate);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid != null && !couponid.isEmpty() && !couponid.equals("null") ? couponid : null);
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();
                    int orderQuantity = 0;
                    int orderPrice = 0;

                    for (int i = 0; i < goodsidList.size(); i++) {
                        int quantity = parseInteger(quantities.get(i), 1);
                        int price = parseInteger(prices.get(i), 0);

                        orderQuantity += quantity;
                        orderPrice += (price * quantity);

                        OrderdetailDTO orderDetail = new OrderdetailDTO();
                        orderDetail.setGoodsid(goodsidList.get(i));
                        orderDetail.setSize(sizes.get(i));
                        orderDetail.setQuantity(quantity);
                        orderDetail.setPrice(price);
                        orderDetail.setTotalamount(price * quantity);
                        orderDetails.add(orderDetail);

                        // Update stock
                        goodsDao.updateStock(goodsidList.get(i), sizes.get(i), quantity);
                    }

                    orderDto.setOrderquantity(orderQuantity);
                    orderDto.setOrderprice(orderPrice);

                    orderDao.insertOrder(orderDto);
                    orderDao.insertOrderDetails(orderDetails);

                    if (cartidList.size() > 0) {
                        cartDao.deleteCarts(cartidList);
                    }

                    response.put("success", true);
                    response.put("message", "결제 완료되었습니다.");
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 확인 중 오류가 발생했습니다.");
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 확인 요청이 실패했습니다.");
        }

        response.put("redirectUrl", redirectUrl);
        return response;
    }

    @GetMapping("/orderDetail")
    public String orderDetail(@RequestParam("orderid") String orderid, Model model) {
        OrderDTO order = orderDao.getOrderById(orderid);
        if (order == null) {
            model.addAttribute("error", "주문 정보를 찾을 수 없습니다.");
            return "error";
        }

        List<OrderdetailDTO> orderDetails = orderDao.getOrderDetailsByOrderId(orderid);
        model.addAttribute("order", order);
        model.addAttribute("orderDetails", orderDetails);

        return "order/orderDetail";
    }

    private String getToken() {
        try {
            String authUrl = "https://api.iamport.kr/users/getToken";
            String authBody = "{\"imp_key\":\"" + env.getProperty("imp_key") + "\",\"imp_secret\":\"" + env.getProperty("imp_secret") + "\"}";
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(authBody, headers);
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<String> response = restTemplate.postForEntity(authUrl, entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.get

                
                
                
                
                
                
                
                
                
                
                
                
                
   package kr.co.matchday.cart;

import java.util.List;
import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class CartDAO {

    @Autowired
    private SqlSession sqlSession;

    // 장바구니에 상품 추가
    public int insert(CartDTO cartDto) {
        return sqlSession.insert("cart.insert", cartDto);
    }

    // 장바구니에서 수량 업데이트
    public int updateQuantity(CartDTO cartDto) {
        return sqlSession.update("cart.updateQuantity", cartDto);
    }

    // 장바구니에 상품이 존재하는지 확인
    public CartDTO checkIfExists(CartDTO cartDto) {
        return sqlSession.selectOne("cart.checkIfExists", cartDto);
    }

    // 사용자의 장바구니 목록 조회 
    public List<CartDTO> getCartList(String userid) {
        return sqlSession.selectList("cart.getCartList", userid);
    }

    // 장바구니에서 상품 삭제 (단일 항목)
    public int delete(int cartid) {
        return sqlSession.delete("cart.delete", cartid);
    }

    // 장바구니에서 상품 삭제 (여러 항목)
    public int deleteMultiple(List<Integer> cartidList) {
        return sqlSession.delete("cart.deleteMultiple", cartidList);
    }

    // 장바구니에서 선택된 항목 조회
    public List<CartDTO> getCartItems(List<Integer> cartidList) {
        return sqlSession.selectList("cart.getCartItems", cartidList);
    }
}














package kr.co.matchday.cart;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.order.OrderDAO;

@Controller
@RequestMapping("/cart")
public class CartCont {

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private MypageDAO mypageDao;

    public CartCont() {
        System.out.println("-----CartCont() 객체 생성됨");
    }

    @PostMapping("/insert")
    @ResponseBody
    public String insert(@ModelAttribute CartDTO cartDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        cartDto.setUserid(userid);

        // 장바구니에 이미 존재하는지 확인
        CartDTO existingCartItem = cartDao.checkIfExists(cartDto);

        if (existingCartItem != null) {
            // 이미 존재하면 수량 업데이트
            existingCartItem.setQuantity(existingCartItem.getQuantity() + cartDto.getQuantity());
            existingCartItem.setTotalprice(existingCartItem.getUnitprice() * existingCartItem.getQuantity());
            cartDao.updateQuantity(existingCartItem);
        } else {
            // 존재하지 않으면 새로 추가
            cartDao.insert(cartDto);
        }

        return "SUCCESS";
    }

    @GetMapping("/list")
    public String showCartList(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<GoodsDTO> goodsList = goodsDao.list();
        List<CartDTO> cartList = cartDao.getCartList(userid);
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("cartList", cartList);
        return "cart/list";
    }

    @GetMapping("/delete")
    public String deleteItems(@RequestParam("cartid") List<Integer> cartid) {
        cartDao.deleteMultiple(cartid);
        return "redirect:/cart/list";
    }

    @GetMapping("/cartPayment")
    public String cartPayment(
            @RequestParam("cartid") String cartid,
            @RequestParam("goodsid") String goodsid,
            @RequestParam("size") String size,
            @RequestParam("quantity") String quantity,
            @RequestParam("price") String price,
            @RequestParam("deliveryfee") String deliveryfee,
            @RequestParam("totalPrice") String totalPrice,
            HttpSession session, Model model) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<String> goodsidList = Arrays.asList(goodsid.split(","));
        List<String> sizeList = Arrays.asList(size.split(","));
        List<Integer> quantityList = Arrays.asList(quantity.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> priceList = Arrays.asList(price.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

        List<GoodsDTO> goodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("cartid", cartid);
        
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("sizeList", sizeList);
        model.addAttribute("quantityList", quantityList);
        model.addAttribute("priceList", priceList);
        model.addAttribute("totalPriceList", totalPriceList);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "cart/cartPayment";
    }
}











package kr.co.matchday.cart;

import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.order.OrderDAO;

@Controller
@RequestMapping("/cart")
public class CartCont {

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private MypageDAO mypageDao;

    @PostMapping("/insert")
    @ResponseBody
    public String insert(@ModelAttribute CartDTO cartDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        cartDto.setUserid(userid);

        // 재고 수량 조회
        List<StockDTO> stockList = goodsDao.stocklist(cartDto.getGoodsid());
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(cartDto.getSize()))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (cartDto.getQuantity() > availableStock) {
            return "ERROR: Not enough stock available.";
        }

        // 장바구니에 이미 존재하는지 확인
        CartDTO existingCartItem = cartDao.checkIfExists(cartDto);

        if (existingCartItem != null) {
            // 이미 존재하면 수량 업데이트
            if (existingCartItem.getQuantity() + cartDto.getQuantity() > availableStock) {
                return "ERROR: Not enough stock available.";
            }
            existingCartItem.setQuantity(existingCartItem.getQuantity() + cartDto.getQuantity());
            existingCartItem.setTotalprice(existingCartItem.getUnitprice() * existingCartItem.getQuantity());
            cartDao.updateQuantity(existingCartItem);
        } else {
            // 존재하지 않으면 새로 추가
            cartDao.insert(cartDto);
        }

        return "SUCCESS";
    }

    @GetMapping("/cartPayment")
    public String cartPayment(
            @RequestParam("cartid") String cartid,
            @RequestParam("goodsid") String goodsid,
            @RequestParam("size") String size,
            @RequestParam("quantity") String quantity,
            @RequestParam("price") String price,
            @RequestParam("deliveryfee") String deliveryfee,
            @RequestParam("totalPrice") String totalPrice,
            HttpSession session, Model model) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<String> goodsidList = Arrays.asList(goodsid.split(","));
        List<String> sizeList = Arrays.asList(size.split(","));
        List<Integer> quantityList = Arrays.asList(quantity.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> priceList = Arrays.asList(price.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

        // 재고 수량 검증
        for (int i = 0; i < goodsidList.size(); i++) {
            String goodsid = goodsidList.get(i);
            String size = sizeList.get(i);
            int requestedQuantity = quantityList.get(i);

            List<StockDTO> stockList = goodsDao.stocklist(goodsid);
            int availableStock = stockList.stream()
                .filter(stock -> stock.getSize().equals(size))
                .mapToInt(StockDTO::getStockquantity)
                .findFirst()
                .orElse(0);

            if (requestedQuantity > availableStock) {
                model.addAttribute("error", "상품 " + goodsid + "의 재고가 부족합니다.");
                return "error";
            }
        }

        // 재고 수량 업데이트
        for (int i = 0; i < goodsidList.size(); i++) {
            StockDTO stockDto = new StockDTO();
            stockDto.setGoodsid(goodsidList.get(i));
            stockDto.setSize(sizeList.get(i));
            stockDto.setStockquantity(quantityList.get(i));
            goodsDao.buystockupdate(stockDto);
        }

        // 장바구니에서 선택된 항목 조회 및 모델에 추가
        List<GoodsDTO> goodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("cartid", cartid);
        
        model.addAttribute("goodsList", goodsList);
        model.addAttribute("sizeList", sizeList);
        model.addAttribute("quantityList", quantityList);
        model.addAttribute("priceList", priceList);
        model.addAttribute("totalPriceList", totalPriceList);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "cart/cartPayment";
    }
}



   package kr.co.matchday.cart;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.order.OrderDAO;

@Controller
@RequestMapping("/cart")
public class CartCont {

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private MypageDAO mypageDao;

    @PostMapping("/insert")
    @ResponseBody
    public String insert(@ModelAttribute CartDTO cartDto, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        cartDto.setUserid(userid);

        // 재고 수량 조회
        List<StockDTO> stockList = goodsDao.stocklist(cartDto.getGoodsid());
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(cartDto.getSize()))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (cartDto.getQuantity() > availableStock) {
            return "ERROR: Not enough stock available.";
        }

        // 장바구니에 이미 존재하는지 확인
        CartDTO existingCartItem = cartDao.checkIfExists(cartDto);

        if (existingCartItem != null) {
            // 이미 존재하면 수량 업데이트
            if (existingCartItem.getQuantity() + cartDto.getQuantity() > availableStock) {
                return "ERROR: Not enough stock available.";
            }
            existingCartItem.setQuantity(existingCartItem.getQuantity() + cartDto.getQuantity());
            existingCartItem.setTotalprice(existingCartItem.getUnitprice() * existingCartItem.getQuantity());
            cartDao.updateQuantity(existingCartItem);
        } else {
            // 존재하지 않으면 새로 추가
            cartDao.insert(cartDto);
        }

        return "SUCCESS";
    }

    @GetMapping("/list")
    public String showCartList(Model model, HttpSession session) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<GoodsDTO> allGoodsList = goodsDao.list(); // Renamed
        List<CartDTO> cartList = cartDao.getCartList(userid);
        model.addAttribute("allGoodsList", allGoodsList);
        model.addAttribute("cartList", cartList);
        return "cart/list";
    }

    @GetMapping("/delete")
    public String deleteItems(@RequestParam("cartid") List<Integer> cartid) {
        for (int id : cartid) {
            cartDao.delete(id);
        }
        return "redirect:/cart/list";
    }

    @GetMapping("/cartPayment")
    public String cartPayment(
            @RequestParam("cartid") String cartid,
            @RequestParam("goodsid") String goodsid,
            @RequestParam("size") String size,
            @RequestParam("quantity") String quantity,
            @RequestParam("price") String price,
            @RequestParam("deliveryfee") String deliveryfee,
            @RequestParam("totalPrice") String totalPrice,
            HttpSession session, Model model) {

        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        List<String> goodsidList = Arrays.asList(goodsid.split(","));
        List<String> sizeList = Arrays.asList(size.split(","));
        List<Integer> quantityList = Arrays.asList(quantity.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> priceList = Arrays.asList(price.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

        // 재고 수량 검증
        for (int i = 0; i < goodsidList.size(); i++) {
            String goodsid = goodsidList.get(i);
            String size = sizeList.get(i);
            int requestedQuantity = quantityList.get(i);

            List<StockDTO> stockList = goodsDao.stocklist(goodsid);
            int availableStock = stockList.stream()
                .filter(stock -> stock.getSize().equals(size))
                .mapToInt(StockDTO::getStockquantity)
                .findFirst()
                .orElse(0);

            if (requestedQuantity > availableStock) {
                model.addAttribute("error", "상품 " + goodsid + "의 재고가 부족합니다.");
                return "error";
            }
        }

        // 재고 수량 업데이트
        for (int i = 0; i < goodsidList.size(); i++) {
            StockDTO stockDto = new StockDTO();
            stockDto.setGoodsid(goodsidList.get(i));
            stockDto.setSize(sizeList.get(i));
            stockDto.setStockquantity(quantityList.get(i));
            goodsDao.buystockupdate(stockDto);
        }

        // 장바구니에서 선택된 항목 조회 및 모델에 추가
        List<GoodsDTO> selectedGoodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList()); // Renamed
        model.addAttribute("goodsid", goodsid);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("cartid", cartid);

        model.addAttribute("selectedGoodsList", selectedGoodsList); // Renamed
        model.addAttribute("sizeList", sizeList);
        model.addAttribute("quantityList", quantityList);
        model.addAttribute("priceList", priceList);
        model.addAttribute("totalPriceList", totalPriceList);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "cart/cartPayment";
    }
}









@GetMapping("/cartPayment")
public String cartPayment(
        @RequestParam("cartid") String cartid,
        @RequestParam("goodsid") String goodsidParam,
        @RequestParam("size") String sizeParam,
        @RequestParam("quantity") String quantityParam,
        @RequestParam("price") String priceParam,
        @RequestParam("deliveryfee") String deliveryfee,
        @RequestParam("totalPrice") String totalPrice,
        HttpSession session, Model model) {
    
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login";
    }

    List<String> goodsidList = Arrays.asList(goodsidParam.split(","));
    List<String> sizeList = Arrays.asList(sizeParam.split(","));
    List<Integer> quantityList = Arrays.asList(quantityParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> priceList = Arrays.asList(priceParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());

    // Validate stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        String itemGoodsId = goodsidList.get(i);
        String itemSize = sizeList.get(i);
        int requestedQuantity = quantityList.get(i);

        List<StockDTO> stockList = goodsDao.stocklist(itemGoodsId);
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(itemSize))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (requestedQuantity > availableStock) {
            model.addAttribute("error", "상품 " + itemGoodsId + "의 재고가 부족합니다.");
            return "error";
        }
    }

    // Update stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        StockDTO stockDto = new StockDTO();
        stockDto.setGoodsid(goodsidList.get(i));
        stockDto.setSize(sizeList.get(i));
        stockDto.setStockquantity(quantityList.get(i));
        goodsDao.buystockupdate(stockDto);
    }
    
    // Retrieve selected items and add to model
    List<GoodsDTO> selectedGoodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
    model.addAttribute("goodsid", goodsidParam);
    model.addAttribute("size", sizeParam);
    model.addAttribute("quantity", quantityParam);
    model.addAttribute("price", priceParam);
    model.addAttribute("totalPrice", totalPrice);
    model.addAttribute("deliveryfee", deliveryfee);
    model.addAttribute("cartid", cartid);

    model.addAttribute("goodsList", selectedGoodsList);
    model.addAttribute("sizeList", sizeList);
    model.addAttribute("quantityList", quantityList);
    model.addAttribute("priceList", priceList);
    model.addAttribute("totalPriceList", totalPriceList);

    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    MypageDTO mypageDto = mypageDao.getUserById(userid);
    if (mypageDto == null) {
        model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
        return "error";
    }
    model.addAttribute("totalpoints", mypageDto.getTotalpoints());

    return "cart/cartPayment";
}

   @GetMapping("/cartPayment")
public String cartPayment(
        @RequestParam("cartid") String cartid,
        @RequestParam("goodsid") String goodsidParam,
        @RequestParam("size") String sizeParam,
        @RequestParam("quantity") String quantityParam,
        @RequestParam("price") String priceParam,
        @RequestParam("deliveryfee") String deliveryfee,
        @RequestParam("totalPrice") String totalPrice,
        HttpSession session, Model model) {
    
    String userid = (String) session.getAttribute("userID");
    if (userid == null) {
        return "redirect:/member/login";
    }

    List<String> goodsidList = Arrays.asList(goodsidParam.split(","));
    List<String> sizeList = Arrays.asList(sizeParam.split(","));
    List<Integer> quantityList = Arrays.asList(quantityParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> priceList = Arrays.asList(priceParam.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    List<Integer> totalPriceList = Arrays.asList(totalPrice.split(",")).stream().map(Integer::parseInt).collect(Collectors.toList());
    
    // Validate stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        String itemGoodsId = goodsidList.get(i);
        String itemSize = sizeList.get(i);
        int requestedQuantity = quantityList.get(i);

        List<StockDTO> stockList = goodsDao.stocklist(itemGoodsId);
        int availableStock = stockList.stream()
            .filter(stock -> stock.getSize().equals(itemSize))
            .mapToInt(StockDTO::getStockquantity)
            .findFirst()
            .orElse(0);

        if (requestedQuantity > availableStock) {
            model.addAttribute("error", "상품 " + itemGoodsId + "의 재고가 부족합니다.");
            return "cart/cartPayment";
        }
    }

    // Update stock quantity
    for (int i = 0; i < goodsidList.size(); i++) {
        StockDTO stockDto = new StockDTO();
        stockDto.setGoodsid(goodsidList.get(i));
        stockDto.setSize(sizeList.get(i));
        stockDto.setStockquantity(quantityList.get(i));
        goodsDao.buystockupdate(stockDto);
    }
    
    // Retrieve selected items and add to model
    List<GoodsDTO> goodsList = goodsidList.stream().map(goodsDao::detail).collect(Collectors.toList());
    model.addAttribute("goodsid", goodsidParam);
    model.addAttribute("size", sizeParam);
    model.addAttribute("quantity", quantityParam);
    model.addAttribute("price", priceParam);
    model.addAttribute("totalPrice", totalPrice);
    model.addAttribute("deliveryfee", deliveryfee);
    model.addAttribute("cartid", cartid);
    
    model.addAttribute("goodsList", goodsList);
    model.addAttribute("sizeList", sizeList);
    model.addAttribute("quantityList", quantityList);
    model.addAttribute("priceList", priceList);
    model.addAttribute("totalPriceList", totalPriceList);

    List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
    model.addAttribute("couponList", couponList);

    MypageDTO mypageDto = mypageDao.getUserById(userid);
    if (mypageDto == null) {
        model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
        return "cart/cartPayment";
    }
    model.addAttribute("totalpoints", mypageDto.getTotalpoints());

    return "cart/cartPayment";
}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">
    <!-- 리뷰 추가 -->
    <insert id="insert" parameterType="kr.co.matchday.review.ReviewDTO">
        INSERT INTO review (reviewid, userid, matchid, goodsid, orderid, reviewdate, title, content, rating, grantedpoints, filename, filesize)
        VALUES (#{reviewid}, #{userid}, #{matchid}, #{goodsid}, #{orderid}, #{reviewdate}, #{title}, #{content}, #{rating}, #{grantedpoints}, #{filename}, #{filesize})
    </insert>

    <!-- 특정 상품의 리뷰 목록 조회 -->
    <select id="getReviewList" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE goodsid = #{goodsid}
    </select>

    <!-- 특정 리뷰 조회 -->
    <select id="selectReviewById" parameterType="String" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review WHERE reviewid = #{reviewid}
    </select>

    <!-- 리뷰 업데이트 -->
    <update id="update" parameterType="kr.co.matchday.review.ReviewDTO">
        UPDATE review
        SET userid = #{userid}, matchid = #{matchid}, goodsid = #{goodsid}, orderid = #{orderid}, reviewdate = #{reviewdate},
            title = #{title}, content = #{content}, rating = #{rating}, grantedpoints = #{grantedpoints}, filename = #{filename}, filesize = #{filesize}
        WHERE reviewid = #{reviewid}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="reviewdelete" parameterType="String">
        DELETE FROM review WHERE reviewid = #{reviewid}
    </delete>

    <!-- 리뷰 ID에 해당하는 파일명 조회 -->
    <select id="filename" resultType="java.lang.String">
        SELECT filename
        FROM review
        WHERE reviewid = #{reviewid}
    </select>

    <!-- 모든 리뷰 조회 -->
    <select id="selectAll" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT * FROM review
    </select>

    <!-- 특정 리뷰 상세 조회 -->
    <select id="getReviewById" resultType="kr.co.matchday.review.ReviewDTO" parameterType="String">
        SELECT *
        FROM review
        WHERE reviewid = #{reviewid}
    </select>

    <!-- 모든 리뷰 목록 조회 -->
    <select id="getAllReviews" resultType="kr.co.matchday.review.ReviewDTO">
        SELECT *
        FROM review
    </select>
    
    <!-- 포인트 적립 내역 추가 -->
    <insert id="insertPointHistory">
        INSERT INTO pointhistory (userid, pointtype, pointsource, pointamount, pointcreationdate)
        VALUES (#{userid}, '적립', #{pointSource}, #{pointAmount}, NOW())
    </insert>
    
    <!-- 특정 상품에 대한 주문 목록 조회 -->
    <select id="getOrderListByGoodsId" parameterType="map" resultType="kr.co.matchday.order.OrderDTO">
        SELECT orderid, goodsid
        FROM `order`
        WHERE goodsid = #{goodsid} AND userid = #{userid}
    </select>

    <!-- 특정 주문에 대한 리뷰 수 조회 -->
    <select id="countReviewByOrderId" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM review WHERE orderid = #{orderid}
    </select>
</mapper>
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.point.PointHistoryDTO;
import kr.co.matchday.tickets.TicketsDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        System.out.println("HERE !! ");
        System.out.println(requestParams);
        System.out.println(requestParams.get("goodsid"));

        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientemail = requestParams.get("recipientemail");
        String recipientphone = requestParams.get("recipientphone");
        String shippingaddress = requestParams.get("shippingaddress");
        String shippingrequest = requestParams.get("shippingrequest");
        String paymentmethodcode = requestParams.get("paymentmethodcode");
        String couponid = requestParams.get("couponid");
        int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
        int discountprice = parseInteger(requestParams.get("discountprice"), 0);
        String userId = (String) session.getAttribute("userID");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);
        System.out.println("usedpoints = " + usedpoints);
        List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
        List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
        List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
        List<String> prices = Arrays.asList(requestParams.get("price").split(","));
        List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

        System.out.println("imp_uid: " + imp_uid);

        String allcartid = requestParams.get("cartid");
        List<String> cartidList = new ArrayList<String>();

        if (allcartid != "" && allcartid != null) {
            cartidList = Arrays.asList(allcartid.split(","));        // 장바구니 삭제용
        }

        if (userId == null) {
            response.put("success", false);
            response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
            return response;
        }

        if (goodsidList.isEmpty()) {
            response.put("success", false);
            response.put("message", "상품 ID가 유효하지 않습니다.");
            return response;
        }

        if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
            response.put("success", false);
            response.put("message", "결제 방법 코드가 유효하지 않습니다.");
            return response;
        }

        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
        "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        String redirectUrl = "/order/orderDetail?orderid=";
        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    //orderDto.setGoodsid(goodsidList.get(i));
                    orderDto.setOrderdate(currentDate); // 결제 날짜 설정
                    orderDto.setOrderstatus("Completed");
                    if (couponid != null && !couponid.isEmpty() && !couponid.equals("null")) {
                        orderDto.setCouponid(couponid);
                    } else {
                        orderDto.setCouponid(null);
                    }
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();    // TB : orderDetail : 장바구니 개별 구매내역 리스트
                    int Orderquantity = 0;        // TB : order (전체 주문내역 : 장바구니 내역)

                    for (int i = 0; i < goodsidList.size(); i++) {
                        OrderdetailDTO orderDetailDto = new OrderdetailDTO();
                        orderDetailDto.setOrderid(orderid);
                        orderDetailDto.setGoodsid(goodsidList.get(i));
                        orderDetailDto.setQuantity(Integer.parseInt(quantities.get(i)));
                        orderDetailDto.setSize(sizes.get(i));
                        orderDetailDto.setPrice(Integer.parseInt(prices.get(i)));
                        orderDetailDto.setTotalPrice(Integer.parseInt(totalPrices.get(i)));
                        orderDetails.add(orderDetailDto);
                        Orderquantity += Integer.parseInt(quantities.get(i));
                    }

                    orderDto.setOrderquantity(Orderquantity);
                    boolean stockAvailable = true;

                    for (int i = 0; i < goodsidList.size(); i++) {
                        String goodsid = goodsidList.get(i);
                        String size = sizes.get(i);
                        int quantity = Integer.parseInt(quantities.get(i));

                        StockDTO stock = goodsDao.getStockByGoodsIdAndSize(goodsid, size);
                        if (stock == null || stock.getStock() < quantity) {
                            stockAvailable = false;
                            break;
                        }
                    }

                    if (stockAvailable) {
                        orderDao.addOrder(orderDto);

                        for (OrderdetailDTO orderDetailDto : orderDetails) {
                            orderDao.addOrderDetail(orderDetailDto);
                            goodsDao.updateStock(orderDetailDto.getGoodsid(), orderDetailDto.getSize(), orderDetailDto.getQuantity());
                        }

                        if (usedpoints > 0) {
                            int result = mypageDao.deductUserPoints(userId, usedpoints);
                            if (result > 0) {
                                PointHistoryDTO pointHistoryDto = new PointHistoryDTO();
                                pointHistoryDto.setUserid(userId);
                                pointHistoryDto.setPoints(-usedpoints);
                                pointHistoryDto.setDescription("상품 구매 사용");
                                pointHistoryDto.setCreatedat(new Timestamp(System.currentTimeMillis()));
                                mypageDao.addPointHistory(pointHistoryDto);
                            }
                        }

                        if (couponid != null && !couponid.isEmpty() && !couponid.equals("null")) {
                            orderDao.markCouponAsUsed(couponid, userId);
                        }

                        // 장바구니 내역 삭제
                        for (String cartid : cartidList) {
                            cartDao.deleteCartItem(Integer.parseInt(cartid));
                        }

                        response.put("success", true);
                        response.put("redirectUrl", redirectUrl);
                    } else {
                        response.put("success", false);
                        response.put("message", "재고가 부족합니다.");
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 검증 중 오류가 발생했습니다.");
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 조회에 실패했습니다.");
        }

        return response;
    }

    private String getToken() {
        String impKey = env.getProperty("import.imp_key");
        String impSecret = env.getProperty("import.imp_secret");

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, String> body = new HashMap<>();
        body.put("imp_key", impKey);
        body.put("imp_secret", impSecret);

        HttpEntity<Map<String, String>> entity = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.postForEntity(
            "https://api.iamport.kr/users/getToken", entity, String.class);

        if (response.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> json = objectMapper.readValue(response.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) json.get("response");
                return (String) responseJson.get("access_token");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        Calendar calendar = Calendar.getInstance();
        return sdf.format(calendar.getTime());
    }

    @GetMapping("/orderDetail")
    public ModelAndView orderDetail(@RequestParam("orderid") String orderid) {
        ModelAndView mav = new ModelAndView("order/orderDetail");
        OrderDTO order = orderDao.getOrderById(orderid);
        if (order == null) {
            mav.addObject("error", "주문 정보를 찾을 수 없습니다.");
            return mav;
        }
        List<OrderdetailDTO> orderDetails = orderDao.getOrderDetailsByOrderId(orderid);
        mav.addObject("order", order);
        mav.addObject("orderDetails", orderDetails);
        return mav;
    }
}
   
   
   
   
   
   
   <mapper namespace="com.example.mypage.MyPageDAO">
    <!-- 포인트 관련 쿼리 예시 -->
    
    <!-- 사용자의 포인트 내역을 조회하는 쿼리 -->
    <select id="getUserPoints" parameterType="String" resultType="com.example.mypage.Point">
        SELECT point_id, user_id, point_amount, point_date
        FROM user_points
        WHERE user_id = #{userId}
    </select>
    
    <!-- 특정 주문의 포인트 정보를 조회하는 쿼리 -->
    <select id="getOrderPoints" parameterType="String" resultType="com.example.mypage.OrderPoints">
        SELECT order_id, point_amount
        FROM order_points
        WHERE order_id = #{orderId}
    </select>
</mapper>
   
   
   
   
   
   
   
   
   
   
   @PostMapping("/verifyPayment")
@ResponseBody
public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
    Map<String, Object> response = new HashMap<>();
    
    String imp_uid = requestParams.get("imp_uid");
    String merchant_uid = requestParams.get("merchant_uid");
    int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
    int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
    String recipientname = requestParams.get("recipientname");
    String recipientemail = requestParams.get("recipientemail");
    String recipientphone = requestParams.get("recipientphone");
    String shippingaddress = requestParams.get("shippingaddress");
    String shippingrequest = requestParams.get("shippingrequest");
    String paymentmethodcode = requestParams.get("paymentmethodcode");
    String couponid = requestParams.get("couponid");
    int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
    int discountprice = parseInteger(requestParams.get("discountprice"), 0);
    String userId = (String) session.getAttribute("userID");
    int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

    List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
    List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
    List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
    List<String> prices = Arrays.asList(requestParams.get("price").split(","));
    List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

    String allcartid = requestParams.get("cartid");
    List<String> cartidList = new ArrayList<String>();
    
    if (allcartid != null && !allcartid.isEmpty()) {
        cartidList = Arrays.asList(allcartid.split(","));
    }
    
    if (userId == null) {
        response.put("success", false);
        response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
        return response;
    }

    if (goodsidList.isEmpty()) {
        response.put("success", false);
        response.put("message", "상품 ID가 유효하지 않습니다.");
        return response;
    }

    if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
        response.put("success", false);
        response.put("message", "결제 방법 코드가 유효하지 않습니다.");
        return response;
    }

    String token = getToken();
    if (token == null) {
        response.put("success", false);
        response.put("message", "토큰을 가져오지 못했습니다.");
        return response;
    }

    RestTemplate restTemplate = new RestTemplate();
    HttpHeaders headers = new HttpHeaders();
    headers.setBearerAuth(token);

    HttpEntity<String> entity = new HttpEntity<>(headers);
    ResponseEntity<String> paymentResponse = restTemplate.exchange(
    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

    String redirectUrl = "/order/orderDetail?orderid=";
    if (paymentResponse.getStatusCode() == HttpStatus.OK) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
            Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
            int amount = (Integer) responseJson.get("amount");

            if (amount == paid_amount) {
                String orderid = generateOrderId();
                redirectUrl = redirectUrl + orderid;
                String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                OrderDTO orderDto = new OrderDTO();
                orderDto.setOrderid(orderid);
                orderDto.setUserid(userId);
                orderDto.setOrderdate(currentDate);
                orderDto.setOrderstatus("Completed");
                orderDto.setCouponid(couponid);
                orderDto.setUsedpoints(usedpoints);
                orderDto.setFinalpaymentamount(finalpaymentamount);
                orderDto.setShippingstatus("Pending");
                orderDto.setRecipientname(recipientname);
                orderDto.setRecipientemail(recipientemail);
                orderDto.setRecipientphone(recipientphone);
                orderDto.setShippingaddress(shippingaddress);
                orderDto.setShippingrequest(shippingrequest);
                orderDto.setPaymentmethodcode(paymentmethodcode);
                orderDto.setDeliveryfee(deliveryFee);
                orderDto.setDiscountprice(discountprice);
                orderDto.setImpUid(imp_uid);

                List<OrderdetailDTO> orderDetails = new ArrayList<>();
                int Orderquantity = 0;
                int Orderprice = 0;

                for (int i = 0; i < goodsidList.size(); i++) {
                    int quantity = parseInteger(quantities.get(i), 1);
                    int price = parseInteger(prices.get(i), 0);
                    
                    Orderquantity += quantity;
                    Orderprice += (price * quantity);
                    
                    OrderdetailDTO orderDetail = new OrderdetailDTO();
                    orderDetail.setGoodsid(goodsidList.get(i));
                    orderDetail.setSize(sizes.get(i));
                    orderDetail.setQuantity(quantity);
                    orderDetail.setPrice(price);
                    orderDetail.setTotalamount(price * quantity);
                    orderDetails.add(orderDetail);

                    StockDTO stockDto = new StockDTO();
                    stockDto.setGoodsid(goodsidList.get(i));
                    stockDto.setSize(sizes.get(i));
                    stockDto.setStockquantity(quantity);
                    goodsDao.buystockupdate(stockDto);
                    
                    if (!cartidList.isEmpty()) {
                        cartDao.delete(Integer.parseInt(cartidList.get(i)));
                    }
                    
                    orderDto.setOrderDetails(orderDetails);
                }

                orderDto.setPrice(Orderprice);
                orderDto.setQuantity(Orderquantity);
                orderDto.setTotalprice(Orderprice);
                orderDto.setReceiptmethodcode("receiving02");

                try {
                    orderDao.insert(orderDto);
                } catch (Exception e) {
                    response.put("success", false);
                    response.put("message", "Order insertion failed.");
                    return response;
                }
                
                if (couponid != null && !couponid.equals("0")) {
                    orderDao.updateCouponUsage(couponid);
                }

                MypageDTO mypageDto = mypageDao.getUserById(userId);
                if (mypageDto != null) {
                    int totalpoints = mypageDto.getTotalpoints();
                    if (totalpoints >= usedpoints) {
                        int remainingPoints = totalpoints - usedpoints;
                        // 포인트 업데이트
                        mypageDao.updatePoints(userId, remainingPoints);

                        // 포인트 사용 기록 추가
                        PointHistoryDTO pointHistory = new PointHistoryDTO();
                        pointHistory.setUserid(userId);
                        pointHistory.setPointcategoryid("point_use");
                        pointHistory.setPointtype("사용");
                        pointHistory.setPointamount(-usedpoints);
                        pointHistory.setOrderid(orderid);
                        orderDao.insertPointHistory(pointHistory);

                        response.put("success", true);
                        response.put("redirectUrl", redirectUrl);
                    } else {
                        response.put("success", false);
                        response.put("message", "사용 가능한 포인트가 부족합니다.");
                        return response;
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "사용자 포인트 정보를 찾을 수 없습니다.");
                    return response;
                }
            } else {
                response.put("success", false);
                response.put("message", "결제 금액이 일치하지 않습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }
    } else {
        response.put("success", false);
        response.put("message", "결제 정보를 가져오지 못했습니다.");
    }

    return response;
}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.*;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private Environment env;

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        try {
            String imp_uid = requestParams.get("imp_uid");
            String merchant_uid = requestParams.get("merchant_uid");
            int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
            int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
            String recipientname = requestParams.get("recipientname");
            String recipientemail = requestParams.get("recipientemail");
            String recipientphone = requestParams.get("recipientphone");
            String shippingaddress = requestParams.get("shippingaddress");
            String shippingrequest = requestParams.get("shippingrequest");
            String paymentmethodcode = requestParams.get("paymentmethodcode");
            String couponid = requestParams.get("couponid");
            int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
            int discountprice = parseInteger(requestParams.get("discountprice"), 0);
            String userId = (String) session.getAttribute("userID");
            int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

            List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
            List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
            List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
            List<String> prices = Arrays.asList(requestParams.get("price").split(","));
            List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

            String allcartid = requestParams.get("cartid");
            List<String> cartidList = new ArrayList<>();
            if (allcartid != null && !allcartid.isEmpty()) {
                cartidList = Arrays.asList(allcartid.split(","));
            }

            if (userId == null) {
                response.put("success", false);
                response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                return response;
            }

            if (goodsidList.isEmpty()) {
                response.put("success", false);
                response.put("message", "상품 ID가 유효하지 않습니다.");
                return response;
            }

            if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
                response.put("success", false);
                response.put("message", "결제 방법 코드가 유효하지 않습니다.");
                return response;
            }

            String token = getToken();
            if (token == null) {
                response.put("success", false);
                response.put("message", "토큰을 가져오지 못했습니다.");
                return response;
            }

            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

            String redirectUrl = "/order/orderDetail?orderid=";
            if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setOrderdate(currentDate);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid != null && !couponid.isEmpty() && !couponid.equals("null") ? couponid : null);
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();
                    int Orderquantity = 0;
                    int Orderprice = 0;

                    for (int i = 0; i < goodsidList.size(); i++) {
                        int quantity = parseInteger(quantities.get(i), 1);
                        int price = parseInteger(prices.get(i), 0);

                        Orderquantity += quantity;
                        Orderprice += (price * quantity);

                        OrderdetailDTO orderDetail = new OrderdetailDTO();
                        orderDetail.setGoodsid(goodsidList.get(i));
                        orderDetail.setSize(sizes.get(i));
                        orderDetail.setQuantity(quantity);
                        orderDetail.setPrice(price);
                        orderDetail.setTotalamount(price * quantity);
                        orderDetails.add(orderDetail);

                        // 재고 수정
                        StockDTO stockDto = new StockDTO();
                        stockDto.setGoodsid(goodsidList.get(i));
                        stockDto.setSize(sizes.get(i));
                        stockDto.setStockquantity(quantity);
                        goodsDao.buystockupdate(stockDto);

                        // 장바구니 삭제
                        if (!cartidList.isEmpty()) {
                            cartDao.delete(Integer.parseInt(cartidList.get(i)));
                        }
                    }

                    orderDto.setOrderDetails(orderDetails);
                    orderDto.setPrice(Orderprice);
                    orderDto.setQuantity(Orderquantity);
                    orderDto.setTotalprice(Orderprice);
                    orderDto.setReceiptmethodcode("receiving02");

                    try {
                        orderDao.insert(orderDto);
                        if (couponid != null && !couponid.equals("0")) {
                            orderDao.updateCouponUsage(couponid);
                        }

                        MypageDTO mypageDto = mypageDao.getUserById(userId);
                        if (mypageDto != null) {
                            int totalpoints = mypageDto.getTotalpoints();
                            if (totalpoints >= usedpoints) {
                                int remainingPoints = totalpoints - usedpoints;
                                mypageDao.updateTotalPoints(userId, remainingPoints);

                                PointHistoryDTO pointHistory = new PointHistoryDTO();
                                pointHistory.setUserid(userId);
                                pointHistory.setPointcategoryid("point_use");
                                pointHistory.setPointtype("사용");
                                pointHistory.setPointamount(-usedpoints);
                                pointHistory.setOrderid(orderid);
                                orderDao.insertPointHistory(pointHistory);

                                response.put("success", true);
                                response.put("redirectUrl", redirectUrl);
                            } else {
                                response.put("success", false);
                                response.put("message", "사용 가능한 포인트가 부족합니다.");
                            }
                        } else {
                            response.put("success", false);
                            response.put("message", "사용자 포인트 정보를 찾을 수 없습니다.");
                        }
                    } catch (Exception e) {
                        response.put("success", false);
                        response.put("message", "주문 처리 중 오류 발생.");
                        e.printStackTrace();
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } else {
                response.put("success", false);
                response.put("message", "결제 정보를 가져오지 못했습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 검증 중 오류 발생.");
            e.printStackTrace();
        }

        return response;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        String prefix = "order";
        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(date);

        int nextSuffix = 1;
        if (maxOrderId != null) {
            nextSuffix = Integer.parseInt(maxOrderId.substring(maxOrderId.length() - 6)) + 1;
        }

        return String.format("%s%s%06d", prefix, date, nextSuffix);
    }

    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.client.RestTemplate;

import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.*;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private CartDAO cartDao;

    @Autowired
    private MypageDAO mypageDao;

    @Autowired
    private Environment env;

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        try {
            // 요청 파라미터 추출
            String imp_uid = requestParams.get("imp_uid");
            String merchant_uid = requestParams.get("merchant_uid");
            int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
            int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
            String recipientname = requestParams.get("recipientname");
            String recipientemail = requestParams.get("recipientemail");
            String recipientphone = requestParams.get("recipientphone");
            String shippingaddress = requestParams.get("shippingaddress");
            String shippingrequest = requestParams.get("shippingrequest");
            String paymentmethodcode = requestParams.get("paymentmethodcode");
            String couponid = requestParams.get("couponid");
            int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
            int discountprice = parseInteger(requestParams.get("discountprice"), 0);
            String userId = (String) session.getAttribute("userID");
            int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);

            List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
            List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
            List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
            List<String> prices = Arrays.asList(requestParams.get("price").split(","));
            List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

            String allcartid = requestParams.get("cartid");
            List<String> cartidList = new ArrayList<>();
            if (allcartid != null && !allcartid.isEmpty()) {
                cartidList = Arrays.asList(allcartid.split(","));
            }

            if (userId == null) {
                response.put("success", false);
                response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
                return response;
            }

            if (goodsidList.isEmpty()) {
                response.put("success", false);
                response.put("message", "상품 ID가 유효하지 않습니다.");
                return response;
            }

            if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
                response.put("success", false);
                response.put("message", "결제 방법 코드가 유효하지 않습니다.");
                return response;
            }

            // 결제 토큰 가져오기
            String token = getToken();
            if (token == null) {
                response.put("success", false);
                response.put("message", "토큰을 가져오지 못했습니다.");
                return response;
            }

            // 결제 정보 확인
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> paymentResponse = restTemplate.exchange(
                    "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

            String redirectUrl = "/order/orderDetail?orderid=";
            if (paymentResponse.getStatusCode() == HttpStatus.OK) {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    // 주문 DTO 설정
                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    orderDto.setOrderdate(currentDate);
                    orderDto.setOrderstatus("Completed");
                    orderDto.setCouponid(couponid != null && !couponid.isEmpty() && !couponid.equals("null") ? couponid : null);
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();
                    int Orderquantity = 0;
                    int Orderprice = 0;

                    // 주문 상세 설정 및 재고, 장바구니 업데이트
                    for (int i = 0; i < goodsidList.size(); i++) {
                        int quantity = parseInteger(quantities.get(i), 1);
                        int price = parseInteger(prices.get(i), 0);

                        Orderquantity += quantity;
                        Orderprice += (price * quantity);

                        OrderdetailDTO orderDetail = new OrderdetailDTO();
                        orderDetail.setGoodsid(goodsidList.get(i));
                        orderDetail.setSize(sizes.get(i));
                        orderDetail.setQuantity(quantity);
                        orderDetail.setPrice(price);
                        orderDetail.setTotalamount(price * quantity);
                        orderDetails.add(orderDetail);

                        // 재고 수정
                        StockDTO stockDto = new StockDTO();
                        stockDto.setGoodsid(goodsidList.get(i));
                        stockDto.setSize(sizes.get(i));
                        stockDto.setStockquantity(quantity);
                        goodsDao.buystockupdate(stockDto);

                        // 장바구니 삭제
                        if (!cartidList.isEmpty()) {
                            cartDao.delete(Integer.parseInt(cartidList.get(i)));
                        }
                    }

                    // 주문 상세 추가
                    orderDto.setOrderDetails(orderDetails);
                    orderDto.setPrice(Orderprice);
                    orderDto.setQuantity(Orderquantity);
                    orderDto.setTotalprice(Orderprice);
                    orderDto.setReceiptmethodcode("receiving02");

                    try {
                        // 주문 저장
                        orderDao.insert(orderDto);

                        // 쿠폰 사용 업데이트
                        if (couponid != null && !couponid.equals("0")) {
                            orderDao.updateCouponUsage(couponid);
                        }

                        // 사용자 포인트 업데이트
                        int totalpoints = mypageDao.getTotalPoints(userId);
                        if (totalpoints >= usedpoints) {
                            int remainingPoints = totalpoints - usedpoints;
                            mypageDao.updateTotalPoints(userId, remainingPoints);

                            PointHistoryDTO pointHistory = new PointHistoryDTO();
                            pointHistory.setUserid(userId);
                            pointHistory.setPointcategoryid("point_use");
                            pointHistory.setPointtype("사용");
                            pointHistory.setPointamount(-usedpoints);
                            pointHistory.setOrderid(orderid);
                            orderDao.insertPointHistory(pointHistory);

                            response.put("success", true);
                            response.put("redirectUrl", redirectUrl);
                        } else {
                            response.put("success", false);
                            response.put("message", "사용 가능한 포인트가 부족합니다.");
                        }
                    } catch (Exception e) {
                        response.put("success", false);
                        response.put("message", "주문 처리 중 오류 발생.");
                        e.printStackTrace();
                    }
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액 불일치.");
                }
            } else {
                response.put("success", false);
                response.put("message", "결제 정보 확인 실패.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "처리 중 오류 발생.");
            e.printStackTrace();
        }
        return response;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        String prefix = "order";
        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(date);

        int nextSuffix = 1;
        if (maxOrderId != null) {
            nextSuffix = Integer.parseInt(maxOrderId.substring(maxOrderId.length() - 6)) + 1;
        }

        return String.format("%s%s%06d", prefix, date, nextSuffix);
    }

    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}












<!-- totalpoints 업데이트 -->
<update id="buyupdateTotalPoints">
    UPDATE users u
    JOIN (
        SELECT userid, SUM(usedpoints) AS totalUsedPoints
        FROM orders
        WHERE orderid = #{orderid}
        GROUP BY userid
    ) o ON u.userid = o.userid
    SET u.totalpoints = u.totalpoints - o.totalUsedPoints
    WHERE u.userid = #{userid};
</update>

   
   
   
   
   
   
   
   
   
   <script>
    $(document).ready(function() {
        var orderId = "${order.orderid}";

        $('#cancel-payment').click(function() {
            if ("${order.orderstatus}" == "Cancelled") {
                alert('이미 결제취소 된 건 입니다.');
                return;
            }
            if (confirm('정말로 결제를 취소하시겠습니까?')) {
                $.ajax({
                    url: '/order/cancelPayment',
                    type: 'POST',
                    data: { orderid: orderId },
                    success: function(response) {
                        if (response.success) {
                            alert('결제가 취소되었습니다.');
                            window.location.href = '/order/orderList';
                        } else {
                            alert('결제 취소에 실패했습니다: ' + response.message);
                        }
                    },
                    error: function(error) {
                        alert('결제 취소 요청 중 오류가 발생했습니다.');
                    }
                });
            }
        });

        $('#go-back').click(function() {
            window.location.href = '/order/orderList';
        });

        console.log(orderId); // This will log the order ID
    });
</script>





<script>
    $(document).ready(function() {
        var orderid = "${order.orderid}";
        var orderstatus = "${order.orderstatus}";

        $('#cancel-payment').click(function() {
            if (orderstatus == 'Cancelled') {
                alert('이미 결제취소 된 건 입니다.');
                return;
            }
            if (confirm('정말로 결제를 취소하시겠습니까?')) {
                $.ajax({
                    url: '/order/cancelPayment',
                    type: 'POST',
                    data: { orderid: orderid },
                    success: function(response) {
                        if (response.success) {
                            alert('결제가 취소되었습니다.');
                            window.location.href = '/order/orderList';
                        } else {
                            alert('결제 취소에 실패했습니다: ' + response.message);
                        }
                    },
                    error: function(error) {
                        alert('결제 취소 요청 중 오류가 발생했습니다.');
                    }
                });
            }
        });

        console.log(1);
        console.log(orderid);
        console.log(orderstatus);
        console.log(2);
        console.log(orderid);  // Corrected line
        console.log(3);
        // Remove this line, imp_uid and impUid are not defined
        // console.log(imp_uid, impUid); 
        console.log(4);

        $('#go-back').click(function() {
            window.location.href = '/order/orderList';
        });
    });
</script>

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.goods;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class GoodsDAO {

   public GoodsDAO() {
      System.out.println("-----GoodsDAO() 객체 생성됨");
   }//end
   
   @Autowired
   SqlSession sqlSession;
   
   public void insert(GoodsDTO goodsDto) {
       sqlSession.insert("goods.insert", goodsDto);
   }//insert end

   public List<GoodsDTO> list() {
       return sqlSession.selectList("goods.list");
   }//list end

   public List<GoodsDTO> search(String productname) { 
       return sqlSession.selectList("goods.search", "%" + productname + "%");
   }//search end

   public GoodsDTO detail(String goodsid) {
       return sqlSession.selectOne("goods.detail", goodsid);
   }//detail end

   public void update(GoodsDTO goodsDto) {
       sqlSession.update("goods.update", goodsDto);
   }//update end

   public void delete(String goodsid) {
       sqlSession.delete("goods.delete", goodsid);
   }//delete end

   public String filename(String goodsid) {
       return sqlSession.selectOne("goods.filename", goodsid);
   }//filename end
   
   public List<GoodsDTO> listWithPaging(Map<String, Integer> params) {
        return sqlSession.selectList("goods.listWithPaging", params);
    }//listWithPaging end

    public int countGoods() {
        return sqlSession.selectOne("goods.countGoods");
    }//countGoods end
   
    public void stockinsert(StockDTO stockDto) {
       sqlSession.insert("goods.stockinsert", stockDto);
   }//stockinsert end
   
    public List<StockDTO> stocklist(String goodsid) {
       return sqlSession.selectList("goods.stocklist", goodsid);
   }//stocklist end
   
    public void stockupdate(StockDTO stockDto) {
       sqlSession.update("goods.stockupdate", stockDto);
   }//stockupdate end
    
    public void buystockupdate(StockDTO stockDto) {
       sqlSession.update("goods.buystockupdate", stockDto);
   }//buystockupdate end
    
    public void restoreStock(StockDTO stockDto) {
        sqlSession.update("goods.restoreStock", stockDto);
    }//restoreStock end
}//class end
   
   
   
   
   
   
   
   
   
   
   
   
   <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="goods">
 
    <!-- 상품 추가 -->
    <insert id="insert" parameterType="kr.co.matchday.goods.GoodsDTO">
        INSERT INTO goods(goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo)
        VALUES(#{goodsid}, #{category}, #{productname}, #{description}, #{size}, #{price}, #{stockquantity}, #{issoldout}, #{filename}, #{filesize}, #{regdate}, #{caution}, #{deliveryreturnsexchangesinfo})
    </insert>
    
    <!-- 전체 상품 목록 조회 -->
    <select id="list" resultType="kr.co.matchday.goods.GoodsDTO">
        SELECT goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo
        FROM goods
        ORDER BY productname
    </select>
    
    <!-- 상품 검색 -->
    <select id="search" resultType="kr.co.matchday.goods.GoodsDTO" parameterType="String">
        SELECT goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo
        FROM goods
        WHERE productname LIKE #{keyword}
        ORDER BY productname
    </select>
    
    <!-- 특정 상품 상세 조회 -->
    <select id="detail" resultType="kr.co.matchday.goods.GoodsDTO" parameterType="String">
        SELECT goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo
        FROM goods
        WHERE goodsid = #{goodsid}
    </select>
    
    <!-- 상품 정보 수정 -->
    <update id="update" parameterType="kr.co.matchday.goods.GoodsDTO">
        UPDATE goods
        SET category = #{category},
            productname = #{productname},
            description = #{description},
            size = #{size},
            price = #{price},
            stockquantity = #{stockquantity},
            issoldout = #{issoldout},
            filename = #{filename},
            filesize = #{filesize},
            regdate = #{regdate},
            caution = #{caution},
            deliveryreturnsexchangesinfo = #{deliveryreturnsexchangesinfo}
        WHERE goodsid = #{goodsid}
    </update>
    
    <!-- 상품 삭제 -->
    <delete id="delete" parameterType="String">
        DELETE FROM goods
        WHERE goodsid = #{goodsid}
    </delete>
   
   <!-- 굿즈 ID에 해당하는 파일명 조회 -->
   <select id="filename" resultType="java.lang.String">
       SELECT filename
       FROM goods
       WHERE goodsid = #{goodsid}
   </select>
   
   <!-- 페이징 처리된 전체 상품 목록 조회 -->
    <select id="listWithPaging" resultType="kr.co.matchday.goods.GoodsDTO" parameterType="map">
        SELECT goodsid, category, productname, description, size, price, stockquantity, issoldout, filename, filesize, regdate, caution, deliveryreturnsexchangesinfo
        FROM goods
        ORDER BY productname
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 전체 상품 수 조회 -->
    <select id="countGoods" resultType="int">
        SELECT COUNT(*) FROM goods
    </select>
   
   <!-- 재고 추가 -->
    <insert id="stockinsert" parameterType="kr.co.matchday.goods.StockDTO">
        INSERT INTO stock(goodsid, size, stockquantity)
        VALUES(#{goodsid}, #{size}, #{stockquantity})
    </insert>

    <!-- 특정 상품에 대한 재고 목록 조회 -->
    <select id="stocklist" resultType="kr.co.matchday.goods.StockDTO">
        SELECT goodsid, size, stockquantity
        FROM stock
        WHERE goodsid = #{goodsid}
        ORDER BY FIELD(size, 'FREE', 'S', 'M', 'L', 'XL')
    </select>

    <!-- 재고 정보 수정 -->
    <update id="stockupdate" parameterType="kr.co.matchday.goods.StockDTO">
        UPDATE stock
        SET stockquantity = #{stockquantity}
        WHERE goodsid = #{goodsid} AND size = #{size}
    </update>
    
    <!-- 재고 삭제 -->
    <delete id="stockdelete" parameterType="kr.co.matchday.goods.StockDTO">
        DELETE FROM stock
        WHERE goodsid = #{goodsid}
    </delete>
    
    <!-- 상품 구매 시 재고 감소 -->
    <update id="buystockupdate" parameterType="kr.co.matchday.goods.StockDTO">
        UPDATE stock
        SET stockquantity = stockquantity - #{stockquantity}
        WHERE goodsid = #{goodsid} AND size = #{size}
    </update>

    <!-- 재고 복구 -->
    <update id="restoreStock" parameterType="kr.co.matchday.goods.StockDTO">
        UPDATE stock
        SET stockquantity = stockquantity + #{stockquantity}
        WHERE goodsid = #{goodsid} AND size = #{size}
    </update>
</mapper>
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   package kr.co.matchday.order;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.http.HttpSession;
import kr.co.matchday.cart.CartDAO;
import kr.co.matchday.cart.CartDTO;
import kr.co.matchday.coupon.CouponDTO;
import kr.co.matchday.goods.GoodsDAO;
import kr.co.matchday.goods.GoodsDTO;
import kr.co.matchday.goods.StockDTO;
import kr.co.matchday.mypage.MypageDAO;
import kr.co.matchday.mypage.MypageDTO;
import kr.co.matchday.point.PointHistoryDTO;
import kr.co.matchday.tickets.TicketsDTO;

@Controller
@RequestMapping("/order")
public class OrderCont {

    @Autowired
    private OrderDAO orderDao;

    @Autowired
    private GoodsDAO goodsDao;

    @Autowired
    private MypageDAO mypageDao;
    
    @Autowired
    private CartDAO cartDao;

    @Autowired
    private Environment env;

    @GetMapping("/payment")
    public String payment(@RequestParam("goodsid") String goodsid,
                          @RequestParam("size") String size,
                          @RequestParam("quantity") int quantity,
                          @RequestParam("price") int price,
                          @RequestParam("deliveryfee") int deliveryfee,
                          @RequestParam("totalPrice") int totalPrice,
                          @RequestParam(value = "couponid", required = false) String couponid,
                          @RequestParam(value = "usedpoints", required = false, defaultValue = "0") int usedpoints,
                          HttpSession session, Model model) {
        String userid = (String) session.getAttribute("userID");
        if (userid == null) {
            return "redirect:/member/login";
        }

        GoodsDTO goods = goodsDao.detail(goodsid);
        if (goods == null) {
            model.addAttribute("error", "상품 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("goods", goods);
        model.addAttribute("size", size);
        model.addAttribute("quantity", quantity);
        model.addAttribute("price", price);
        model.addAttribute("totalPrice", totalPrice);
        model.addAttribute("deliveryfee", deliveryfee);
        model.addAttribute("couponid", couponid);
        model.addAttribute("usedpoints", usedpoints);

        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userid);
        model.addAttribute("couponList", couponList);

        int discountRate = 0;
        if (couponid != null && !couponid.isEmpty()) {
            try {
                discountRate = orderDao.getDiscountRateByCouponId(couponid);
            } catch (Exception e) {
                model.addAttribute("error", "유효하지 않은 쿠폰입니다.");
                return "error";
            }
        }
        model.addAttribute("discountRate", discountRate);

        MypageDTO mypageDto = mypageDao.getUserById(userid);
        if (mypageDto == null) {
            model.addAttribute("error", "사용자 정보를 찾을 수 없습니다.");
            return "error";
        }
        model.addAttribute("totalpoints", mypageDto.getTotalpoints());

        return "order/payment";
    }

    @PostMapping("/verifyPayment")
    @ResponseBody
    public Map<String, Object> verifyPayment(@RequestParam Map<String, String> requestParams, HttpSession session) {
        Map<String, Object> response = new HashMap<>();
        
        System.out.println("HERE !! ");
        System.out.println(requestParams);
        System.out.println(requestParams.get("goodsid"));
        
        
        String imp_uid = requestParams.get("imp_uid");
        String merchant_uid = requestParams.get("merchant_uid");
        int paid_amount = parseInteger(requestParams.get("paid_amount"), 0);
        int finalpaymentamount = parseInteger(requestParams.get("finalpaymentamount"), 0);
        String recipientname = requestParams.get("recipientname");
        String recipientemail = requestParams.get("recipientemail");
        String recipientphone = requestParams.get("recipientphone");
        String shippingaddress = requestParams.get("shippingaddress");
        String shippingrequest = requestParams.get("shippingrequest");
        String paymentmethodcode = requestParams.get("paymentmethodcode");
        String couponid = requestParams.get("couponid");
        int deliveryFee = parseInteger(requestParams.get("deliveryFee"), 0);
        int discountprice = parseInteger(requestParams.get("discountprice"), 0);
        String userId = (String) session.getAttribute("userID");
        int usedpoints = parseInteger(requestParams.get("usedpoints"), 0);
System.out.println("usedpoints = " + usedpoints);
        List<String> goodsidList = Arrays.asList(requestParams.get("goodsid").split(","));
        List<String> quantities = Arrays.asList(requestParams.get("quantity").split(","));
        List<String> sizes = Arrays.asList(requestParams.get("size").split(","));
        List<String> prices = Arrays.asList(requestParams.get("price").split(","));
        List<String> totalPrices = Arrays.asList(requestParams.get("totalPrice").split(","));

System.out.println("imp_uid: " + imp_uid);       
        
        String allcartid = requestParams.get("cartid");
        List<String> cartidList = new ArrayList<String>();
        
        if(allcartid != "" && allcartid != null) {
           cartidList = Arrays.asList(allcartid.split(","));      // 장바구니 삭제용
        }
        
        if (userId == null) {
            response.put("success", false);
            response.put("message", "세션에서 사용자 ID를 찾을 수 없습니다.");
            return response;
        }

        if (goodsidList.isEmpty()) {
            response.put("success", false);
            response.put("message", "상품 ID가 유효하지 않습니다.");
            return response;
        }

        if (paymentmethodcode == null || paymentmethodcode.isEmpty()) {
            response.put("success", false);
            response.put("message", "결제 방법 코드가 유효하지 않습니다.");
            return response;
        }

        String token = getToken();
        if (token == null) {
            response.put("success", false);
            response.put("message", "토큰을 가져오지 못했습니다.");
            return response;
        }

        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token);

        HttpEntity<String> entity = new HttpEntity<>(headers);
        ResponseEntity<String> paymentResponse = restTemplate.exchange(
        "https://api.iamport.kr/payments/" + imp_uid, HttpMethod.GET, entity, String.class);

        String redirectUrl = "/order/orderDetail?orderid=";
        if (paymentResponse.getStatusCode() == HttpStatus.OK) {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                Map<String, Object> paymentJson = objectMapper.readValue(paymentResponse.getBody(), Map.class);
                Map<String, Object> responseJson = (Map<String, Object>) paymentJson.get("response");
                int amount = (Integer) responseJson.get("amount");

                if (amount == paid_amount) {
                    String orderid = generateOrderId();
                    redirectUrl = redirectUrl + orderid;
                    String currentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

                    
                    OrderDTO orderDto = new OrderDTO();
                    orderDto.setOrderid(orderid);
                    orderDto.setUserid(userId);
                    //orderDto.setGoodsid(goodsidList.get(i));
                    orderDto.setOrderdate(currentDate); // 결제 날짜 설정
                    orderDto.setOrderstatus("Completed");
                    if (couponid != null && !couponid.isEmpty() && !couponid.equals("null")) {
                        orderDto.setCouponid(couponid);
                    } else {
                        orderDto.setCouponid(null);
                    }
                    orderDto.setUsedpoints(usedpoints);
                    orderDto.setFinalpaymentamount(finalpaymentamount);
                    orderDto.setShippingstatus("Pending");
                    orderDto.setRecipientname(recipientname);
                    orderDto.setRecipientemail(recipientemail);
                    orderDto.setRecipientphone(recipientphone);
                    orderDto.setShippingaddress(shippingaddress);
                    orderDto.setShippingrequest(shippingrequest);
                    orderDto.setPaymentmethodcode(paymentmethodcode);
                    orderDto.setDeliveryfee(deliveryFee);
                    orderDto.setDiscountprice(discountprice);
                    orderDto.setImpUid(imp_uid);

                    List<OrderdetailDTO> orderDetails = new ArrayList<>();   // TB : orderDetail : 장바구니 개별 구매내역 리스트
                    int Orderquantity = 0;      // TB : order (전체 주문내역 : 장바구니 선택 구매 갯수 합계)
                    int Orderprice = 0;         // TB : order (전체 주문내역 : 장바구니 선택 구매 가격 합계)
                    
                    for (int i = 0; i < goodsidList.size(); i++) {
                      int quantity = parseInteger(quantities.get(i), 1);
                       int price = parseInteger(prices.get(i), 0);
                      
                       Orderquantity = Orderquantity + quantity;
                       Orderprice = Orderprice + (price*quantity);
                       
                       OrderdetailDTO orderDetail = new OrderdetailDTO();
                       orderDetail.setGoodsid(goodsidList.get(i));
                       orderDetail.setSize(sizes.get(i));
                       orderDetail.setQuantity(quantity);
                       orderDetail.setPrice(price);
                       orderDetail.setTotalamount(price * quantity);
                       orderDetails.add(orderDetail);
   
                       // 재고수정 start!
                       StockDTO stockDto = new StockDTO();
                       stockDto.setGoodsid(goodsidList.get(i));
                       stockDto.setSize(sizes.get(i));
                       stockDto.setStockquantity(quantity);
                       goodsDao.buystockupdate(stockDto);         
                       // 재고수정 end!
                       
                       if(cartidList.size() > 0) {
                          cartDao.delete(Integer.parseInt(cartidList.get(i)));   // 장바구니 삭제
                       }
                       
                       orderDto.setOrderDetails(orderDetails);
                    }
                    
                    // 주문 상세 추가
                    orderDto.setPrice(Orderprice);
                    orderDto.setQuantity(Orderquantity);
                    orderDto.setTotalprice(Orderprice);
                    orderDto.setReceiptmethodcode("receiving02");
                   
                    
                    try {
                        orderDao.insert(orderDto); // 주문 저장
                        System.out.println("Order and Order details inserted successfully");
                    } catch (Exception e) {
                        System.err.println("Error inserting order: " + e.getMessage());
                        e.printStackTrace();
                        response.put("success", false);
                        response.put("message", "Order insertion failed.");
                        return response;
                    }
                    
                    // 쿠폰 사용 업데이트
                    if (couponid != null && !couponid.equals("0")) {
                        orderDao.updateCouponUsage(couponid);
                    }
                    /*
                    MypageDTO mypageDto = mypageDao.getUserById(userId);
                    if (mypageDto != null) {
                       //사용자 포인트 업데이트
                        int totalpoints = mypageDto.getTotalpoints();
                        if (totalpoints >= usedpoints) {
                            mypageDao.buyupdateTotalPoints(userId);

                            PointHistoryDTO pointHistory = new PointHistoryDTO();
                            pointHistory.setUserid(userId);
                            pointHistory.setPointcategoryid("point_use");
                            pointHistory.setPointtype("사용");
                            pointHistory.setPointamount(-usedpoints);
                            //pointHistory.setOrderid(orderid);
                            orderDao.insertPointHistory(pointHistory);

                            response.put("success", true);
                            response.put("redirectUrl", redirectUrl);
                        } else {
                            response.put("success", false);
                            response.put("message", "사용 가능한 포인트가 부족합니다.");
                            return response;
                        }
                    } else {
                        response.put("success", false);
                        response.put("message", "사용자 포인트 정보를 찾을 수 없습니다.");
                        return response;
                    }*/

                    response.put("success", true);
                    response.put("redirectUrl", redirectUrl);
                } else {
                    response.put("success", false);
                    response.put("message", "결제 금액이 일치하지 않습니다.");
                }
            } catch (Exception e) {
                response.put("success", false);
                response.put("message", "결제 검증 중 오류 발생.");
                e.printStackTrace();
            }
        } else {
            response.put("success", false);
            response.put("message", "결제 정보를 가져오지 못했습니다.");
        }

        return response;
    }

    private int parseInteger(String value, int defaultValue) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return defaultValue;
        }
    }

    private String generateOrderId() {
        String prefix = "order";
        String date = new SimpleDateFormat("yyyyMMdd").format(new Date());
        String maxOrderId = orderDao.getMaxOrderId(date);

        int nextSuffix = 1;
        if (maxOrderId != null) {
            nextSuffix = Integer.parseInt(maxOrderId.substring(maxOrderId.length() - 6)) + 1;
        }

        return String.format("%s%s%06d", prefix, date, nextSuffix);
    }

    private String getToken() {
        try {
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> request = new HashMap<>();
            request.put("imp_key", env.getProperty("iamport.api_key"));
            request.put("imp_secret", env.getProperty("iamport.api_secret"));

            ObjectMapper objectMapper = new ObjectMapper();
            String requestBody = objectMapper.writeValueAsString(request);

            HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);
            ResponseEntity<String> response = restTemplate.postForEntity("https://api.iamport.kr/users/getToken", entity, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                JSONObject json = new JSONObject(response.getBody());
                return json.getJSONObject("response").getString("access_token");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    //Mypage 결제 내역
    @GetMapping("/orderList")
    public ModelAndView orderList(@RequestParam(value = "orderid", required = false) String orderid, HttpSession session,Model model) {
        String userId = (String) session.getAttribute("userID");
        if (userId == null) {
            System.out.println("User ID not found in session.");
            return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
        }

        System.out.println("Fetching orders for userId: " + userId);
        List<OrderDTO> order = orderDao.getOrderByUserId(userId);
        List<OrderdetailDTO> orderDetail = new ArrayList<>();
        
        // 주문 날짜를 Date 객체로 변환하고 취소 마감시간을 설정하는 로직
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SimpleDateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        
        for (OrderDTO orderDto : order) {
            Date orderDate = null;
            try {
               // 주문 날짜를 Date 객체로 변환
                orderDate = formatter.parse(orderDto.getOrderdate());
            } catch (ParseException e) {
                e.printStackTrace();
            }
            // 취소 마감시간 설정 (임의로 3일 후로 설정)
            Calendar cal = Calendar.getInstance();
            if (orderDate != null) {
                cal.setTime(orderDate);
                cal.add(Calendar.DATE, 3);
                orderDto.setCancelDeadline(cal.getTime());
            }
        }

        ModelAndView mav = new ModelAndView("order/orderList");
        mav.addObject("order", order);
        
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        
        // 모든 주문에 대한 상세 정보를 조회
        if (orderid != null && !orderid.isEmpty()) {
            orderDetail = orderDao.getOrderDetailByOrderId(orderid);
        } else {
            // 전체 주문에 대한 상세 정보를 조회
            for (OrderDTO orderDto : order) {
                List<OrderdetailDTO> details = orderDao.getOrderDetailByOrderId(orderDto.getOrderid());
                orderDto.setOrderDetails(details);
            }
        }
        mav.addObject("orderDetail", orderDetail); // 상세 정보를 추가
        
        return mav;
    }
    
    //결제 상세 정보
    @GetMapping("/orderDetail")
    public ModelAndView reservationDetail(@RequestParam("orderid") String orderid, HttpSession session, Model model) {
       String userId = (String) session.getAttribute("userID");
        if (userId == null) {
            System.out.println("User ID not found in session.");
            return new ModelAndView("redirect:/login"); // 로그인 페이지로 리다이렉트
        }
       
       ModelAndView mav = new ModelAndView("order/orderDetail");

        // 주문 정보 조회
        OrderDTO order = orderDao.getOrderById(orderid);
        if (order == null) {
            mav.setViewName("errorPage");
            mav.addObject("message", "주문을 찾을 수 없습니다. ID: " + orderid);
            return mav;
        }
        //굿즈 상품
        List<GoodsDTO> goodsList = goodsDao.list();
        model.addAttribute("goodsList", goodsList);
        
        // 주문 상세 정보 조회
        List<OrderdetailDTO> orderdetail = orderDao.getOrderDetailByOrderId(orderid);
        model.addAttribute("orderdetail", orderdetail);

        //쿠폰
        List<CouponDTO> couponList = orderDao.getCouponsByUserId(userId);
        model.addAttribute("couponList", couponList);
        
        // 주문 날짜를 Date 객체로 변환하고 취소 마감시간을 설정하는 로직
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date orderDate = null;
        try {
            // 주문 날짜를 Date 객체로 변환
            orderDate = formatter.parse(order.getOrderdate());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        
        // 취소 마감시간 설정 (임의로 3일 후로 설정)
        Calendar cal = Calendar.getInstance();
        if (orderDate != null) {
            cal.setTime(orderDate);
            cal.add(Calendar.DATE, 3);
            order.setCancelDeadline(cal.getTime());
        }
        
        // 결제 내역 설정
        int serviceFee = session.getAttribute("serviceFee") != null ? Integer.parseInt(session.getAttribute("serviceFee").toString()) : 0;
        int deliveryFee = session.getAttribute("deliveryFee") != null ? Integer.parseInt(session.getAttribute("deliveryFee").toString()) : 0;
        int totalDiscount = session.getAttribute("totalDiscount") != null ? Integer.parseInt(session.getAttribute("totalDiscount").toString()) : 0;
        int totalPrice = order.getPrice() * order.getQuantity();
        int finalpaymentamount = session.getAttribute("finalpaymentamount") != null ? Integer.parseInt(session.getAttribute("totalPaymentAmount").toString()) : 0;
        String couponName = session.getAttribute("couponName") != null ? session.getAttribute("couponName").toString() : "";
        //포인트
        
        mav.addObject("serviceFee", serviceFee);
        mav.addObject("deliveryFee", deliveryFee);
        mav.addObject("couponName", couponName);
        //포인트
        mav.addObject("totalDiscount", totalDiscount);
        mav.addObject("totalPrice", totalPrice);
        mav.addObject("finalpaymentamount", finalpaymentamount);
        mav.addObject("order", order);

        return mav;
    }
    
    
    /* 결제 취소 메서드 */
    @PostMapping("/cancelPayment")
    @ResponseBody
    public Map<String, Object> cancelPayment(@RequestParam("orderid") String orderid) {
        Map<String, Object> response = new HashMap<>();

        try {
            // 주문 ID로 imp_uid 가져오기
            String impUid = orderDao.getImpUidByOrderId(orderid);

            if (impUid == null || impUid.isEmpty()) {
                response.put("success", false);
                response.put("message", "결제 정보를 찾을 수 없습니다.");
                return response;
            }

            // 아임포트 토큰 가져오기
            String token = getToken();
            if (token == null) {
                response.put("success", false);
                response.put("message", "토큰을 가져오지 못했습니다.");
                return response;
            }

            // 아임포트 API 호출하여 결제 취소
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> body = new HashMap<>();
            body.put("imp_uid", impUid);
            body.put("reason", "사용자 요청에 의한 취소");

            HttpEntity<Map<String, String>> entity = new HttpEntity<>(body, headers);
            ResponseEntity<String> cancelResponse = restTemplate.postForEntity(
                    "https://api.iamport.kr/payments/cancel", entity, String.class);

            if (cancelResponse.getStatusCode() == HttpStatus.OK) {
                cancelOrderAndUpdateCoupon(orderid);

                response.put("success", true);
                response.put("message", "결제가 성공적으로 취소되었습니다.");
            } else {
                response.put("success", false);
                response.put("message", "결제 취소에 실패했습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 취소 처리 중 오류가 발생했습니다.");
            e.printStackTrace();
        }

        return response;
    }

    /* 주문 취소 및 쿠폰 사용 상태 업데이트 */
    public void cancelOrderAndUpdateCoupon(String orderid) {
        // 주문 상태 업데이트
        orderDao.updateOrderStatus(orderid, "Cancelled");

        // 쿠폰 사용 상태를 'Not Used'로 업데이트
        OrderDTO order = orderDao.getOrderById(orderid);
        String couponid = order.getCouponid();
        if (couponid != null && !couponid.isEmpty()) {
            orderDao.resetCouponUsage(couponid);
        }
    }

    /* 결제 환불 메서드 */
    @PostMapping("/refundPayment")
    @ResponseBody
    public Map<String, Object> refundPayment(@RequestParam("orderid") String orderid) {
        Map<String, Object> response = new HashMap<>();

        try {
            // 주문 ID로 imp_uid 가져오기
            String impUid = orderDao.getImpUidByOrderId(orderid);

            if (impUid == null || impUid.isEmpty()) {
                response.put("success", false);
                response.put("message", "결제 정보를 찾을 수 없습니다.");
                return response;
            }

            // 아임포트 토큰 가져오기
            String token = getToken();
            if (token == null) {
                response.put("success", false);
                response.put("message", "토큰을 가져오지 못했습니다.");
                return response;
            }

            // 아임포트 API 호출하여 결제 환불
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(token);
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, String> body = new HashMap<>();
            body.put("imp_uid", impUid);
            body.put("reason", "사용자 요청에 의한 환불");

            HttpEntity<Map<String, String>> entity = new HttpEntity<>(body, headers);
            ResponseEntity<String> refundResponse = restTemplate.postForEntity(
                    "https://api.iamport.kr/payments/cancel", entity, String.class);

            if (refundResponse.getStatusCode() == HttpStatus.OK) {
                refundOrderAndUpdateStock(orderid);

                response.put("success", true);
                response.put("message", "결제가 성공적으로 환불되었습니다.");
            } else {
                response.put("success", false);
                response.put("message", "결제 환불에 실패했습니다.");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "결제 환불 처리 중 오류가 발생했습니다.");
            e.printStackTrace();
        }

        return response;
    }

    /* 주문 환불 및 재고 복구 */
    public void refundOrderAndUpdateStock(String orderid) {
        // 주문 상태 업데이트
        orderDao.updateOrderStatus(orderid, "Refunded");

        // 주문 상세 정보 가져오기
        List<OrderdetailDTO> orderDetails = orderDao.getOrderDetailByOrderId(orderid);
        
        // 재고 복구
        for (OrderdetailDTO orderDetail : orderDetails) {
            StockDTO stockDto = new StockDTO();
            stockDto.setGoodsid(orderDetail.getGoodsid());
            stockDto.setSize(orderDetail.getSize());
            stockDto.setStockquantity(orderDetail.getQuantity());
            goodsDao.restoreStock(stockDto);
        }
    }
}
   
   
   
   
   
   
   
   
   
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>구매하기</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.iamport.kr/js/iamport.payment-1.2.0.js"></script>
    <script src="https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script>
    <script type="text/javascript">
        IMP.init('imp05021463'); // 아임포트 관리자 콘솔에서 발급받은 가맹점 식별코드
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1, h2 {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .order_tit {
            border-bottom: 0.5px solid #000;
            margin-bottom: 30px;
        }

        .order_tit h2 {
            font-size: 30px;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }

        .order_tit ol {
            list-style: none;
            display: flex;
            justify-content: right;
        }

        .order_tit ol li {
            display: flex;
            align-items: center;
            margin-right: 30px;
            font-size: 20px;
            color: #666;
        }

        .order_tit ol li.page_on span {
            font-weight: bold;
            color: #333;
        }

        .order_tit ol li img {
            margin-left: 5px;
            vertical-align: middle;
        }

        .text-center {
            text-align: center;
        }

        .productname-text,
        .size-text,
        .quantity-text,
        .price-text,
        .totalprice-text {
            vertical-align: middle;
            font-size: 25px;
        }

        .order-section,
        .customer-section,
        .delivery-section,
        .discount-section {
            border-bottom: 1px solid #ddd;
            padding-top: 15px;
            margin-top: 15px;
        }

        .order-details {
            margin-bottom: 20px;
        }

        .quantity,
        .price,
        .discount,
        .total,
        .shipping {
            margin-bottom: 10px;
        }

        .subtotal-amount {
            text-align: right;
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 20px;
        }

        .total-amount {
            text-align: right;
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 20px;
        }

        form {
            margin-bottom: 20px;
        }

        form label {
            display: block;
            margin-bottom: 5px;
        }

        form input[type="text"],
        form input[type="email"],
        form input[type="tel"],
        form textarea,
        form input[type="radio"] {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        form input[type="radio"] {
            margin-right: 10px;
        }

        .form-label {
            font-weight: bold;
        }

        .form-control[readonly] {
            background-color: #e9ecef;
        }

        .checkout-button {
            text-align: center;
        }

        .checkout-button button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
    </style>
</head>
<body>
<div class="container">
    <!-- 숨겨진 필드로 goodsid 추가 -->
    <form id="payment-form">
        <input type="hidden" name="userid" value="${sessionScope.userID}">
        <input type="hidden" name="orderid" id="orderid" value="${order.orderid}">
        <input type="hidden" name="goodsid" id="goodsid" value="${goods.goodsid}">
        <input type="hidden" name="orderstatus" id="orderstatus" value="주문완료">
        <input type="hidden" name="paymentmethodcode" id="paymentmethodcode" value="pay01">
        <input type="hidden" name="receiptmethodcode" id="receiptmethodcode" value="receiving02">
        <input type="hidden" name="quantity" id="quantity" value="${quantity}">
        <input type="hidden" name="price" id="price" value="${price}">
        <input type="hidden" name="deliveryfee" id="deliveryfee" value="${deliveryfee}">
        <input type="hidden" name="finalpaymentamount" id="finalpaymentamount" value="${totalPrice - discountprice - points}">
        <input type="hidden" name="discountprice" id="discountprice" value="${discountprice}">
        <input type="hidden" name="usedpoints" id="usedpoints" value="${points}">
        <input type="hidden" name="totalPrice" id="total-price" value="${totalPrice}">
        <input type="hidden" name="size" id="size" value="${size}"> <!-- 사이즈 필드 추가 -->
    </form>

    <div class="order_tit">
        <h1>주문 및 결제</h1>
        <ol>
            <li class="page_on"><span>01</span>장바구니<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_off.png" alt="장바구니진행 중"></span></li>
            <li><span>02</span> 주문서작성/결제<span><img src="https://cdn-pro-web-210-60.cdn-nhncommerce.com/difkorea4_godomall_com/data/skin/front/TOPSKIN/img/member/icon_join_step_on.png" alt="주문서작성/결제대기"></span></li>
            <li><span>03</span> 주문완료</li>
        </ol>
    </div>

    <!-- 주문상세내역 -->
   <section class="order-section">
       <h2>주문상세내역</h2>
       <form>
           <div class="order-details">
               <div class="row">
                   <div class="col-sm-12">
                       <table class="table table-hover">
                           <thead class="table-active">
                           <tr>
                               <th class="text-center">상품 정보</th>
                               <th class="text-center">사이즈</th>
                               <th class="text-center">수량</th>
                               <th class="text-center">가격</th>
                               <th class="text-center">총 가격</th>
                           </tr>
                           </thead>
                           <tbody class="text-center">
                           <tr>
                               <td>
                                   <div class="product-image">
                                       <c:if test="${not empty goods.filename}">
                                           <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 100px; height: 100px; object-fit: cover;">
                                       </c:if>
                                   </div>
                                   <br>
                                   <span class="productname-text">${goods.productname}</span>
                               </td>
                               <td class="size-text">${size}</td>
                               <td class="quantity-text">${quantity}</td> <!-- 수량 값 표시 -->
                               <td class="price-text"><fmt:formatNumber value="${price}" pattern="#,###원" /></td>
                               <td class="totalprice-text"><fmt:formatNumber value="${totalPrice}" pattern="#,###원" /></td>
                           </tr>
                           </tbody>
                       </table>
                   </div>
               </div>
           </div>
       </form>
   </section>
    <!-- 주문상세내역 end -->

    <!-- 주문자 정보 -->
    <section class="customer-section">
        <h2>주문자 정보</h2>
        <form id="order-form">
            <div class="mb-3">
                <label for="recipientname" class="form-label">이름</label>
                <input type="text" id="recipientname" name="recipientname" class="form-control" value="${order.recipientname}" required>
            </div>
            <div class="mb-3">
                <label for="recipientemail" class="form-label">이메일</label>
                <input type="email" id="recipientemail" name="recipientemail" class="form-control" value="${order.recipientemail}" required>
            </div>
            <div class="mb-3">
                <label for="recipientphone" class="form-label">전화번호</label>
                <input type="text" id="recipientphone" name="recipientphone" class="form-control" value="${order.recipientphone}" required>
            </div>
        </form>
    </section>

    <!-- 배송 정보 -->
    <section class="delivery-section">
        <h2>배송 정보</h2>
        <form id="delivery-form">
            <div class="mb-3">
                <label for="postcode" class="form-label">우편번호</label>
                <input type="text" class="form-control" id="postcode" value="${order.shippingaddress}" readonly>
                <button type="button" class="btn btn-primary mt-2" id="find-postcode">우편번호 찾기</button>
            </div>
            <div class="mb-3">
                <label for="shippingaddress" class="form-label">배송 주소</label>
                <input type="text" class="form-control" id="shippingaddress" name="shippingaddress" value="${order.shippingaddress}" readonly>
            </div>
            <div class="mb-3">
                <label for="detailAddress" class="form-label">상세주소</label>
                <input type="text" class="form-control" id="detailAddress">
            </div>
            <div class="mb-3">
                <label for="shippingrequest">배송 시 요청 사항</label>
                <select id="shippingrequest" name="shippingrequest" class="form-select">
                    <option value="배송 시 요청사항을 선택해주세요.">배송 시 요청사항을 선택해주세요.</option>
                    <option value="부재 시 경비실에 맡겨주세요.">부재 시 경비실에 맡겨주세요.</option>
                    <option value="부재 시 택배함에 넣어주세요.">부재 시 택배함에 넣어주세요.</option>
                    <option value="부재 시 집 앞에 놔주세요.">부재 시 집 앞에 놔주세요.</option>
                    <option value="배송 전 연락 바랍니다.">배송 전 연락 바랍니다.</option>
                    <option value="파손의 위험이 있는 상품입니다. 배송 시 주의해 주세요.">파손의 위험이 있는 상품입니다. 배송 시 주의해 주세요.</option>
                    <option value="빠른 배송 부탁 드립니다">빠른 배송 부탁 드립니다.</option>
                    <option value="">직접 입력</option>
                </select>
                <textarea name="shippingrequest" id="shippingrequestText" onkeyup="" rows="5" maxlength="50" placeholder="최대 50까지 입력 가능합니다." style="display: none;"></textarea>
            </div>
        </form>
    </section>

    <!-- 할인 혜택 -->
    <section class="discount-section">
        <h2>할인 혜택</h2>
        <form id="discount-form">
            <label for="couponid" class="form-label">쿠폰 선택</label>
            <select id="couponid" name="couponid" class="form-select">
                <option value="">쿠폰 선택</option>
                <c:forEach items="${couponList}" var="coupon">
                    <option value="${coupon.couponid}" data-discount="${coupon.discountrate}">
                        ${coupon.couponname} ${coupon.discountrate}% (${coupon.startdate} ~ ${coupon.enddate})
                    </option>
                </c:forEach>
            </select>
            <br>
            <label for="point" id="usedpoints" class="form-label">보유 포인트 : ${totalpoints} point</label>
            <label for="point" id="usedpointsLabel" class="form-label">사용할 포인트 :
                <input type="number" id="pointsToUse" name="usedpoints" min="0" max="${totalpoints}" value="" placeholder="0 point" class="form-label">
            </label>
            <button type="button" id="usePointsButton" class="btn btn-info">포인트 사용</button>
        </form>
    </section>

    <div class="total-amount">
        <br>
        배송비 : <span id="delivery-fee">${deliveryfee}</span> (100,000원 이상 구매 시 무료)
        <br>
        최종 결제 금액 : <span id="final-amount">${finalpaymentamount}원</span>
    </div>

    <div class="checkout-button">
        <button type="button" id="pay-button">결제하기</button>
        <button type="button" class="btn btn-danger" onclick="closePopup()">결제취소</button>
    </div>
</div>

<script>
$(document).ready(function() {
    function updateTotalAmount() {
        var totalPrice = parseInt($('#total-price').val(), 10) || 0;
        var deliveryFee = parseInt($('#delivery-fee').text().replace(/[^0-9]/g, ''), 10) || 0;
        var discountRate = parseInt($('#couponid').find(':selected').data('discount'), 10) || 0;
        var points = parseInt($('#pointsToUse').val(), 10) || 0;

        var discountprice = Math.floor(totalPrice * (discountRate / 100)); //쿠폰 할인 금액
        var finalPaymentAmount = totalPrice - discountprice + deliveryFee - points;

        $('#delivery-fee').text(deliveryFee.toLocaleString() + '원');
        $('#final-amount').text(finalPaymentAmount.toLocaleString() + '원');
        $('#finalpaymentamount').val(finalPaymentAmount);
        $('#usedpoints').val(points);

        return totalPrice; 
    }

    $('#couponid').change(function() {
        updateTotalAmount();
    });

    $('#usePointsButton').click(function() {
        updateTotalAmount();
    });

    updateTotalAmount();

    $('#find-postcode').click(function() {
        new daum.Postcode({
            oncomplete: function(data) {
                var addr = '';
                var extraAddr = '';

                if (data.userSelectedType === 'R') {
                    addr = data.roadAddress;
                } else {
                    addr = data.jibunAddress;
                }

                if (data.userSelectedType === 'R') {
                    if (data.bname !== '' && /[동|로|가]$/g.test(data.bname)) {
                        extraAddr += data.bname;
                    }
                    if (data.buildingName !== '' && data.apartment === 'Y') {
                        extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                    }
                    if (extraAddr !== '') {
                        extraAddr = ' (' + extraAddr + ')';
                    }
                    $('#extraAddress').val(extraAddr);
                } else {
                    $('#extraAddress').val('');
                }

                $('#postcode').val(data.zonecode);
                $('#shippingaddress').val(addr);
                $('#detailAddress').focus();
            }
        }).open();
    });

    $('#pay-button').click(function() {
        var totalPrice = updateTotalAmount();
        var finalPaymentAmount = parseInt($('#finalpaymentamount').val(), 10) || 0;
        var couponId = $('#couponid').val();
        var couponName = $('#couponid').find(':selected').text();
        var discountRate = parseInt($('#couponid').find(':selected').data('discount'), 10) || 0;
        var discountprice = Math.floor(totalPrice * (discountRate / 100)); //쿠폰 할인 금액
        var deliveryFee = $('#delivery-fee').text().replace(/[^0-9]/g, '');
        var points = $('#pointsToUse').val();
        var quantity = parseInt($('#quantity').val(), 10) || 1; // 수량 값 가져오기
        var size = $('#size').val(); // 사이즈 값 가져오기

        IMP.request_pay({
            pg: 'html5_inicis',
            pay_method: 'card',
            merchant_uid: 'merchant_' + new Date().getTime(),
            name: '상품 주문 결제',
            amount: finalPaymentAmount,
            buyer_email: $('#recipientemail').val(),
            buyer_name: $('#recipientname').val(),
            buyer_tel: $('#recipientphone').val(),
            m_redirect_url: 'http://yourdomain.com/complete'
        }, function(rsp) {
            if (rsp.success) {
                var formData = {
                    imp_uid: rsp.imp_uid,
                    merchant_uid: rsp.merchant_uid,
                    paid_amount: rsp.paid_amount,
                    recipientname: $('#recipientname').val(),
                    recipientemail: $('#recipientemail').val(),
                    recipientphone: $('#recipientphone').val(),
                    shippingaddress: $('#shippingaddress').val() + ' ' + $('#detailAddress').val(),
                    shippingrequest: $('#shippingrequest').val(),
                    paymentmethodcode: $('#paymentmethodcode').val(),
                    couponid: couponId,
                    couponName: couponName,
                    deliveryFee: deliveryFee,
                    totalPaymentAmount: finalPaymentAmount,
                    usedpoints: points,
                    finalpaymentamount: finalPaymentAmount,
                    discountprice : discountprice,
                    goodsid: $('#goodsid').val(),
                    totalPrice: totalPrice,
                    price: parseInt($('#price').val(), 10),
                    quantity: quantity, // 수량 값 추가
                    size: size // 사이즈 값 추가
                };

                console.log('formData:', formData); // 로그 메시지 추가

                $.ajax({
                    type: 'POST',
                    url: '/order/verifyPayment',
                    data: formData,
                    traditional: true,
                    success: function(data) {
                        if (data.success) {
                           alert('결제가 완료되었습니다.');
                            window.opener.location.href = data.redirectUrl; // 팝업 호출 base page url 이동
                            window.close();                           // 현재 팝업 close
                        } else {
                            alert('결제 검증에 실패했습니다.');
                        }
                    }
                });
            } else {
                alert('결제에 실패하였습니다. 오류 내용 :' + rsp.error_msg);
            }
        });
    });

    function closePopup() {
        alert("결제가 취소되었습니다.");
        window.close();
    }
});

$(document).ready(function() {
    $('#cancel-payment').click(function() {
        var orderid = '${order.orderid}';
        if (confirm('정말로 결제를 취소하시겠습니까?')) {
            $.ajax({
                url: '/order/cancelPayment',
                type: 'POST',
                data: { orderid: orderid },
                success: function(response) {
                    if (response.success) {
                        alert('결제가 취소되었습니다.');
                        window.location.href = '/order/orderList';
                    } else {
                        alert('결제 취소에 실패했습니다: ' + response.message);
                    }
                },
                error: function(error) {
                    alert('결제 취소 요청 중 오류가 발생했습니다.');
                }
            });
        }
    });

    $('#go-back').click(function() {
        window.location.href = '/order/orderList';
    });
});
</script>
</body>
</html>
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ include file="../header.jsp" %>

<style>
    .card-header {
        background-color: #f8f9fa;
        font-weight: bold;
    }
    .info-title {
        font-weight: bold;
    }
    .info-content {
        margin-bottom: 0.5rem;
    }
    .table {
        width: 100%;
        table-layout: fixed;
    }
    .table th, .table td {
        word-wrap: break-word;
    }
    
    .table table-bordered{
       width: 100%;
        table-layout: fixed;
    }
    
    .table table-bordered th, .table table-bordered td{
       text-align: center;
        vertical-align: middle;
        font-size: 19px; /* 글자 크기 증가 */
    }
    
    .btn-group {
        display: flex;
        justify-content: center;
        gap: 10px;
    }
</style>

<div class="container mt-4">
    <h1 class="mb-4">주문 상세 정보</h1>
    
    <div class="card mb-4">
        <div class="card-header">
            주문 정보
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <tr>
                    <th>회원 ID</th>
                    <td>${order.userid}</td>
                </tr>
                <tr>
                    <th>주문번호</th>
                    <td>${order.orderid}</td>
                </tr>
                <tr>
                    <th>구매일자</th>
                    <td>${order.orderdate}</td>
                </tr>
                <tr>
                    <th>수령인 이름</th>
                    <td>${order.recipientname}</td>
                </tr>
                <tr>
                    <th>수령인 이메일</th>
                    <td>${order.recipientemail}</td>
                </tr>
                <tr>
                    <th>수령인 전화번호</th>
                    <td>${order.recipientphone}</td>
                </tr>
                <tr>
                    <th>배송지</th>
                    <td>${order.shippingaddress}</td>
                </tr>
                <tr>
                    <th>배송 요청사항</th>
                    <td>${order.shippingrequest}</td>
                </tr>
                <tr>
                    <th>배송 시작 일자</th>
                    <td>${order.shippingstartdate}</td>
                </tr>
                <tr>
                    <th>배송 종료 일자</th>
                    <td>${order.shippingenddate}</td>
                </tr>
                <tr>
                    <th>배송 상태</th>
                    <td>
                        <%-- <c:set var="currentDate" value="<%= new java.util.Date() %>" /> --%>
                        <c:choose>
                            <c:when test="${currentDate.after(order.shippingenddate)}">
                                배송완료
                            </c:when>
                            <c:otherwise>
                                배송중
                            </c:otherwise>
                        </c:choose>
                    </td>
                    <%-- <td>
                       <c:choose>
                            <c:when test="${order.shippingstatus == 'Completed'}">
                                배송완료
                            </c:when>
                            <c:when test="${order.shippingstatus == 'Pending'}">
                                배송중
                            </c:when>
                            <c:otherwise>
                                ${order.shippingstatus}
                            </c:otherwise>
                        </c:choose>
                    </td> --%>
                </tr>
            </table>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            결제 내역
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <tr>
                    <th>현재상태</th>
                    <td>
                        <c:choose>
                            <c:when test="${order.orderstatus == 'Completed'}">
                                주문 완료
                            </c:when>
                            <c:when test="${order.orderstatus == 'Cancelled'}">
                                결제 취소
                            </c:when>
                            <c:when test="${order.orderstatus == 'Refunded'}">
                                환불 완료
                            </c:when>
                            <c:otherwise>
                                ${order.orderstatus}
                            </c:otherwise>
                        </c:choose>
                    </td>
                </tr>
                <tr>
                    <th>결제수단</th>
                    <td>
                       <c:choose>
                          <c:when test="${order.paymentmethodcode == 'pay01'}">
                              카드
                          </c:when>
                          <c:otherwise>
                              ${order.paymentmethodcode}
                          </c:otherwise>
                       </c:choose> 
                    </td>
                </tr>
                <tr>
                    <th>배송료</th>
                    <td><fmt:formatNumber value="${order.deliveryfee}" pattern="#,###원"/></td>
                </tr>
                <tr>
                    <th>사용한 쿠폰 / 할인율</th>
               <td>
                   <c:choose>
                       <c:when test="${order.couponid != null}">
                           <c:forEach items="${couponList}" var="coupon">
                                ${coupon.couponname} / ${coupon.discountrate}%
                           </c:forEach>
                       </c:when>
                       <c:otherwise>
                           사용 안함
                       </c:otherwise>
                   </c:choose>
               </td>
                </tr>
                <tr>
                    <th>할인액</th>
                    <td><fmt:formatNumber value="${order.discountprice}" pattern="#,###원"/></td>
                </tr>
                <tr>
                    <th>사용한 포인트</th>
                    <td>${order.usedpoints}&nbsp;point</td>
                </tr>
                <tr>
                    <th>총 결제금액</th>
                    <td><fmt:formatNumber value="${order.finalpaymentamount}" pattern="#,###원"/>
                       <c:forEach items="${order.orderDetails}" var="orderDetail">
                       <fmt:formatNumber value="${orderDetail.totalamount}" pattern="#,###원"/>
                       </c:forEach>
                    </td>
                </tr>
            </table>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            주문 내역
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th style="text-align: center; vertical-align: middle;">상품명</th>
                        <th style="text-align: center; vertical-align: middle;">상품 사이즈</th>
                        <th style="text-align: center; vertical-align: middle;">상품 수량</th>
                        <th style="text-align: center; vertical-align: middle;">상품 가격</th>
                        <th style="text-align: center; vertical-align: middle;">상품 총 가격</th>
                    </tr>
                </thead>
                <tbody>
                   <c:forEach items="${orderdetail}" var="orderdetail">
                        <tr>
                           <td style="text-align: center; vertical-align: middle; font-size: 21px;">
                           <c:forEach items="${goodsList}" var="goods">
                               <c:if test="${orderdetail.goodsid eq goods.goodsid}">
                                 <c:if test="${not empty goods.filename}">
                                    <a href="${pageContext.request.contextPath}/goods/detail?goodsid=${goods.goodsid}">
                                    <img src="${pageContext.request.contextPath}/storage/goods/${goods.filename}" alt="${goods.productname}" style="width: 50px; height: 50px; object-fit: cover;">
                                    </a>
                                 </c:if>
                                <br>
                                  <span>${goods.productname}</span>
                               </c:if>
                            </c:forEach>
                         </td>
                            <td style="text-align: center; vertical-align: middle; font-size: 25px;">${orderdetail.size}</td>
                            <td style="text-align: center; vertical-align: middle; font-size: 25px;">${orderdetail.quantity}개</td>
                            <td style="text-align: center; vertical-align: middle; font-size: 25px;"><fmt:formatNumber value="${orderdetail.price}" pattern="#,###원"/></td>
                            <td style="text-align: center; vertical-align: middle; font-size: 25px;"><fmt:formatNumber value="${orderdetail.totalamount}" pattern="#,###원"/></td>
                        </tr>
                    </c:forEach>
                </tbody>
            </table>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            예약 취소 유의사항
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <tr>
                    <th>취소 마감시간</th>
                    <td>~<fmt:formatDate value="${order.cancelDeadline}" pattern="yyyy-MM-dd HH:mm:ss"/></td>
                </tr>
            </table>
            <p class="text-danger mt-3">취소 유의사항을 여기에 추가하세요.</p>
        </div>
    </div>

    <div class="btn-group" align="center">
       <c:choose>
            <c:when test="${order.orderstatus == 'Cancelled'}">
                <button id="cancel-payment" class="btn btn-danger" disabled>결제 취소</button>
            </c:when>
           <c:otherwise>
              <button id="cancel-payment" class="btn btn-danger">결제 취소</button>
           </c:otherwise>
        </c:choose>
        &nbsp;&nbsp;
        <button id="go-back" class="btn btn-secondary">목록으로</button>
        &nbsp;&nbsp;
        <c:choose>
            <c:when test="${order.orderstatus == 'Refunded'}">
                <button id="refund-payment" class="btn btn-danger" disabled>환불</button>
            </c:when>
            <c:otherwise>
                <button id="refund-payment" class="btn btn-danger">환불</button>
            </c:otherwise>
        </c:choose>
    </div>

<script>
    $(document).ready(function() {
        $('#cancel-payment').click(function() {
           if (${order.orderstatus == 'Cancelled'}) {
               alert('이미 결제취소 된 건 입니다.');
               return;
            }
            if (confirm('정말로 결제를 취소하시겠습니까?')) {
                $.ajax({
                    url: '/order/cancelPayment',
                    type: 'POST',
                    data: { orderid: '${order.orderid}' },
                    success: function(response) {
                        if (response.success) {
                            alert('결제가 취소되었습니다.');
                            window.location.href = '/order/orderList';
                        } else {
                            alert('결제 취소에 실패했습니다: ' + response.message);
                        }
                    },
                    error: function(error) {
                        alert('결제 취소 요청 중 오류가 발생했습니다.');
                    }
                });
            }
        });

        $('#go-back').click(function() {
            window.location.href = '/order/orderList';
        });

        $('#refund-payment').click(function() {
            
            if (confirm('정말로 환불하시겠습니까?')) {
                $.ajax({
                    url: '/order/refundPayment',
                    type: 'POST',
                    data: { orderid: orderid },
                    success: function(response) {
                        if (response.success) {
                            alert('결제가 환불되었습니다.');
                            window.location.href = '/order/orderList';
                        } else {
                            alert('결제 환불에 실패했습니다: ' + response.message);
                        }
                    },
                    error: function(error) {
                        alert('결제 환불 요청 중 오류가 발생했습니다.');
                    }
                });
            }
        });
    });
</script>

<%@ include file="../footer.jsp" %>
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   <script>
    var deliveryCharge = 3500; // 기본 배송비

    // 전체 선택/해제 기능
    function toggleCheckboxes(checked) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = checked;
        }
        calculateTotal();
    }

    // 수량 증가
    function incrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) + 1;
        input.value = newValue;
        updateTotalPrice();
    }

    // 수량 감소
    function decrementQuantity(button) {
        var input = button.parentNode.querySelector('.quantity-input');
        var newValue = parseInt(input.value) - 1;
        if (newValue >= 0) {
            input.value = newValue;
            updateTotalPrice();
        }
    }

    // 총 가격 업데이트
    function updateTotalPrice() {
        var totalSelectedCount = 0;
        var totalSelectedPrice = 0;

        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            if (checkbox.checked) {
                totalSelectedCount++;
                var row = checkbox.parentNode.parentNode;
                var quantity = parseInt(row.querySelector('.quantity-input').value);
                var unitPriceText = row.querySelector('td[data-price]').dataset.price.replace('원', '').replace(',', '').trim();
                var unitPrice = parseInt(unitPriceText);

                var totalPrice = quantity * unitPrice;
                totalSelectedPrice += totalPrice;
                row.querySelector('td[data-totalprice]').dataset.totalprice = totalPrice;
                row.querySelector('td[data-totalprice]').textContent = totalPrice.toLocaleString() + "원";
            }
        }

        document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
        document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();

        deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
        document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();

        var totalSettlePrice = totalSelectedPrice + deliveryCharge;
        document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
    }

    // 체크박스 변경 시 총합 업데이트
    function calculateTotal() {
        updateTotalPrice();
    }

    // 페이지 로드 시
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll('.quantity-input').forEach(function(input) {
            input.addEventListener('change', updateTotalPrice);
        });

        var cartItems = document.getElementsByName('selectedItems');
        if (cartItems.length === 0) {
            document.getElementById('noDataMessage').style.display = 'block';
        }

        document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
        document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
    });

    // 선택된 상품 삭제
    function deleteSelectedItems() {
        var selectedItems = Array.from(document.getElementsByName('selectedItems'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        if (selectedItems.length === 0) {
            alert("삭제할 상품을 선택해주세요.");
            return;
        }

        if (confirm("선택한 상품을 삭제하시겠습니까?")) {
            var url = '/cart/delete?cartid=' + selectedItems.join(',');
            location.href = url;
        }
    }

    // 전체 상품 삭제
    function deleteAllItems() {
        if (confirm("전체 상품을 삭제하시겠습니까?")) {
            var checkboxes = document.getElementsByName('selectedItems');
            for (var checkbox of checkboxes) {
                checkbox.checked = true;
            }
            var selectedItems = Array.from(checkboxes).map(checkbox => checkbox.value);
            var url = '/cart/delete?cartid=' + selectedItems.join(',');
            location.href = url;
        }
    }

    // 구매하기
    function proceedToCartPayment() {
        var selectedItems = Array.from(document.getElementsByName('selectedItems'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        if (selectedItems.length === 0) {
            alert("상품을 선택해주세요.");
            return;
        }

        var goodsidList = [];
        var sizeList = [];
        var quantityList = [];
        var priceList = [];
        var cartIdList = [];
        var totalPriceList = [];

        Array.from(document.querySelectorAll('input[name="selectedItems"]:checked')).forEach(function(checkbox) {
            var row = checkbox.closest('tr');
            goodsidList.push(row.querySelector('td[data-goodsid]').dataset.goodsid);
            sizeList.push(row.querySelector('td[data-size]').dataset.size);
            quantityList.push(row.querySelector('td[data-quantity] .quantity-input').value);
            priceList.push(row.querySelector('td[data-price]').dataset.price);
            totalPriceList.push(row.querySelector('td[data-totalprice]').dataset.totalprice);
            cartIdList.push(row.querySelector('td[data-cartid]').dataset.cartid);
        });

        var form = document.createElement('form');
        form.method = 'GET';
        form.action = '/cart/cartPayment';
        form.target = 'cartPaymentPopup';

        form.appendChild(createHiddenInput('cartid', cartIdList.join(',')));
        form.appendChild(createHiddenInput('goodsid', goodsidList.join(',')));
        form.appendChild(createHiddenInput('deliveryfee', deliveryCharge));
        form.appendChild(createHiddenInput('size', sizeList.join(',')));
        form.appendChild(createHiddenInput('quantity', quantityList.join(',')));
        form.appendChild(createHiddenInput('price', priceList.join(',')));
        form.appendChild(createHiddenInput('totalPrice', totalPriceList.join(',')));

        document.body.appendChild(form);
        var width = 1200;
        var height = 900;
        var left = (screen.width - width) / 2;
        var top = (screen.height - height) / 2;
        window.open('', "cartPaymentPopup", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
        form.submit();
    }

    // 숨겨진 입력 필드 생성
    function createHiddenInput(name, value) {
        var input = document.createElement('input');
        input.type = 'hidden';
        input.name = name;
        input.value = value;
        return input;
    }
</script>
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   document.addEventListener("DOMContentLoaded", function() {
    var quantityInputs = document.querySelectorAll('.quantity-input');
    for (var input of quantityInputs) {
        input.addEventListener('change', updateTotalPrice);
    }
    
    // 페이지 로드 시 총합 업데이트
    calculateTotal();
});

function toggleCheckboxes(checked) {
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        checkbox.checked = checked;
    }
    calculateTotal();
}

function incrementQuantity(button) {
    var input = button.parentNode.querySelector('.quantity-input');
    var newValue = parseInt(input.value) + 1;
    input.value = newValue;
    updateTotalPrice();
}

function decrementQuantity(button) {
    var input = button.parentNode.querySelector('.quantity-input');
    var newValue = parseInt(input.value) - 1;
    if (newValue >= 0) {
        input.value = newValue;
        updateTotalPrice();
    }
}

function updateTotalPrice() {
    var totalSelectedCount = 0;
    var totalSelectedPrice = 0;

    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            totalSelectedCount++;
            var row = checkbox.parentNode.parentNode;
            var quantity = parseInt(row.querySelector('.quantity-input').value);
            var unitPriceText = row.querySelector('td[data-price]').dataset.price.replace('원', '').replace(',', '').trim();
            var unitPrice = parseInt(unitPriceText);
            
            var totalPrice = quantity * unitPrice;
            totalSelectedPrice += totalPrice;
            row.querySelector('td[data-totalprice]').dataset.totalprice = totalPrice;
            row.querySelector('td[data-totalprice]').textContent = totalPrice.toLocaleString() + "원";
        }
    }

    document.getElementById('totalSelectedCount').textContent = totalSelectedCount;
    document.getElementById('totalSelectedPrice').textContent = totalSelectedPrice.toLocaleString();
    
    var deliveryCharge = totalSelectedPrice >= 100000 ? 0 : 3500;
    document.getElementById('totalDeliveryCharge').textContent = deliveryCharge.toLocaleString();
    
    var totalSettlePrice = totalSelectedPrice + deliveryCharge;
    document.getElementById('totalSettlePrice').textContent = totalSettlePrice.toLocaleString();
}

function calculateTotal() {
    updateTotalPrice();
}

function deleteSelectedItems() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("삭제할 상품을 선택해주세요.");
        return;
    }

    if (confirm("선택한 상품을 삭제하시겠습니까?")) {
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

function deleteAllItems() {
    if (confirm("전체 상품을 삭제하시겠습니까?")) {
        var checkboxes = document.getElementsByName('selectedItems');
        for (var checkbox of checkboxes) {
            checkbox.checked = true;
        }
        var selectedItems = [];
        for (var checkbox of checkboxes) {
            selectedItems.push(checkbox.value);
        }
        var url = '/cart/delete?cartid=' + selectedItems.join(',');
        location.href = url;
    }
}

document.addEventListener("DOMContentLoaded", function() {
    document.getElementById('deleteSelectedButton').addEventListener('click', deleteSelectedItems);
    document.getElementById('deleteAllButton').addEventListener('click', deleteAllItems);
});

function proceedToCartPayment() {
    var selectedItems = [];
    var checkboxes = document.getElementsByName('selectedItems');
    for (var checkbox of checkboxes) {
        if (checkbox.checked) {
            selectedItems.push(checkbox.value);
        }
    }

    if (selectedItems.length === 0) {
        alert("상품을 선택해주세요.");
        return;
    }

    var goodsidList = [];
    var deliveryfee = '';
    var sizeList = [];
    var quantityList = [];
    var priceList = [];
    var cartIdList = [];
    var totalPriceList = [];

    var rows = Array.from(document.querySelectorAll('input[name="selectedItems"]:checked')).map(checkbox => checkbox.closest('tr'));
    rows.forEach(function(row) {
        goodsidList.push(row.querySelector('td[data-goodsid]').dataset.goodsid);
        sizeList.push(row.querySelector('td[data-size]').dataset.size);
        quantityList.push(row.querySelector('td[data-quantity] .quantity-input').value);
        priceList.push(row.querySelector('td[data-price]').dataset.price);
        totalPriceList.push(row.querySelector('td[data-totalprice]').dataset.totalprice);
        cartIdList.push(row.querySelector('td[data-cartid]').dataset.cartid);
    });

    var form = document.createElement('form');
    form.method = 'GET';
    form.action = '${pageContext.request.contextPath}/cart/cartPayment';
    form.target = 'cartPaymentPopup';

    var cartidInput = document.createElement('input');
    cartidInput.type = 'hidden';
    cartidInput.name = 'cartid';
    cartidInput.value = cartIdList.join(',');
    form.appendChild(cartidInput);
    
    var goodsidInput = document.createElement('input');
    goodsidInput.type = 'hidden';
    goodsidInput.name = 'goodsid';
    goodsidInput.value = goodsidList.join(',');
    form.appendChild(goodsidInput);

    var deliveryfeeInput = document.createElement('input');
    deliveryfeeInput.type = 'hidden';
    deliveryfeeInput.name = 'deliveryfee';
    deliveryfeeInput.value = deliveryCharge;
    form.appendChild(deliveryfeeInput);
    
    var sizeInput = document.createElement('input');
    sizeInput.type = 'hidden';
    sizeInput.name = 'size';
    sizeInput.value = sizeList.join(',');
    form.appendChild(sizeInput);

    var quantityInput = document.createElement('input');
    quantityInput.type = 'hidden';
    quantityInput.name = 'quantity';
    quantityInput.value = quantityList.join(',');
    form.appendChild(quantityInput);

    var priceInput = document.createElement('input');
    priceInput.type = 'hidden';
    priceInput.name = 'price';
    priceInput.value = priceList.join(',');
    form.appendChild(priceInput);

    var totalPriceInput = document.createElement('input');
    totalPriceInput.type = 'hidden';
    totalPriceInput.name = 'totalPrice';
    totalPriceInput.value = totalPriceList.join(',');
    form.appendChild(totalPriceInput);

    document.body.appendChild(form);
    var width = 1200;
    var height = 900;
    var left = (screen.width - width) / 2;
    var top = (screen.height - height) / 2;
    window.open('', "cartPaymentPopup", "width=" + width + ",height=" + height + ",left=" + left + ",top=" + top + ",scrollbars=yes");
    form.submit();
}
   