<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.order.OrderDAO">

    <!-- 주어진 날짜에 대한 최대 주문 ID 가져오기 -->
    <select id="getMaxOrderId" resultType="String" parameterType="String">
        SELECT MAX(orderid)
        FROM `order`
        WHERE orderid LIKE CONCAT('order', #{date}, '%')
    </select>

    <!-- 주문 정보 삽입 -->
    <insert id="insert" parameterType="kr.co.matchday.order.OrderDTO">
	    INSERT INTO `order` (orderid, userid, orderdate, orderstatus, couponid, usedpoints, finalpaymentamount, shippingstartdate, shippingstatus, recipientname, recipientemail, recipientphone, shippingaddress, shippingrequest, paymentmethodcode, price, quantity, receiptmethodcode, totalprice, deliveryfee, discountprice, imp_uid)
	    VALUES (#{orderid}, #{userid}, #{orderdate}, #{orderstatus}, #{couponid}, #{usedpoints}, #{finalpaymentamount}, #{shippingstartdate}, #{shippingstatus}, #{recipientname}, #{recipientemail}, #{recipientphone}, #{shippingaddress}, #{shippingrequest}, #{paymentmethodcode}, #{price}, #{quantity}, #{receiptmethodcode}, #{totalprice}, #{deliveryfee}, #{discountprice}, #{impUid})
	</insert>
    
    <!-- 주문 상세정보 삽입 -->
    <insert id="insertOrderDetail" parameterType="kr.co.matchday.order.OrderdetailDTO">
        INSERT INTO orderdetail (orderid, goodsid, size, quantity, price, totalamount, iscanceled, isrefunded, isexchanged)
        VALUES (#{orderid}, #{goodsid}, #{size}, #{quantity}, #{price}, #{totalamount}, #{iscanceled}, #{isrefunded}, #{isexchanged})
    </insert>

    <!-- 사용자 ID로 주문 목록 가져오기 -->
    <select id="listByUser" parameterType="String" resultType="kr.co.matchday.order.OrderDTO">
        SELECT * FROM `order` WHERE userid = #{userid}
    </select>

    <!-- 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="Map">
        SELECT * FROM users WHERE userid = #{userid}
    </select>

    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, c.coupontypeid, c.userid, c.usage,
               cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userid}
          AND cm.applicableproduct = #{applicableProduct}
          <if test="usage != null">
          	AND c.usage = #{usage}
          </if>
          
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" resultType="int" parameterType="String">
        SELECT discountrate
        FROM couponmaster
        WHERE coupontypeid = (SELECT coupontypeid FROM coupon WHERE couponid = #{couponid})
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponid}
    </update>
    
    <!-- 쿠폰 사용 상태를 'Not Used'로 업데이트 -->
    <update id="resetCouponUsage" parameterType="string">
        UPDATE coupon
        SET `usage` = 'Not Used'
        WHERE couponid = #{couponId}
    </update>
    
    <!-- 포인트 적립 정보 삽입 -->
    <insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
        INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, reservationid)
        VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{reservationid})
    </insert>
    
    <!-- 사용자 ID로 주문 목록 조회 (주문일 기준 내림차순 정렬) -->
    <select id="getOrderByUserId" parameterType="string" resultType="kr.co.matchday.order.OrderDTO">
        SELECT od.*, g.*, o.*
        FROM `order` o
        JOIN orderdetail od ON o.orderid = od.orderid
        JOIN goods g ON od.goodsid = g.goodsid
        WHERE o.userid = #{userid}
        ORDER BY o.orderdate DESC
	</select>
	
	<!-- 주문 ID로 주문 정보 조회 -->
    <select id="getOrderById" parameterType="string" resultType="kr.co.matchday.order.OrderDTO">
        SELECT o.*, p.paymentmethodname, u.name as userName
        FROM `order` o
        JOIN users u ON o.userid = u.userid
        JOIN paymentmethods p ON o.paymentmethodcode = p.paymentmethodcode
        WHERE o.orderid = #{orderid}
    </select>
    
    <!-- 주문 ID로 주문 상세 정보 조회 -->
    <select id="getOrderDetailByOrderId" parameterType="string" resultType="kr.co.matchday.order.OrderdetailDTO">
        SELECT o.couponid, od.*
		FROM orderdetail od
		JOIN `order` o ON o.orderid = od.orderid
		WHERE o.orderid = #{orderid}
    </select>
    
    <!-- 사용자 포인트 업데이트 -->
	<!-- <update id="updateUserPoints" parameterType="string">
	    UPDATE users u
	    JOIN (
	        SELECT userid, SUM(usedpoints) AS total_used
	        FROM `order`
	        WHERE userid = #{userid}
	        GROUP BY userid
	    ) o ON u.userid = o.userid
	    SET u.totalpoints = u.totalpoints - o.total_used
	    WHERE u.userid = #{userid}
	</update> -->
    
    <!-- 주문 상태 업데이트 -->
    <update id="updateOrderStatus" parameterType="java.util.HashMap">
        UPDATE `order`
        SET orderstatus = #{orderstatus}
        WHERE orderid = #{orderid}
    </update>
    
    <!-- 주문 ID로 imp_uid 가져오기 -->
    <select id="getImpUidByOrderId" parameterType="string" resultType="string">
        SELECT imp_uid
        FROM `order`
        WHERE orderid = #{orderid}
    </select>
    
    
</mapper>
