<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.tickets.TicketsDAO">

    <!-- 경기 ID로 경기 정보 가져오기 -->
    <select id="getMatchById" resultType="kr.co.matchday.matches.MatchesDTO">
        SELECT matchid, hometeamid, awayteamid, stadiumid, matchdate, bookingstartdate, bookingenddate
        FROM matches
        WHERE matchid = #{matchid}
    </select>

    <!-- 경기장 ID와 구역으로 좌석 정보 가져오기 -->
    <select id="getSeatsByStadiumIdAndSection" resultType="map">
        SELECT seatid, stadiumid, section, seatnumber, price, seatstatus
        FROM seats
        WHERE stadiumid = #{stadiumid} AND section = #{section}
    </select>

    <!-- 좌석 ID로 좌석 정보 가져오기 -->
    <select id="getSeatInfoByJson" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT seatid, price
        FROM seats
        WHERE seatid = #{seatId}
    </select>

    <!-- 사용자 ID로 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT userid, name, email, number
        FROM users
        WHERE userid = #{userId}
    </select>

    <!-- 주어진 날짜에 대한 최대 예약 ID 가져오기 -->
    <select id="getMaxReservationId" resultType="String" parameterType="String">
        SELECT MAX(reservationid)
        FROM tickets
        WHERE reservationid LIKE CONCAT('reservation', #{date}, '%')
    </select>

    <!-- 티켓 정보 삽입 -->
    <insert id="insertTicket" parameterType="kr.co.matchday.tickets.TicketsDTO">
        INSERT INTO tickets (
            reservationid, matchid, quantity, price, userid, reservationdate,
            paymentmethodcode, reservationstatus, collectionmethodcode,
            membershipid, methodcode, couponid, usedpoints,
            finalpaymentamount, shippingstartdate, shippingenddate,
            shippingstatus, recipientname, shippingaddress, shippingrequest, imp_uid
        ) VALUES (
            #{reservationid}, #{matchid}, #{quantity}, #{price}, #{userid}, #{reservationdate},
            #{paymentmethodcode}, #{reservationstatus}, #{collectionmethodcode},
            #{membershipid}, #{methodcode}, 
            <if test="couponid != null">#{couponid},</if>
            <if test="couponid == null">NULL,</if>
            #{usedpoints}, #{finalpaymentamount}, #{shippingstartdate}, #{shippingenddate},
            #{shippingstatus}, #{recipientname}, #{shippingaddress}, #{shippingrequest}, #{impUid}
        )
    </insert>

    <!-- 티켓 상세 정보 삽입 -->
    <insert id="insertTicketDetail" parameterType="kr.co.matchday.tickets.TicketsDetailDTO">
        INSERT INTO ticketdetails (reservationid, matchid, seatid, price, totalamount, iscanceled, isrefunded)
        VALUES (#{reservationid}, #{matchid}, #{seatid}, #{price}, #{totalamount}, #{iscanceled}, #{isrefunded})
    </insert>

    <!-- 좌석 ID 존재 여부 확인 -->
    <select id="checkSeatId" parameterType="String" resultType="Integer">
        SELECT COUNT(*)
        FROM seats
        WHERE seatid = #{seatId}
    </select>
    
    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, c.coupontypeid, c.userid, c.usage,
               cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userId}
          AND cm.applicableproduct = #{applicableProduct}
          AND c.usage = #{usage}
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" parameterType="String" resultType="int">
        SELECT discountrate
        FROM couponmaster
        WHERE coupontypeid = (SELECT coupontypeid FROM coupon WHERE couponid = #{couponId})
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponId}
    </update>

    <!-- 쿠폰 사용 상태를 'Not Used'로 업데이트 -->
    <update id="resetCouponUsage" parameterType="string">
        UPDATE coupon
        SET `usage` = 'Not Used'
        WHERE couponid = #{couponId}
    </update>

    <!-- 사용자 ID로 예약 목록 조회 (예매일 기준 내림차순 정렬) -->
    <select id="getReservationsByUserId" parameterType="string" resultType="map">
        SELECT t.*, m.matchdate, m.hometeamid, m.awayteamid, m.stadiumid, s.stadiumname, s.location
        FROM tickets t
        JOIN matches m ON t.matchid = m.matchid
        JOIN stadiums s ON m.stadiumid = s.stadiumid
        WHERE t.userid = #{userId}
        ORDER BY t.reservationdate DESC
    </select>

    <!-- 경기 ID로 예약된 좌석 가져오기 -->
    <select id="getReservedSeats" parameterType="String" resultType="String">
        SELECT td.seatid
        FROM ticketdetails td
        JOIN tickets t ON td.reservationid = t.reservationid
        WHERE td.matchid = #{matchid} AND t.reservationstatus = 'Confirmed'
    </select>

    <!-- 예약 ID로 예약 정보 조회 -->
    <select id="getReservationById" parameterType="string" resultType="kr.co.matchday.tickets.TicketsDTO">
        SELECT t.*, m.matchdate, s.stadiumname, s.location, p.paymentmethodname, u.name as userName
        FROM tickets t
        JOIN matches m ON t.matchid = m.matchid
        JOIN stadiums s ON m.stadiumid = s.stadiumid
        JOIN users u ON t.userid = u.userid
        JOIN paymentmethods p ON t.paymentmethodcode = p.paymentmethodcode
        WHERE t.reservationid = #{reservationid}
    </select>

    <!-- 예약 ID로 티켓 상세 정보 조회 -->
    <select id="getTicketDetailsByReservationId" resultType="kr.co.matchday.tickets.TicketsDetailDTO">
        SELECT * FROM ticketdetails WHERE reservationid = #{reservationid}
    </select>

    <!-- 사용자 ID로 사용자가 가지고 있는 멤버십 정보 가져오기 -->
    <select id="getMembershipsByUserId" parameterType="String" resultType="java.util.HashMap">
        SELECT um.usermembershipid, m.membershipid, m.membershipname, m.teamname
        FROM usermemberships um
        JOIN memberships m ON um.membershipid = m.membershipid
        WHERE um.userid = #{userId}
    </select>

    <!-- 예약 상태 업데이트 -->
    <update id="updateReservationStatus" parameterType="java.util.HashMap">
        UPDATE tickets
        SET reservationstatus = #{status}
        WHERE reservationid = #{reservationid}
    </update>

    <!-- 예약 ID로 imp_uid 가져오기 -->
    <select id="getImpUidByReservationId" parameterType="string" resultType="string">
        SELECT imp_uid
        FROM tickets
        WHERE reservationid = #{reservationid}
    </select>

    <!-- 포인트 적립 정보 삽입 -->
    <insert id="insertPointHistory" parameterType="kr.co.matchday.point.PointHistoryDTO">
        INSERT INTO pointhistory (userid, pointcategoryid, pointtype, reviewid, pointsource, pointamount, pointcreationdate, reservationid)
        VALUES (#{userid}, #{pointcategoryid}, #{pointtype}, #{reviewid}, #{pointsource}, #{pointamount}, #{pointcreationdate}, #{reservationid})
    </insert>

    <!-- 포인트 카테고리 ID로 적립율 가져오기 -->
    <select id="getRateByCategoryId" parameterType="String" resultType="Double">
        SELECT rate FROM pointmaster WHERE pointcategoryid = #{pointcategoryid}
    </select>

    <!-- 예약 ID로 포인트 기록 조회 -->
    <select id="getPointHistoryByReservationId" parameterType="string" resultType="kr.co.matchday.point.PointHistoryDTO">
        SELECT * FROM pointhistory WHERE reservationid = #{reservationid} AND pointtype = '적립'
    </select>
</mapper>
