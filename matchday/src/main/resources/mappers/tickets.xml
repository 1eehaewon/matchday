<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.matchday.tickets.TicketsDAO">

    <!-- 경기 ID로 경기 정보 가져오기 -->
    <select id="getMatchById" resultType="kr.co.matchday.matches.MatchesDTO">
        SELECT matchid, hometeamid, awayteamid, stadiumid, matchdate, bookingstartdate, bookingenddate
        FROM matches
        WHERE matchid = #{matchid}
    </select>

    <!-- 경기장 ID와 구역으로 좌석 정보 가져오기 -->
    <select id="getSeatsByStadiumIdAndSection" resultType="map">
        SELECT seatid, stadiumid, section, seatnumber, price, seatstatus
        FROM seats
        WHERE stadiumid = #{stadiumid} AND section = #{section}
    </select>

    <!-- 좌석 ID로 좌석 정보 가져오기 -->
    <select id="getSeatInfoByJson" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT seatid, price
        FROM seats
        WHERE seatid = #{seatId}
    </select>

    <!-- 사용자 ID로 사용자 정보 가져오기 -->
    <select id="getUserInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT userid, name, email, number
        FROM users
        WHERE userid = #{userId}
    </select>

    <!-- 다음 예약 ID 접미사 가져오기 -->
    <select id="getMaxReservationId" resultType="String" parameterType="String">
        SELECT MAX(reservationid)
        FROM tickets
        WHERE reservationid LIKE CONCAT('reservation', #{date}, '%')
    </select>

    <!-- 티켓 정보 삽입 -->
    <insert id="insertTicket" parameterType="kr.co.matchday.tickets.TicketsDTO">
        INSERT INTO tickets (
            reservationid, matchid, quantity, price, userid, reservationdate,
            paymentmethodcode, reservationstatus, collectionmethodcode,
            membermembershipid, methodcode, couponid, usedpoints,
            finalpaymentamount, shippingstartdate, shippingenddate,
            shippingstatus, recipientname, shippingaddress, shippingrequest
        ) VALUES (
            #{reservationid}, #{matchid}, #{quantity}, #{price}, #{userid}, #{reservationdate},
            #{paymentmethodcode}, #{reservationstatus}, #{collectionmethodcode},
            #{membermembershipid}, #{methodcode}, #{couponid}, #{usedpoints},
            #{finalpaymentamount}, #{shippingstartdate}, #{shippingenddate},
            #{shippingstatus}, #{recipientname}, #{shippingaddress}, #{shippingrequest}
        )
    </insert>

    <!-- 티켓 상세 정보 삽입 -->
    <insert id="insertTicketDetail" parameterType="kr.co.matchday.tickets.TicketsDetailDTO">
        INSERT INTO ticketdetails (reservationid, matchid, seatid, price, totalamount, iscanceled, isrefunded)
        VALUES (#{reservationid}, #{matchid}, #{seatid}, #{price}, #{totalamount}, #{iscanceled}, #{isrefunded})
    </insert>

    <!-- 좌석 ID 존재 여부 확인 -->
    <select id="checkSeatId" parameterType="String" resultType="Integer">
        SELECT COUNT(*)
        FROM seats
        WHERE seatid = #{seatId}
    </select>
    
    <!-- 사용자 ID로 쿠폰 목록 가져오기 -->
    <select id="getCouponsByUserId" parameterType="String" resultType="kr.co.matchday.coupon.CouponDTO">
        SELECT c.couponid, cm.coupontypeid, c.userid, c.`usage`, cm.couponname, cm.startdate, cm.enddate, cm.applicableproduct, cm.discountrate
        FROM coupon c
        JOIN couponmaster cm ON c.coupontypeid = cm.coupontypeid
        WHERE c.userid = #{userId}
    </select>

    <!-- 쿠폰 ID로 할인율 가져오기 -->
    <select id="getDiscountRateByCouponId" parameterType="String" resultType="int">
        SELECT discountrate
        FROM couponmaster
        WHERE coupontypeid = (SELECT coupontypeid FROM coupon WHERE couponid = #{couponId})
    </select>

    <!-- 쿠폰 사용 여부 업데이트 -->
    <update id="updateCouponUsage" parameterType="String">
        UPDATE coupon
        SET `usage` = 'Used'
        WHERE couponid = #{couponId}
    </update>
</mapper>
